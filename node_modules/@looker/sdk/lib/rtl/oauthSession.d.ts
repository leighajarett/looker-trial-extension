import { AuthSession } from './authSession';
import { IRequestProps } from './transport';
import { AuthToken } from './authToken';
import { ICryptoHash } from './cryptoHash';
import { IPlatformServices } from './platformServices';
interface IAuthCodeGrantTypeParams {
    grant_type: 'authorization_code';
    code: string;
    code_verifier: string;
    client_id: string;
    redirect_uri: string;
}
export declare class OAuthSession extends AuthSession {
    activeToken: AuthToken;
    code_verifier?: string;
    crypto: ICryptoHash;
    constructor(services: IPlatformServices);
    authenticate(props: IRequestProps): Promise<IRequestProps>;
    private requestToken;
    createAuthCodeRequestUrl(scope: string, state: string): Promise<string>;
    redeemAuthCodeBody(authCode: string, codeVerifier?: string): IAuthCodeGrantTypeParams;
    redeemAuthCode(authCode: string, codeVerifier?: string): Promise<AuthToken>;
    getToken(): Promise<AuthToken>;
    isAuthenticated(): boolean;
    logout(): Promise<boolean>;
}
export {};
