import { IRequestProps, ITransport, SDKResponse } from './transport';
import { IApiSettings } from './apiSettings';
export interface IAuthSession {
    settings: IApiSettings;
    transport: ITransport;
    sudoId: string;
    isAuthenticated(): boolean;
    authenticate(props: IRequestProps): Promise<IRequestProps>;
    logout(): Promise<boolean>;
    getToken(): Promise<any>;
    isSudo(): boolean;
    login(sudoId?: string | number): Promise<any>;
    reset(): void;
}
export declare abstract class AuthSession implements IAuthSession {
    static TBD: string;
    settings: IApiSettings;
    sudoId: string;
    transport: ITransport;
    constructor(settings: IApiSettings, transport: ITransport);
    abstract authenticate(props: IRequestProps): Promise<IRequestProps>;
    abstract isAuthenticated(): boolean;
    abstract getToken(): Promise<any>;
    login(sudoId?: string | number): Promise<any>;
    logout(): Promise<boolean>;
    isSudo(): boolean;
    reset(): void;
    protected ok<TSuccess, TError>(promise: Promise<SDKResponse<TSuccess, TError>>): Promise<TSuccess>;
}
