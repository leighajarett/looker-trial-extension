"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiSettings = exports.ValueSettings = exports.configValue = exports.DefaultSettings = exports.strBadConfiguration = exports.ApiConfigMap = exports.strLookerClientSecret = exports.strLookerClientId = exports.strLookerTimeout = exports.strLookerVerifySsl = exports.strLookerBaseUrl = void 0;
const transport_1 = require("./transport");
const constants_1 = require("./constants");
exports.strLookerBaseUrl = `${constants_1.environmentPrefix}_BASE_URL`;
exports.strLookerVerifySsl = `${constants_1.environmentPrefix}_VERIFY_SSL`;
exports.strLookerTimeout = `${constants_1.environmentPrefix}_TIMEOUT`;
exports.strLookerClientId = `${constants_1.environmentPrefix}_CLIENT_ID`;
exports.strLookerClientSecret = `${constants_1.environmentPrefix}_CLIENT_SECRET`;
exports.ApiConfigMap = {
    base_url: exports.strLookerBaseUrl,
    client_id: exports.strLookerClientId,
    client_secret: exports.strLookerClientSecret,
    timeout: exports.strLookerTimeout,
    verify_ssl: exports.strLookerVerifySsl,
};
exports.strBadConfiguration = `${transport_1.agentPrefix} configuration error:
Missing required configuration values like base_url
`;
exports.DefaultSettings = () => ({
    agentTag: `${transport_1.agentPrefix} ${constants_1.lookerVersion}`,
    base_url: '',
    timeout: transport_1.defaultTimeout,
    verify_ssl: true,
});
exports.configValue = (values, name) => {
    const val = values[exports.ApiConfigMap[name]] || values[name];
    return typeof val === 'string' ? constants_1.unquote(val) : val;
};
exports.ValueSettings = (values) => {
    const settings = exports.DefaultSettings();
    settings.base_url = exports.configValue(values, 'base_url') || settings.base_url;
    settings.verify_ssl = constants_1.boolDefault(exports.configValue(values, 'verify_ssl'), true);
    settings.agentTag = `${transport_1.agentPrefix} ${constants_1.lookerVersion}`;
    const timeout = exports.configValue(values, 'timeout');
    settings.timeout = timeout ? parseInt(timeout, 10) : transport_1.defaultTimeout;
    return settings;
};
class ApiSettings {
    constructor(settings) {
        this.base_url = '';
        this.verify_ssl = true;
        this.timeout = transport_1.defaultTimeout;
        this.agentTag = `${transport_1.agentPrefix} ${constants_1.lookerVersion}`;
        this.base_url =
            'base_url' in settings ? constants_1.unquote(settings.base_url) : this.base_url;
        this.verify_ssl =
            'verify_ssl' in settings
                ? constants_1.isTrue(constants_1.unquote(settings.verify_ssl.toString()))
                : this.verify_ssl;
        this.timeout =
            'timeout' in settings
                ? parseInt(constants_1.unquote(settings.timeout.toString()), 10)
                : this.timeout;
        if (!this.isConfigured()) {
            throw new Error(exports.strBadConfiguration);
        }
    }
    isConfigured() {
        return !!this.base_url;
    }
    readConfig(section) {
        return {};
    }
}
exports.ApiSettings = ApiSettings;
//# sourceMappingURL=apiSettings.js.map