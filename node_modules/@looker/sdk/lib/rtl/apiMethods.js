"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIMethods = void 0;
const transport_1 = require("./transport");
const constants_1 = require("./constants");
class APIMethods {
    constructor(authSession, apiVersion = constants_1.defaultApiVersion) {
        this.authSession = authSession;
        this.apiPath = '';
        this.apiVersion = constants_1.defaultApiVersion;
        this.authSession = authSession;
        this.apiVersion = apiVersion;
        this.authSession.settings.agentTag = `${transport_1.agentPrefix} ${constants_1.lookerVersion}.${this.apiVersion}`;
        this.apiPath =
            authSession.settings.base_url === ''
                ? ''
                : `${authSession.settings.base_url}/api/${this.apiVersion}`;
    }
    static create(type, authSession) {
        return new type(authSession);
    }
    async ok(promise) {
        return transport_1.sdkOk(promise);
    }
    makePath(path, options, authenticator) {
        const base = (authenticator ? this.apiPath : options.base_url);
        if (!path.match(/^(http:\/\/|https:\/\/)/gi)) {
            path = `${base}${path}`;
        }
        return path;
    }
    async authRequest(method, path, queryParams, body, options) {
        options = Object.assign(Object.assign({}, this.authSession.settings), options);
        const authenticator = (init) => {
            return this.authSession.authenticate(init);
        };
        path = this.makePath(path, options, authenticator);
        return this.authSession.transport.request(method, path, queryParams, body, authenticator, options);
    }
    async authStream(callback, method, path, queryParams, body, options) {
        options = Object.assign(Object.assign({}, this.authSession.settings), options);
        const authenticator = (init) => {
            return this.authSession.authenticate(init);
        };
        path = this.makePath(path, options, authenticator);
        return this.authSession.transport.stream(callback, method, path, queryParams, body, (init) => {
            return this.authSession.authenticate(init);
        }, options);
    }
    async get(path, queryParams, body, options) {
        return this.authRequest('GET', path, queryParams, body, options);
    }
    async head(path, queryParams, body, options) {
        return this.authRequest('HEAD', path, queryParams, body, options);
    }
    async delete(path, queryParams, body, options) {
        return this.authRequest('DELETE', path, queryParams, body, options);
    }
    async post(path, queryParams, body, options) {
        return this.authRequest('POST', path, queryParams, body, options);
    }
    async put(path, queryParams, body, options) {
        return this.authRequest('PUT', path, queryParams, body, options);
    }
    async patch(path, queryParams, body, options) {
        return this.authRequest('PATCH', path, queryParams, body, options);
    }
}
exports.APIMethods = APIMethods;
//# sourceMappingURL=apiMethods.js.map