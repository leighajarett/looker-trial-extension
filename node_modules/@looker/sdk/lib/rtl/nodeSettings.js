"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeSettingsIniFile = exports.NodeSettings = exports.ApiConfigSection = exports.ApiConfig = exports.getenv = void 0;
const fs = __importStar(require("fs"));
const ini = __importStar(require("ini"));
const apiSettings_1 = require("./apiSettings");
const constants_1 = require("./constants");
const transport_1 = require("./transport");
exports.getenv = (name, defaultValue = undefined) => {
    const val = process.env[name];
    return val === undefined ? defaultValue : val;
};
exports.ApiConfig = (contents) => ini.parse(contents);
exports.ApiConfigSection = (contents, section) => {
    const config = exports.ApiConfig(contents);
    if (!section) {
        section = Object.keys(config)[0];
    }
    const settings = config[section];
    if (!settings) {
        throw new Error(`No section named "${section}" was found`);
    }
    if (settings.api_version) {
        console.warn('api_version is no longer read from a configuration file by the SDK');
    }
    return settings;
};
const readEnvConfig = () => {
    const values = {};
    Object.keys(apiSettings_1.ApiConfigMap).forEach((key) => {
        const envKey = apiSettings_1.ApiConfigMap[key];
        if (process.env[envKey] !== undefined) {
            values[key] = constants_1.unquote(process.env[envKey]);
        }
    });
    return values;
};
const readIniConfig = (fileName, section) => {
    let config = readEnvConfig();
    if (fileName && fs.existsSync(fileName)) {
        config = Object.assign(Object.assign({}, exports.ApiConfigSection(fs.readFileSync(fileName, 'utf8'), section)), config);
    }
    Object.keys(config).forEach((key) => {
        const val = config[key];
        if (typeof val === 'string') {
            config[key] = constants_1.unquote(val);
        }
    });
    return config;
};
class NodeSettings extends apiSettings_1.ApiSettings {
    constructor(contents, section) {
        let settings;
        if (contents) {
            if (typeof contents === 'string') {
                settings = exports.ApiConfigSection(contents, section);
            }
            else {
                settings = contents;
            }
            settings = Object.assign(Object.assign({}, readEnvConfig()), settings);
        }
        else {
            settings = readEnvConfig();
        }
        super(Object.assign(Object.assign({}, apiSettings_1.DefaultSettings()), settings));
    }
    readConfig(section) {
        return readEnvConfig();
    }
}
exports.NodeSettings = NodeSettings;
class NodeSettingsIniFile extends NodeSettings {
    constructor(fileName = '', section) {
        if (fileName && !fs.existsSync(fileName)) {
            throw transport_1.sdkError({ message: `File ${fileName} was not found` });
        }
        fileName = fileName || './looker.ini';
        const settings = apiSettings_1.ValueSettings(readIniConfig(fileName, section));
        super(settings, section);
        this.fileName = fileName;
    }
    readConfig(section) {
        return readIniConfig(this.fileName, section);
    }
}
exports.NodeSettingsIniFile = NodeSettingsIniFile;
//# sourceMappingURL=nodeSettings.js.map