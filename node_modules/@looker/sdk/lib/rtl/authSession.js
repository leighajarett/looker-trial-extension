"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthSession = void 0;
const transport_1 = require("./transport");
let AuthSession = (() => {
    class AuthSession {
        constructor(settings, transport) {
            this.sudoId = '';
            this.settings = settings;
            this.transport = transport;
        }
        login(sudoId) {
            return Promise.reject(AuthSession.TBD);
        }
        logout() {
            return Promise.resolve(false);
        }
        isSudo() {
            return this.sudoId !== '' && this.isAuthenticated();
        }
        reset() {
            this.sudoId = '';
        }
        async ok(promise) {
            const result = await promise;
            if (result.ok) {
                return result.value;
            }
            else {
                if (result instanceof Buffer) {
                    throw transport_1.sdkError({ message: result.toString('utf8') });
                }
                else {
                    throw transport_1.sdkError(result);
                }
            }
        }
    }
    AuthSession.TBD = 'Method not implemented in AuthSession';
    return AuthSession;
})();
exports.AuthSession = AuthSession;
//# sourceMappingURL=authSession.js.map