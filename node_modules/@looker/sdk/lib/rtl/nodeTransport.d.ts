import rq, { Request } from 'request';
import rp from 'request-promise-native';
import { Readable } from 'readable-stream';
import { Authenticator, HttpMethod, ITransportSettings, SDKResponse, Values, IRawResponse } from './transport';
import { BaseTransport } from './baseTransport';
import { ICryptoHash } from './cryptoHash';
export declare class NodeCryptoHash implements ICryptoHash {
    secureRandom(byteCount: number): string;
    sha256Hash(message: string): Promise<string>;
}
export declare type RequestOptions = rq.RequiredUriUrl & rp.RequestPromiseOptions;
export declare class NodeTransport extends BaseTransport {
    protected readonly options: ITransportSettings;
    constructor(options: ITransportSettings);
    rawRequest(method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<IRawResponse>;
    request<TSuccess, TError>(method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<SDKResponse<TSuccess, TError>>;
    protected requestor(props: RequestOptions): Request;
    stream<TSuccess>(callback: (readable: Readable) => Promise<TSuccess>, method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<TSuccess>;
    verifySsl(options?: Partial<ITransportSettings>): boolean | undefined;
    timeout(options?: Partial<ITransportSettings>): number;
    private initRequest;
}
