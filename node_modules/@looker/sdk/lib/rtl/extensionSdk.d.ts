import { Readable } from 'readable-stream';
import { IApiSettings } from './apiSettings';
import { Authenticator, HttpMethod, IRawResponse, ITransportSettings, Values } from './transport';
import { APIMethods } from './apiMethods';
import { IAuthSession } from './authSession';
export interface IHostConnection {
    rawRequest(httpMethod: string, path: string, body?: any, params?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<IRawResponse>;
    request(httpMethod: string, path: string, body?: any, params?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<any>;
    stream<T>(callback: (readable: Readable) => Promise<T>, method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<T>;
}
export declare class LookerExtensionSDK {
    static createClient<T extends APIMethods>(hostConnection: IHostConnection, type?: new (authSession: IAuthSession) => T, settings?: IApiSettings): T;
}
