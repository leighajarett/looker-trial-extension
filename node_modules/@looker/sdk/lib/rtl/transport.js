"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkOk = exports.sdkError = exports.addQueryParams = exports.encodeParams = exports.encodeParam = exports.isUtf8 = exports.responseMode = exports.StatusCode = exports.defaultTimeout = exports.charsetUtf8Pattern = exports.contentPatternBinary = exports.contentPatternString = exports.ResponseMode = exports.trace = exports.LookerAppId = exports.agentPrefix = void 0;
const constants_1 = require("./constants");
exports.agentPrefix = 'TS-SDK';
exports.LookerAppId = 'x-looker-appid';
const tracing = false;
function trace(message, info) {
    if (tracing) {
        console.debug(message);
        if (info) {
            console.debug({ info });
        }
    }
}
exports.trace = trace;
var ResponseMode;
(function (ResponseMode) {
    ResponseMode[ResponseMode["binary"] = 0] = "binary";
    ResponseMode[ResponseMode["string"] = 1] = "string";
    ResponseMode[ResponseMode["unknown"] = 2] = "unknown";
})(ResponseMode = exports.ResponseMode || (exports.ResponseMode = {}));
exports.contentPatternString = new RegExp(constants_1.matchModeString, 'i');
exports.contentPatternBinary = new RegExp(constants_1.matchModeBinary, 'i');
exports.charsetUtf8Pattern = new RegExp(constants_1.matchCharsetUtf8, 'i');
exports.defaultTimeout = 120;
var StatusCode;
(function (StatusCode) {
    StatusCode[StatusCode["OK"] = 200] = "OK";
    StatusCode[StatusCode["Created"] = 201] = "Created";
    StatusCode[StatusCode["Accepted"] = 202] = "Accepted";
    StatusCode[StatusCode["NonAuthoritative"] = 203] = "NonAuthoritative";
    StatusCode[StatusCode["NoContent"] = 204] = "NoContent";
    StatusCode[StatusCode["ResetContent"] = 205] = "ResetContent";
    StatusCode[StatusCode["PartialContent"] = 206] = "PartialContent";
    StatusCode[StatusCode["MultiStatus"] = 207] = "MultiStatus";
    StatusCode[StatusCode["MultiStatusDav"] = 208] = "MultiStatusDav";
    StatusCode[StatusCode["IMUsed"] = 226] = "IMUsed";
    StatusCode[StatusCode["MultipleChoice"] = 300] = "MultipleChoice";
    StatusCode[StatusCode["MovedPermanently"] = 301] = "MovedPermanently";
    StatusCode[StatusCode["Found"] = 302] = "Found";
    StatusCode[StatusCode["SeeOther"] = 303] = "SeeOther";
    StatusCode[StatusCode["NotModified"] = 304] = "NotModified";
    StatusCode[StatusCode["UseProxy"] = 305] = "UseProxy";
    StatusCode[StatusCode["UnusedRedirect"] = 306] = "UnusedRedirect";
    StatusCode[StatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    StatusCode[StatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
    StatusCode[StatusCode["BadRequest"] = 400] = "BadRequest";
    StatusCode[StatusCode["Unauthorized"] = 401] = "Unauthorized";
    StatusCode[StatusCode["PaymentRequired"] = 402] = "PaymentRequired";
    StatusCode[StatusCode["Forbidden"] = 403] = "Forbidden";
    StatusCode[StatusCode["NotFound"] = 404] = "NotFound";
    StatusCode[StatusCode["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    StatusCode[StatusCode["NotAcceptable"] = 406] = "NotAcceptable";
    StatusCode[StatusCode["ProxyAuthRequired"] = 407] = "ProxyAuthRequired";
    StatusCode[StatusCode["RequestTimeout"] = 408] = "RequestTimeout";
    StatusCode[StatusCode["Conflict"] = 409] = "Conflict";
    StatusCode[StatusCode["Gone"] = 410] = "Gone";
    StatusCode[StatusCode["LengthRequired"] = 411] = "LengthRequired";
    StatusCode[StatusCode["PreconditionFailed"] = 412] = "PreconditionFailed";
    StatusCode[StatusCode["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    StatusCode[StatusCode["UriTooLong"] = 414] = "UriTooLong";
    StatusCode[StatusCode["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    StatusCode[StatusCode["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
    StatusCode[StatusCode["ExpectationFailed"] = 417] = "ExpectationFailed";
    StatusCode[StatusCode["ImATeapot"] = 418] = "ImATeapot";
    StatusCode[StatusCode["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    StatusCode[StatusCode["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    StatusCode[StatusCode["Locked"] = 423] = "Locked";
    StatusCode[StatusCode["FailedDependency"] = 424] = "FailedDependency";
    StatusCode[StatusCode["TooEarly"] = 425] = "TooEarly";
    StatusCode[StatusCode["UpgradeRequired"] = 426] = "UpgradeRequired";
    StatusCode[StatusCode["PreconditionRequired"] = 427] = "PreconditionRequired";
    StatusCode[StatusCode["TooManyRequests"] = 428] = "TooManyRequests";
    StatusCode[StatusCode["RequestHeaderFieldsTooLarge"] = 429] = "RequestHeaderFieldsTooLarge";
    StatusCode[StatusCode["UnavailableForLegalReasons"] = 430] = "UnavailableForLegalReasons";
    StatusCode[StatusCode["InternalServerError"] = 500] = "InternalServerError";
    StatusCode[StatusCode["NotImplemented"] = 501] = "NotImplemented";
    StatusCode[StatusCode["BadGateway"] = 502] = "BadGateway";
    StatusCode[StatusCode["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    StatusCode[StatusCode["GatewayTimeout"] = 504] = "GatewayTimeout";
    StatusCode[StatusCode["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
    StatusCode[StatusCode["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    StatusCode[StatusCode["InsufficientStorage"] = 507] = "InsufficientStorage";
    StatusCode[StatusCode["LoopDetected"] = 508] = "LoopDetected";
    StatusCode[StatusCode["NotExtended"] = 510] = "NotExtended";
    StatusCode[StatusCode["NetworkAuthRequired"] = 511] = "NetworkAuthRequired";
})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));
function responseMode(contentType) {
    if (contentType.match(exports.contentPatternString)) {
        return ResponseMode.string;
    }
    if (contentType.match(exports.contentPatternBinary)) {
        return ResponseMode.binary;
    }
    return ResponseMode.unknown;
}
exports.responseMode = responseMode;
function isUtf8(contentType) {
    return contentType.match(/;.*\bcharset\b=\butf-8\b/i);
}
exports.isUtf8 = isUtf8;
function encodeParam(value) {
    if (value instanceof Date) {
        value = value.toISOString();
    }
    let encoded = value.toString();
    try {
        const decoded = decodeURIComponent(value);
        if (value === decoded) {
            encoded = encodeURIComponent(value);
        }
    }
    catch (e) {
        if (e instanceof URIError) {
            encoded = encodeURIComponent(value);
        }
        else {
            throw e;
        }
    }
    return encoded;
}
exports.encodeParam = encodeParam;
function encodeParams(values) {
    if (!values)
        return '';
    const keys = Object.keys(values);
    const params = keys
        .filter((k) => values[k] !== undefined)
        .map((k) => k + '=' + encodeParam(values[k]))
        .join('&');
    return params;
}
exports.encodeParams = encodeParams;
function addQueryParams(path, obj) {
    if (!obj) {
        return path;
    }
    const qp = encodeParams(obj);
    return `${path}${qp ? '?' + qp : ''}`;
}
exports.addQueryParams = addQueryParams;
function sdkError(response) {
    if ('error' in response) {
        const error = response.error;
        if (typeof error === 'string') {
            return new Error(error);
        }
        if ('statusMessage' in error) {
            return new Error(error.statusMessage);
        }
        if ('error' in error && error.error instanceof Buffer) {
            const result = Buffer.from(error.error).toString('utf-8');
            return new Error(result);
        }
        if (error instanceof Buffer) {
            const result = Buffer.from(error).toString('utf-8');
            return new Error(result);
        }
        if ('message' in error) {
            return new Error(response.error.message.toString());
        }
    }
    if ('message' in response) {
        return new Error(response.message);
    }
    const error = JSON.stringify(response);
    return new Error(`Unknown error with SDK method ${error}`);
}
exports.sdkError = sdkError;
async function sdkOk(promise) {
    const result = await promise;
    if (result.ok) {
        return result.value;
    }
    else {
        throw sdkError(result);
    }
}
exports.sdkOk = sdkOk;
//# sourceMappingURL=transport.js.map