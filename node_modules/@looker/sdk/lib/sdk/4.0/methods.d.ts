import { APIMethods } from '../../rtl/apiMethods';
import { IAuthSession } from '../../rtl/authSession';
import { ITransportSettings } from '../../rtl/transport';
import { DelimArray } from '../../rtl/delimArray';
import { Looker40SDKStream } from './streams';
import { IDictionary, IAccessToken, IApiSession, IApiVersion, IBackupConfiguration, IBoard, IBoardItem, IBoardSection, IColorCollection, IContentFavorite, IContentMeta, IContentMetaGroupUser, IContentValidation, IContentView, ICreateFolder, ICredentialsApi3, ICredentialsEmail, ICredentialsEmbed, ICredentialsGoogle, ICredentialsLDAP, ICredentialsLookerOpenid, ICredentialsOIDC, ICredentialsSaml, ICredentialsTotp, ICustomWelcomeEmail, IDashboard, IDashboardBase, IDashboardElement, IDashboardFilter, IDashboardLayout, IDashboardLayoutComponent, IDashboardLookml, IDataActionForm, IDataActionRequest, IDataActionResponse, IDatagroup, IDBConnection, IDBConnectionTestResult, IDialectInfo, IDigestEmails, IDigestEmailSend, IEmbedParams, IEmbedSsoParams, IEmbedUrlResponse, IError, IFolder, IGitBranch, IGitConnectionTest, IGitConnectionTestResult, IGroup, IGroupIdForGroupInclusion, IGroupIdForGroupUserInclusion, IIntegration, IIntegrationHub, IIntegrationTestResult, IInternalHelpResources, IInternalHelpResourcesContent, ILDAPConfig, ILDAPConfigTestResult, ILegacyFeature, ILocale, ILook, ILookmlModel, ILookmlModelExplore, ILookmlTest, ILookmlTestResult, ILookWithQuery, IManifest, IMergeQuery, IModelSet, IOIDCConfig, IPasswordConfig, IPermission, IPermissionSet, IProject, IProjectFile, IProjectValidation, IProjectValidationCache, IProjectWorkspace, IQuery, IQueryTask, IRenderTask, IRepositoryCredential, IRequestActiveThemes, IRequestAllBoardItems, IRequestAllBoardSections, IRequestAllGroups, IRequestAllGroupUsers, IRequestAllIntegrations, IRequestAllRoles, IRequestAllScheduledPlans, IRequestAllUsers, IRequestCreateDashboardRenderTask, IRequestCreateQueryTask, IRequestCreateUserCredentialsEmailPasswordReset, IRequestFolderChildren, IRequestFolderChildrenSearch, IRequestLogin, IRequestRoleUsers, IRequestRunInlineQuery, IRequestRunLook, IRequestRunLookmlTest, IRequestRunQuery, IRequestScheduledPlansForDashboard, IRequestScheduledPlansForLook, IRequestScheduledPlansForLookmlDashboard, IRequestSearchBoards, IRequestSearchContentFavorites, IRequestSearchContentViews, IRequestSearchDashboardElements, IRequestSearchDashboards, IRequestSearchFolders, IRequestSearchGroups, IRequestSearchLooks, IRequestSearchModelSets, IRequestSearchRoles, IRequestSearchThemes, IRequestSearchUserLoginLockouts, IRequestSearchUsers, IRequestSearchUsersNames, IRequestUserAttributeUserValues, IRequestUserRoles, IRole, IRunningQueries, ISamlConfig, ISamlMetadataParseResult, IScheduledPlan, ISession, ISessionConfig, ISqlQuery, ISqlQueryCreate, ITheme, ITimezone, IUpdateFolder, IUser, IUserAttribute, IUserAttributeGroupValue, IUserAttributeWithValue, IUserLoginLockout, IValidationError, IWelcomeEmailTest, IWhitelabelConfiguration, IWorkspace, IWriteApiSession, IWriteBackupConfiguration, IWriteBoard, IWriteBoardItem, IWriteBoardSection, IWriteColorCollection, IWriteContentFavorite, IWriteContentMeta, IWriteCreateDashboardFilter, IWriteCredentialsEmail, IWriteCustomWelcomeEmail, IWriteDashboard, IWriteDashboardElement, IWriteDashboardFilter, IWriteDashboardLayout, IWriteDashboardLayoutComponent, IWriteDatagroup, IWriteDBConnection, IWriteGitBranch, IWriteGroup, IWriteIntegration, IWriteIntegrationHub, IWriteInternalHelpResources, IWriteInternalHelpResourcesContent, IWriteLDAPConfig, IWriteLegacyFeature, IWriteLookmlModel, IWriteLookWithQuery, IWriteMergeQuery, IWriteModelSet, IWriteOIDCConfig, IWritePasswordConfig, IWritePermissionSet, IWriteProject, IWriteQuery, IWriteRepositoryCredential, IWriteRole, IWriteSamlConfig, IWriteScheduledPlan, IWriteSessionConfig, IWriteTheme, IWriteUser, IWriteUserAttribute, IWriteUserAttributeWithValue, IWriteWhitelabelConfiguration } from './models';
export declare class Looker40SDK extends APIMethods {
    stream: Looker40SDKStream;
    constructor(authSession: IAuthSession);
    accept_integration_hub_legal_agreement(integration_hub_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationHub, IValidationError | IError>>;
    active_themes(request: IRequestActiveThemes, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme[], IError>>;
    add_group_group(group_id: number, body: Partial<IGroupIdForGroupInclusion>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup, IError>>;
    add_group_user(group_id: number, body: Partial<IGroupIdForGroupUserInclusion>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IError>>;
    all_board_items(request: IRequestAllBoardItems, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardItem[], IError>>;
    all_board_sections(request: IRequestAllBoardSections, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardSection[], IError>>;
    all_boards(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoard[], IError>>;
    all_color_collections(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection[], IError>>;
    all_connections(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnection[], IError>>;
    all_content_metadata_accesses(content_metadata_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMetaGroupUser[], IError>>;
    all_content_metadatas(parent_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMeta[], IError>>;
    all_dashboards(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardBase[], IError>>;
    all_datagroups(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDatagroup[], IError>>;
    all_dialect_infos(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDialectInfo[], IError>>;
    all_folders(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder[], IError>>;
    all_git_branches(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitBranch[], IError>>;
    all_git_connection_tests(project_id: string, remote_url?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitConnectionTest[], IError>>;
    all_group_groups(group_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup[], IError>>;
    all_group_users(request: IRequestAllGroupUsers, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IError>>;
    all_groups(request: IRequestAllGroups, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup[], IError>>;
    all_integration_hubs(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationHub[], IError>>;
    all_integrations(request: IRequestAllIntegrations, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegration[], IError>>;
    all_legacy_features(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILegacyFeature[], IError>>;
    all_locales(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILocale[], IError>>;
    all_lookml_models(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlModel[], IError>>;
    all_lookml_tests(project_id: string, file_id?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlTest[], IError>>;
    all_looks(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILook[], IError>>;
    all_model_sets(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IModelSet[], IError>>;
    all_permission_sets(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermissionSet[], IError>>;
    all_permissions(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermission[], IError>>;
    all_project_files(project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProjectFile[], IError>>;
    all_projects(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProject[], IError>>;
    all_roles(request: IRequestAllRoles, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole[], IError>>;
    all_running_queries(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRunningQueries[], IError>>;
    all_scheduled_plans(request: IRequestAllScheduledPlans, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan[], IValidationError | IError>>;
    all_themes(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme[], IError>>;
    all_timezones(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITimezone[], IError>>;
    all_user_attribute_group_values(user_attribute_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttributeGroupValue[], IError>>;
    all_user_attributes(request: IRequestAllBoardSections, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttribute[], IError>>;
    all_user_credentials_api3s(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsApi3[], IError>>;
    all_user_credentials_embeds(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmbed[], IError>>;
    all_user_login_lockouts(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserLoginLockout[], IError>>;
    all_user_sessions(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISession[], IError>>;
    all_users(request: IRequestAllUsers, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IError>>;
    all_workspaces(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IWorkspace[], IError>>;
    board(board_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoard, IError>>;
    board_item(board_item_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardItem, IError>>;
    board_section(board_section_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardSection, IError>>;
    cloud_storage_configuration(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBackupConfiguration, IError>>;
    color_collection(collection_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection, IError>>;
    color_collections_custom(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection[], IError>>;
    color_collections_standard(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection[], IError>>;
    connection(connection_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnection, IError>>;
    content_favorite(content_favorite_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentFavorite, IError>>;
    content_metadata(content_metadata_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMeta, IError>>;
    content_validation(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentValidation, IValidationError | IError>>;
    create_board(body: Partial<IWriteBoard>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoard, IValidationError | IError>>;
    create_board_item(body: Partial<IWriteBoardItem>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardItem, IValidationError | IError>>;
    create_board_section(body: Partial<IWriteBoardSection>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardSection, IValidationError | IError>>;
    create_color_collection(body: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection, IValidationError | IError>>;
    create_connection(body: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnection, IValidationError | IError>>;
    create_content_favorite(body: Partial<IWriteContentFavorite>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentFavorite, IValidationError | IError>>;
    create_content_metadata_access(body: Partial<IContentMetaGroupUser>, send_boards_notification_email?: boolean, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMetaGroupUser, IValidationError | IError>>;
    create_dashboard(body: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard, IValidationError | IError>>;
    create_dashboard_element(body: Partial<IWriteDashboardElement>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardElement, IValidationError | IError>>;
    create_dashboard_filter(body: Partial<IWriteCreateDashboardFilter>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardFilter, IValidationError | IError>>;
    create_dashboard_layout(body: Partial<IWriteDashboardLayout>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayout, IValidationError | IError>>;
    create_dashboard_render_task(request: IRequestCreateDashboardRenderTask, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRenderTask, IValidationError | IError>>;
    create_digest_email_send(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDigestEmailSend, IError>>;
    create_embed_url_as_me(body: Partial<IEmbedParams>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IEmbedUrlResponse, IValidationError | IError>>;
    create_folder(body: Partial<ICreateFolder>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder, IValidationError | IError>>;
    create_git_branch(project_id: string, body: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitBranch, IValidationError | IError>>;
    create_git_deploy_key(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    create_group(body: Partial<IWriteGroup>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup, IValidationError | IError>>;
    create_integration_hub(body: Partial<IWriteIntegrationHub>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationHub, IValidationError | IError>>;
    create_look(body: Partial<IWriteLookWithQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookWithQuery, IValidationError | IError>>;
    create_look_render_task(look_id: number, result_format: string, width: number, height: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRenderTask, IValidationError | IError>>;
    create_lookml_model(body: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlModel, IValidationError | IError>>;
    create_merge_query(body?: Partial<IWriteMergeQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IMergeQuery, IValidationError | IError>>;
    create_model_set(body: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IModelSet, IValidationError | IError>>;
    create_oidc_test_config(body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IOIDCConfig, IValidationError | IError>>;
    create_permission_set(body: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermissionSet, IValidationError | IError>>;
    create_project(body: Partial<IWriteProject>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProject, IValidationError | IError>>;
    create_query(body: Partial<IWriteQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IQuery, IValidationError | IError>>;
    create_query_render_task(query_id: number, result_format: string, width: number, height: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRenderTask, IValidationError | IError>>;
    create_query_task(request: IRequestCreateQueryTask, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IQueryTask, IValidationError | IError>>;
    create_role(body: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole, IValidationError | IError>>;
    create_saml_test_config(body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlConfig, IValidationError | IError>>;
    create_scheduled_plan(body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan, IValidationError | IError>>;
    create_sql_query(body: Partial<ISqlQueryCreate>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISqlQuery, IError>>;
    create_sso_embed_url(body: Partial<IEmbedSsoParams>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IEmbedUrlResponse, IValidationError | IError>>;
    create_theme(body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IValidationError | IError>>;
    create_user(body?: Partial<IWriteUser>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IValidationError | IError>>;
    create_user_attribute(body: Partial<IWriteUserAttribute>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttribute, IValidationError | IError>>;
    create_user_credentials_api3(user_id: number, body?: Partial<ICredentialsApi3>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsApi3, IValidationError | IError>>;
    create_user_credentials_email(user_id: number, body: Partial<IWriteCredentialsEmail>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmail, IValidationError | IError>>;
    create_user_credentials_email_password_reset(request: IRequestCreateUserCredentialsEmailPasswordReset, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmail, IError>>;
    create_user_credentials_totp(user_id: number, body?: Partial<ICredentialsTotp>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsTotp, IValidationError | IError>>;
    custom_welcome_email(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICustomWelcomeEmail, IError>>;
    dashboard(dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard, IError>>;
    dashboard_dashboard_elements(dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardElement[], IError>>;
    dashboard_dashboard_filters(dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardFilter[], IError>>;
    dashboard_dashboard_layouts(dashboard_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayout[], IError>>;
    dashboard_element(dashboard_element_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardElement, IError>>;
    dashboard_filter(dashboard_filter_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardFilter, IError>>;
    dashboard_layout(dashboard_layout_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayout, IError>>;
    dashboard_layout_component(dashboard_layout_component_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayoutComponent, IError>>;
    dashboard_layout_dashboard_layout_components(dashboard_layout_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayoutComponent[], IError>>;
    dashboard_lookml(dashboard_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLookml, IError>>;
    datagroup(datagroup_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDatagroup, IError>>;
    default_color_collection(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection, IError>>;
    default_theme(ts?: Date, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IError>>;
    delete_board(board_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_board_item(board_item_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_board_section(board_section_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_color_collection(collection_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_connection(connection_name: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_connection_override(connection_name: string, override_context: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    delete_content_favorite(content_favorite_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_content_metadata_access(content_metadata_access_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_dashboard(dashboard_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_dashboard_element(dashboard_element_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_dashboard_filter(dashboard_filter_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_dashboard_layout(dashboard_layout_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    delete_folder(folder_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_git_branch(project_id: string, branch_name: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_group(group_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_group_from_group(group_id: number, deleting_group_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<void, IError>>;
    delete_group_user(group_id: number, user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<void, IError>>;
    delete_integration_hub(integration_hub_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_look(look_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_lookml_model(lookml_model_name: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_model_set(model_set_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_oidc_test_config(test_slug: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_permission_set(permission_set_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_repository_credential(root_project_id: string, credential_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_role(role_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_saml_test_config(test_slug: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_scheduled_plan(scheduled_plan_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_theme(theme_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_attribute(user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_attribute_group_value(group_id: number, user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<void, IError>>;
    delete_user_attribute_user_value(user_id: number, user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<void, IError>>;
    delete_user_credentials_api3(user_id: number, credentials_api3_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_email(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_embed(user_id: number, credentials_embed_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_google(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_ldap(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_looker_openid(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_oidc(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_saml(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_credentials_totp(user_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_login_lockout(key: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    delete_user_session(user_id: number, session_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    deploy_to_production(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    digest_emails_enabled(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDigestEmails, IError>>;
    fetch_and_parse_saml_idp_metadata(body: Partial<string>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlMetadataParseResult, IError>>;
    fetch_integration_form(integration_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDataActionForm, IValidationError | IError>>;
    fetch_remote_data_action_form(body: Partial<IDictionary<string>>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDataActionForm, IValidationError | IError>>;
    find_git_branch(project_id: string, branch_name: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitBranch, IError>>;
    folder(folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder, IError>>;
    folder_ancestors(folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder[], IError>>;
    folder_children(request: IRequestFolderChildren, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder[], IError>>;
    folder_children_search(request: IRequestFolderChildrenSearch, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder[], IError>>;
    folder_dashboards(folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard[], IError>>;
    folder_looks(folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookWithQuery[], IError>>;
    folder_parent(folder_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder, IError>>;
    force_password_reset_at_next_login_for_all_users(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    get_all_repository_credentials(root_project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRepositoryCredential[], IError>>;
    git_branch(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitBranch, IError>>;
    git_deploy_key(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    group(group_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup, IError>>;
    import_lookml_dashboard(lookml_dashboard_id: string, space_id: string, body?: Partial<IWriteDashboard>, raw_locale?: boolean, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard, IValidationError | IError>>;
    integration(integration_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegration, IError>>;
    integration_hub(integration_hub_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationHub, IError>>;
    internal_help_resources(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IInternalHelpResources, IError>>;
    internal_help_resources_content(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IInternalHelpResourcesContent, IError>>;
    kill_query(query_task_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    ldap_config(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfig, IError>>;
    legacy_feature(legacy_feature_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILegacyFeature, IError>>;
    login(request: IRequestLogin, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IAccessToken, IError>>;
    login_user(user_id: number, associative?: boolean, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IAccessToken, IError>>;
    logout(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    look(look_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookWithQuery, IError>>;
    lookml_model(lookml_model_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlModel, IError>>;
    lookml_model_explore(lookml_model_name: string, explore_name: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlModelExplore, IError>>;
    manifest(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IManifest, IError>>;
    me(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IError>>;
    merge_query(merge_query_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IMergeQuery, IError>>;
    model_set(model_set_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IModelSet, IError>>;
    oidc_config(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IOIDCConfig, IError>>;
    oidc_test_config(test_slug: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IOIDCConfig, IError>>;
    parse_saml_idp_metadata(body: Partial<string>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlMetadataParseResult, IError>>;
    password_config(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPasswordConfig, IError>>;
    perform_data_action(body: Partial<IDataActionRequest>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDataActionResponse, IError>>;
    permission_set(permission_set_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermissionSet, IError>>;
    project(project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProject, IError>>;
    project_file(project_id: string, file_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProjectFile, IError>>;
    project_validation_results(project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProjectValidationCache, IError>>;
    project_workspace(project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProjectWorkspace, IError>>;
    query(query_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IQuery, IError>>;
    query_for_slug(slug: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IQuery, IError>>;
    query_task(query_task_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IQueryTask, IError>>;
    query_task_multi_results(query_task_ids: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDictionary<string>, IError>>;
    query_task_results(query_task_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    render_task(render_task_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRenderTask, IError>>;
    render_task_results(render_task_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    reset_project_to_production(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    reset_project_to_remote(project_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    role(role_id: number, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole, IError>>;
    role_groups(role_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup[], IError>>;
    role_users(request: IRequestRoleUsers, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IError>>;
    run_git_connection_test(project_id: string, test_id: string, remote_url?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitConnectionTestResult, IValidationError | IError>>;
    run_inline_query(request: IRequestRunInlineQuery, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    run_look(request: IRequestRunLook, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    run_lookml_test(request: IRequestRunLookmlTest, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlTestResult[], IValidationError | IError>>;
    run_query(request: IRequestRunQuery, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    run_sql_query(slug: string, result_format: string, download?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    run_url_encoded_query(model_name: string, view_name: string, result_format: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IValidationError | IError>>;
    saml_config(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlConfig, IError>>;
    saml_test_config(test_slug: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlConfig, IError>>;
    scheduled_plan(scheduled_plan_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan, IError>>;
    scheduled_plan_run_once(body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan, IError>>;
    scheduled_plan_run_once_by_id(scheduled_plan_id: number, body?: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan, IValidationError | IError>>;
    scheduled_plans_for_dashboard(request: IRequestScheduledPlansForDashboard, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan[], IError>>;
    scheduled_plans_for_look(request: IRequestScheduledPlansForLook, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan[], IError>>;
    scheduled_plans_for_lookml_dashboard(request: IRequestScheduledPlansForLookmlDashboard, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan[], IError>>;
    scheduled_plans_for_space(space_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan[], IError>>;
    search_boards(request: IRequestSearchBoards, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoard[], IError>>;
    search_content_favorites(request: IRequestSearchContentFavorites, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentFavorite[], IError>>;
    search_content_views(request: IRequestSearchContentViews, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentView[], IError>>;
    search_dashboard_elements(request: IRequestSearchDashboardElements, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardElement[], IError>>;
    search_dashboards(request: IRequestSearchDashboards, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard[], IError>>;
    search_folders(request: IRequestSearchFolders, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder[], IError>>;
    search_groups(request: IRequestSearchGroups, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup[], IError>>;
    search_looks(request: IRequestSearchLooks, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILook[], IError>>;
    search_model_sets(request: IRequestSearchModelSets, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IModelSet[], IError>>;
    search_permission_sets(request: IRequestSearchModelSets, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermissionSet[], IError>>;
    search_roles(request: IRequestSearchRoles, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole[], IError>>;
    search_themes(request: IRequestSearchThemes, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme[], IError>>;
    search_user_login_lockouts(request: IRequestSearchUserLoginLockouts, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserLoginLockout[], IError>>;
    search_users(request: IRequestSearchUsers, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IError>>;
    search_users_names(request: IRequestSearchUsersNames, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IError>>;
    session(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IApiSession, IError>>;
    session_config(options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISessionConfig, IError>>;
    set_default_color_collection(collection_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection, IValidationError | IError>>;
    set_default_theme(name: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IValidationError | IError>>;
    set_role_groups(role_id: number, body: Partial<number[]>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup[], IValidationError | IError>>;
    set_role_users(role_id: number, body: Partial<number[]>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser[], IValidationError | IError>>;
    set_user_attribute_group_values(user_attribute_id: number, body: Partial<IUserAttributeGroupValue[]>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttributeGroupValue[], IValidationError | IError>>;
    set_user_attribute_user_value(user_id: number, user_attribute_id: number, body: Partial<IWriteUserAttributeWithValue>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttributeWithValue, IValidationError | IError>>;
    set_user_roles(user_id: number, body: Partial<number[]>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole[], IError>>;
    sql_query(slug: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISqlQuery, IError>>;
    sync_lookml_dashboard(lookml_dashboard_id: string, body: Partial<IWriteDashboard>, raw_locale?: boolean, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<number[], IValidationError | IError>>;
    test_connection(connection_name: string, tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnectionTestResult[], IError>>;
    test_connection_config(body: Partial<IWriteDBConnection>, tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnectionTestResult[], IError>>;
    test_integration(integration_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationTestResult, IValidationError | IError>>;
    test_ldap_config_auth(body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfigTestResult, IValidationError | IError>>;
    test_ldap_config_connection(body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfigTestResult, IValidationError | IError>>;
    test_ldap_config_user_auth(body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfigTestResult, IValidationError | IError>>;
    test_ldap_config_user_info(body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfigTestResult, IValidationError | IError>>;
    theme(theme_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IError>>;
    theme_or_default(name: string, ts?: Date, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IError>>;
    update_board(board_id: number, body: Partial<IWriteBoard>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoard, IValidationError | IError>>;
    update_board_item(board_item_id: number, body: Partial<IWriteBoardItem>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardItem, IValidationError | IError>>;
    update_board_section(board_section_id: number, body: Partial<IWriteBoardSection>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBoardSection, IValidationError | IError>>;
    update_cloud_storage_configuration(body: Partial<IWriteBackupConfiguration>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IBackupConfiguration, IValidationError | IError>>;
    update_color_collection(collection_id: string, body: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IColorCollection, IValidationError | IError>>;
    update_connection(connection_name: string, body: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDBConnection, IValidationError | IError>>;
    update_content_metadata(content_metadata_id: number, body: Partial<IWriteContentMeta>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMeta, IValidationError | IError>>;
    update_content_metadata_access(content_metadata_access_id: string, body: Partial<IContentMetaGroupUser>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IContentMetaGroupUser, IValidationError | IError>>;
    update_custom_welcome_email(body: Partial<IWriteCustomWelcomeEmail>, send_test_welcome_email?: boolean, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICustomWelcomeEmail, IValidationError | IError>>;
    update_custom_welcome_email_test(body: Partial<IWelcomeEmailTest>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IWelcomeEmailTest, IValidationError | IError>>;
    update_dashboard(dashboard_id: string, body: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboard, IValidationError | IError>>;
    update_dashboard_element(dashboard_element_id: string, body: Partial<IWriteDashboardElement>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardElement, IValidationError | IError>>;
    update_dashboard_filter(dashboard_filter_id: string, body: Partial<IWriteDashboardFilter>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardFilter, IValidationError | IError>>;
    update_dashboard_layout(dashboard_layout_id: string, body: Partial<IWriteDashboardLayout>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayout, IValidationError | IError>>;
    update_dashboard_layout_component(dashboard_layout_component_id: string, body: Partial<IWriteDashboardLayoutComponent>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDashboardLayoutComponent, IValidationError | IError>>;
    update_datagroup(datagroup_id: number, body: Partial<IWriteDatagroup>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDatagroup, IValidationError | IError>>;
    update_digest_emails_enabled(body: Partial<IDigestEmails>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IDigestEmails, IValidationError | IError>>;
    update_folder(folder_id: string, body: Partial<IUpdateFolder>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IFolder, IValidationError | IError>>;
    update_git_branch(project_id: string, body: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGitBranch, IValidationError | IError>>;
    update_group(group_id: number, body: Partial<IWriteGroup>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IGroup, IValidationError | IError>>;
    update_integration(integration_id: string, body: Partial<IWriteIntegration>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegration, IValidationError | IError>>;
    update_integration_hub(integration_hub_id: number, body: Partial<IWriteIntegrationHub>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IIntegrationHub, IValidationError | IError>>;
    update_internal_help_resources(body: Partial<IWriteInternalHelpResources>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IInternalHelpResources, IValidationError | IError>>;
    update_internal_help_resources_content(body: Partial<IWriteInternalHelpResourcesContent>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IInternalHelpResourcesContent, IValidationError | IError>>;
    update_ldap_config(body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILDAPConfig, IValidationError | IError>>;
    update_legacy_feature(legacy_feature_id: string, body: Partial<IWriteLegacyFeature>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILegacyFeature, IValidationError | IError>>;
    update_look(look_id: number, body: Partial<IWriteLookWithQuery>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookWithQuery, IValidationError | IError>>;
    update_lookml_model(lookml_model_name: string, body: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ILookmlModel, IValidationError | IError>>;
    update_model_set(model_set_id: number, body: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IModelSet, IValidationError | IError>>;
    update_oidc_config(body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IOIDCConfig, IValidationError | IError>>;
    update_password_config(body: Partial<IWritePasswordConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPasswordConfig, IValidationError | IError>>;
    update_permission_set(permission_set_id: number, body: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IPermissionSet, IValidationError | IError>>;
    update_project(project_id: string, body: Partial<IWriteProject>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProject, IValidationError | IError>>;
    update_repository_credential(root_project_id: string, credential_id: string, body: Partial<IWriteRepositoryCredential>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRepositoryCredential, IValidationError | IError>>;
    update_role(role_id: number, body: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole, IValidationError | IError>>;
    update_saml_config(body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISamlConfig, IValidationError | IError>>;
    update_scheduled_plan(scheduled_plan_id: number, body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IScheduledPlan, IValidationError | IError>>;
    update_session(body: Partial<IWriteApiSession>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IApiSession, IValidationError | IError>>;
    update_session_config(body: Partial<IWriteSessionConfig>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISessionConfig, IValidationError | IError>>;
    update_theme(theme_id: number, body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ITheme, IValidationError | IError>>;
    update_user(user_id: number, body: Partial<IWriteUser>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IValidationError | IError>>;
    update_user_attribute(user_attribute_id: number, body: Partial<IWriteUserAttribute>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttribute, IValidationError | IError>>;
    update_user_attribute_group_value(group_id: number, user_attribute_id: number, body: Partial<IUserAttributeGroupValue>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttributeGroupValue, IValidationError | IError>>;
    update_user_credentials_email(user_id: number, body: Partial<IWriteCredentialsEmail>, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmail, IValidationError | IError>>;
    update_whitelabel_configuration(body: Partial<IWriteWhitelabelConfiguration>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IWhitelabelConfiguration, IValidationError | IError>>;
    user(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IError>>;
    user_attribute(user_attribute_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttribute, IError>>;
    user_attribute_user_values(request: IRequestUserAttributeUserValues, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUserAttributeWithValue[], IError>>;
    user_credentials_api3(user_id: number, credentials_api3_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsApi3, IError>>;
    user_credentials_email(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmail, IError>>;
    user_credentials_embed(user_id: number, credentials_embed_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsEmbed, IError>>;
    user_credentials_google(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsGoogle, IError>>;
    user_credentials_ldap(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsLDAP, IError>>;
    user_credentials_looker_openid(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsLookerOpenid, IError>>;
    user_credentials_oidc(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsOIDC, IError>>;
    user_credentials_saml(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsSaml, IError>>;
    user_credentials_totp(user_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ICredentialsTotp, IError>>;
    user_for_credential(credential_type: string, credential_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IUser, IError>>;
    user_roles(request: IRequestUserRoles, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IRole[], IError>>;
    user_session(user_id: number, session_id: number, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<ISession, IError>>;
    validate_project(project_id: string, fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IProjectValidation, IValidationError | IError>>;
    validate_theme(body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IValidationError, IValidationError | IError>>;
    vector_thumbnail(type: string, resource_id: string, reload?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<string, IError>>;
    versions(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IApiVersion, IError>>;
    whitelabel_configuration(fields?: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IWhitelabelConfiguration, IError>>;
    workspace(workspace_id: string, options?: Partial<ITransportSettings>): Promise<import("../../rtl/transport").SDKResponse<IWorkspace, IError>>;
}
