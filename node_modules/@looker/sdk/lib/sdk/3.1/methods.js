"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Looker31SDK = void 0;
const apiMethods_1 = require("../../rtl/apiMethods");
const transport_1 = require("../../rtl/transport");
const streams_1 = require("./streams");
class Looker31SDK extends apiMethods_1.APIMethods {
    constructor(authSession) {
        super(authSession, '3.1');
        this.stream = new streams_1.Looker31SDKStream(authSession);
    }
    async accept_integration_hub_legal_agreement(integration_hub_id, options) {
        return this.post(`/integration_hubs/${integration_hub_id}/accept_legal_agreement`, null, null, options);
    }
    async active_themes(request, options) {
        return this.get('/themes/active', { name: request.name, ts: request.ts, fields: request.fields }, null, options);
    }
    async add_group_group(group_id, body, options) {
        return this.post(`/groups/${group_id}/groups`, null, body, options);
    }
    async add_group_user(group_id, body, options) {
        return this.post(`/groups/${group_id}/users`, null, body, options);
    }
    async all_color_collections(fields, options) {
        return this.get('/color_collections', { fields }, null, options);
    }
    async all_connections(fields, options) {
        return this.get('/connections', { fields }, null, options);
    }
    async all_content_metadata_accesses(content_metadata_id, fields, options) {
        return this.get('/content_metadata_access', { content_metadata_id, fields }, null, options);
    }
    async all_content_metadatas(parent_id, fields, options) {
        return this.get('/content_metadata', { parent_id, fields }, null, options);
    }
    async all_dashboards(fields, options) {
        return this.get('/dashboards', { fields }, null, options);
    }
    async all_datagroups(options) {
        return this.get('/datagroups', null, null, options);
    }
    async all_dialect_infos(fields, options) {
        return this.get('/dialect_info', { fields }, null, options);
    }
    async all_folders(fields, options) {
        return this.get('/folders', { fields }, null, options);
    }
    async all_git_branches(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/git_branches`, null, null, options);
    }
    async all_git_connection_tests(project_id, remote_url, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/git_connection_tests`, { remote_url }, null, options);
    }
    async all_group_groups(group_id, fields, options) {
        return this.get(`/groups/${group_id}/groups`, { fields }, null, options);
    }
    async all_group_users(request, options) {
        return this.get(`/groups/${request.group_id}/users`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async all_groups(request, options) {
        return this.get('/groups', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            ids: request.ids,
            content_metadata_id: request.content_metadata_id,
            can_add_to_content_metadata: request.can_add_to_content_metadata,
        }, null, options);
    }
    async all_homepage_items(request, options) {
        return this.get('/homepage_items', {
            fields: request.fields,
            sorts: request.sorts,
            homepage_section_id: request.homepage_section_id,
        }, null, options);
    }
    async all_homepage_sections(request, options) {
        return this.get('/homepage_sections', { fields: request.fields, sorts: request.sorts }, null, options);
    }
    async all_homepages(fields, options) {
        return this.get('/homepages', { fields }, null, options);
    }
    async all_integration_hubs(fields, options) {
        return this.get('/integration_hubs', { fields }, null, options);
    }
    async all_integrations(request, options) {
        return this.get('/integrations', {
            fields: request.fields,
            integration_hub_id: request.integration_hub_id,
        }, null, options);
    }
    async all_legacy_features(options) {
        return this.get('/legacy_features', null, null, options);
    }
    async all_locales(options) {
        return this.get('/locales', null, null, options);
    }
    async all_lookml_models(fields, options) {
        return this.get('/lookml_models', { fields }, null, options);
    }
    async all_lookml_tests(project_id, file_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/lookml_tests`, { file_id }, null, options);
    }
    async all_looks(fields, options) {
        return this.get('/looks', { fields }, null, options);
    }
    async all_model_sets(fields, options) {
        return this.get('/model_sets', { fields }, null, options);
    }
    async all_permission_sets(fields, options) {
        return this.get('/permission_sets', { fields }, null, options);
    }
    async all_permissions(options) {
        return this.get('/permissions', null, null, options);
    }
    async all_project_files(project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/files`, { fields }, null, options);
    }
    async all_projects(fields, options) {
        return this.get('/projects', { fields }, null, options);
    }
    async all_roles(request, options) {
        return this.get('/roles', { fields: request.fields, ids: request.ids }, null, options);
    }
    async all_running_queries(options) {
        return this.get('/running_queries', null, null, options);
    }
    async all_scheduled_plans(request, options) {
        return this.get('/scheduled_plans', {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async all_spaces(fields, options) {
        return this.get('/spaces', { fields }, null, options);
    }
    async all_themes(fields, options) {
        return this.get('/themes', { fields }, null, options);
    }
    async all_timezones(options) {
        return this.get('/timezones', null, null, options);
    }
    async all_user_attribute_group_values(user_attribute_id, fields, options) {
        return this.get(`/user_attributes/${user_attribute_id}/group_values`, { fields }, null, options);
    }
    async all_user_attributes(request, options) {
        return this.get('/user_attributes', { fields: request.fields, sorts: request.sorts }, null, options);
    }
    async all_user_credentials_api3s(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_api3`, { fields }, null, options);
    }
    async all_user_credentials_embeds(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_embed`, { fields }, null, options);
    }
    async all_user_login_lockouts(fields, options) {
        return this.get('/user_login_lockouts', { fields }, null, options);
    }
    async all_user_sessions(user_id, fields, options) {
        return this.get(`/users/${user_id}/sessions`, { fields }, null, options);
    }
    async all_users(request, options) {
        return this.get('/users', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            ids: request.ids,
        }, null, options);
    }
    async all_workspaces(options) {
        return this.get('/workspaces', null, null, options);
    }
    async backup_configuration(options) {
        return this.get('/backup_configuration', null, null, options);
    }
    async cloud_storage_configuration(options) {
        return this.get('/cloud_storage', null, null, options);
    }
    async color_collection(collection_id, fields, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.get(`/color_collections/${collection_id}`, { fields }, null, options);
    }
    async color_collections_custom(fields, options) {
        return this.get('/color_collections/custom', { fields }, null, options);
    }
    async color_collections_standard(fields, options) {
        return this.get('/color_collections/standard', { fields }, null, options);
    }
    async connection(connection_name, fields, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.get(`/connections/${connection_name}`, { fields }, null, options);
    }
    async content_favorite(content_favorite_id, fields, options) {
        return this.get(`/content_favorite/${content_favorite_id}`, { fields }, null, options);
    }
    async content_metadata(content_metadata_id, fields, options) {
        return this.get(`/content_metadata/${content_metadata_id}`, { fields }, null, options);
    }
    async content_validation(fields, options) {
        return this.get('/content_validation', { fields }, null, options);
    }
    async create_color_collection(body, options) {
        return this.post('/color_collections', null, body, options);
    }
    async create_connection(body, options) {
        return this.post('/connections', null, body, options);
    }
    async create_content_favorite(body, options) {
        return this.post('/content_favorite', null, body, options);
    }
    async create_content_metadata_access(body, send_boards_notification_email, options) {
        return this.post('/content_metadata_access', { send_boards_notification_email }, body, options);
    }
    async create_dashboard(body, options) {
        return this.post('/dashboards', null, body, options);
    }
    async create_dashboard_element(body, fields, options) {
        return this.post('/dashboard_elements', { fields }, body, options);
    }
    async create_dashboard_filter(body, fields, options) {
        return this.post('/dashboard_filters', { fields }, body, options);
    }
    async create_dashboard_layout(body, fields, options) {
        return this.post('/dashboard_layouts', { fields }, body, options);
    }
    async create_dashboard_render_task(request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.post(`/render_tasks/dashboards/${request.dashboard_id}/${request.result_format}`, {
            width: request.width,
            height: request.height,
            fields: request.fields,
            pdf_paper_size: request.pdf_paper_size,
            pdf_landscape: request.pdf_landscape,
        }, request.body, options);
    }
    async create_digest_email_send(options) {
        return this.post('/digest_email_send', null, null, options);
    }
    async create_folder(body, options) {
        return this.post('/folders', null, body, options);
    }
    async create_git_branch(project_id, body, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/git_branch`, null, body, options);
    }
    async create_git_deploy_key(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/git/deploy_key`, null, null, options);
    }
    async create_group(body, fields, options) {
        return this.post('/groups', { fields }, body, options);
    }
    async create_homepage(body, fields, options) {
        return this.post('/homepages', { fields }, body, options);
    }
    async create_homepage_item(body, fields, options) {
        return this.post('/homepage_items', { fields }, body, options);
    }
    async create_homepage_section(body, fields, options) {
        return this.post('/homepage_sections', { fields }, body, options);
    }
    async create_integration_hub(body, fields, options) {
        return this.post('/integration_hubs', { fields }, body, options);
    }
    async create_look(body, fields, options) {
        return this.post('/looks', { fields }, body, options);
    }
    async create_look_render_task(look_id, result_format, width, height, fields, options) {
        result_format = transport_1.encodeParam(result_format);
        return this.post(`/render_tasks/looks/${look_id}/${result_format}`, { width, height, fields }, null, options);
    }
    async create_lookml_dashboard_render_task(request, options) {
        request.dashboard_id = transport_1.encodeParam(request.dashboard_id);
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.post(`/render_tasks/lookml_dashboards/${request.dashboard_id}/${request.result_format}`, {
            width: request.width,
            height: request.height,
            fields: request.fields,
            pdf_paper_size: request.pdf_paper_size,
            pdf_landscape: request.pdf_landscape,
        }, request.body, options);
    }
    async create_lookml_model(body, options) {
        return this.post('/lookml_models', null, body, options);
    }
    async create_merge_query(body, fields, options) {
        return this.post('/merge_queries', { fields }, body, options);
    }
    async create_model_set(body, options) {
        return this.post('/model_sets', null, body, options);
    }
    async create_oidc_test_config(body, options) {
        return this.post('/oidc_test_configs', null, body, options);
    }
    async create_permission_set(body, options) {
        return this.post('/permission_sets', null, body, options);
    }
    async create_project(body, options) {
        return this.post('/projects', null, body, options);
    }
    async create_query(body, fields, options) {
        return this.post('/queries', { fields }, body, options);
    }
    async create_query_render_task(query_id, result_format, width, height, fields, options) {
        result_format = transport_1.encodeParam(result_format);
        return this.post(`/render_tasks/queries/${query_id}/${result_format}`, { width, height, fields }, null, options);
    }
    async create_query_task(request, options) {
        return this.post('/query_tasks', {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
            fields: request.fields,
        }, request.body, options);
    }
    async create_role(body, options) {
        return this.post('/roles', null, body, options);
    }
    async create_saml_test_config(body, options) {
        return this.post('/saml_test_configs', null, body, options);
    }
    async create_scheduled_plan(body, options) {
        return this.post('/scheduled_plans', null, body, options);
    }
    async create_space(body, options) {
        return this.post('/spaces', null, body, options);
    }
    async create_sql_query(body, options) {
        return this.post('/sql_queries', null, body, options);
    }
    async create_sso_embed_url(body, options) {
        return this.post('/embed/sso_url', null, body, options);
    }
    async create_theme(body, options) {
        return this.post('/themes', null, body, options);
    }
    async create_user(body, fields, options) {
        return this.post('/users', { fields }, body, options);
    }
    async create_user_attribute(body, fields, options) {
        return this.post('/user_attributes', { fields }, body, options);
    }
    async create_user_credentials_api3(user_id, body, fields, options) {
        return this.post(`/users/${user_id}/credentials_api3`, { fields }, body, options);
    }
    async create_user_credentials_email(user_id, body, fields, options) {
        return this.post(`/users/${user_id}/credentials_email`, { fields }, body, options);
    }
    async create_user_credentials_email_password_reset(request, options) {
        return this.post(`/users/${request.user_id}/credentials_email/password_reset`, { expires: request.expires, fields: request.fields }, null, options);
    }
    async create_user_credentials_totp(user_id, body, fields, options) {
        return this.post(`/users/${user_id}/credentials_totp`, { fields }, body, options);
    }
    async custom_welcome_email(options) {
        return this.get('/custom_welcome_email', null, null, options);
    }
    async dashboard(dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.get(`/dashboards/${dashboard_id}`, { fields }, null, options);
    }
    async dashboard_dashboard_elements(dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.get(`/dashboards/${dashboard_id}/dashboard_elements`, { fields }, null, options);
    }
    async dashboard_dashboard_filters(dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.get(`/dashboards/${dashboard_id}/dashboard_filters`, { fields }, null, options);
    }
    async dashboard_dashboard_layouts(dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.get(`/dashboards/${dashboard_id}/dashboard_layouts`, { fields }, null, options);
    }
    async dashboard_element(dashboard_element_id, fields, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.get(`/dashboard_elements/${dashboard_element_id}`, { fields }, null, options);
    }
    async dashboard_filter(dashboard_filter_id, fields, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.get(`/dashboard_filters/${dashboard_filter_id}`, { fields }, null, options);
    }
    async dashboard_layout(dashboard_layout_id, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.get(`/dashboard_layouts/${dashboard_layout_id}`, { fields }, null, options);
    }
    async dashboard_layout_component(dashboard_layout_component_id, fields, options) {
        dashboard_layout_component_id = transport_1.encodeParam(dashboard_layout_component_id);
        return this.get(`/dashboard_layout_components/${dashboard_layout_component_id}`, { fields }, null, options);
    }
    async dashboard_layout_dashboard_layout_components(dashboard_layout_id, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.get(`/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components`, { fields }, null, options);
    }
    async dashboard_lookml(dashboard_id, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.get(`/dashboards/lookml/${dashboard_id}`, null, null, options);
    }
    async datagroup(datagroup_id, options) {
        datagroup_id = transport_1.encodeParam(datagroup_id);
        return this.get(`/datagroups/${datagroup_id}`, null, null, options);
    }
    async default_color_collection(options) {
        return this.get('/color_collections/default', null, null, options);
    }
    async default_theme(ts, options) {
        return this.get('/themes/default', { ts }, null, options);
    }
    async delete_color_collection(collection_id, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.delete(`/color_collections/${collection_id}`, null, null, options);
    }
    async delete_connection(connection_name, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.delete(`/connections/${connection_name}`, null, null, options);
    }
    async delete_connection_override(connection_name, override_context, options) {
        connection_name = transport_1.encodeParam(connection_name);
        override_context = transport_1.encodeParam(override_context);
        return this.delete(`/connections/${connection_name}/connection_override/${override_context}`, null, null, options);
    }
    async delete_content_favorite(content_favorite_id, options) {
        return this.delete(`/content_favorite/${content_favorite_id}`, null, null, options);
    }
    async delete_content_metadata_access(content_metadata_access_id, options) {
        return this.delete(`/content_metadata_access/${content_metadata_access_id}`, null, null, options);
    }
    async delete_dashboard(dashboard_id, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.delete(`/dashboards/${dashboard_id}`, null, null, options);
    }
    async delete_dashboard_element(dashboard_element_id, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.delete(`/dashboard_elements/${dashboard_element_id}`, null, null, options);
    }
    async delete_dashboard_filter(dashboard_filter_id, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.delete(`/dashboard_filters/${dashboard_filter_id}`, null, null, options);
    }
    async delete_dashboard_layout(dashboard_layout_id, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.delete(`/dashboard_layouts/${dashboard_layout_id}`, null, null, options);
    }
    async delete_folder(folder_id, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.delete(`/folders/${folder_id}`, null, null, options);
    }
    async delete_git_branch(project_id, branch_name, options) {
        project_id = transport_1.encodeParam(project_id);
        branch_name = transport_1.encodeParam(branch_name);
        return this.delete(`/projects/${project_id}/git_branch/${branch_name}`, null, null, options);
    }
    async delete_group(group_id, options) {
        return this.delete(`/groups/${group_id}`, null, null, options);
    }
    async delete_group_from_group(group_id, deleting_group_id, options) {
        return this.delete(`/groups/${group_id}/groups/${deleting_group_id}`, null, null, options);
    }
    async delete_group_user(group_id, user_id, options) {
        return this.delete(`/groups/${group_id}/users/${user_id}`, null, null, options);
    }
    async delete_homepage(homepage_id, options) {
        return this.delete(`/homepages/${homepage_id}`, null, null, options);
    }
    async delete_homepage_item(homepage_item_id, options) {
        return this.delete(`/homepage_items/${homepage_item_id}`, null, null, options);
    }
    async delete_homepage_section(homepage_section_id, options) {
        return this.delete(`/homepage_sections/${homepage_section_id}`, null, null, options);
    }
    async delete_integration_hub(integration_hub_id, options) {
        return this.delete(`/integration_hubs/${integration_hub_id}`, null, null, options);
    }
    async delete_look(look_id, options) {
        return this.delete(`/looks/${look_id}`, null, null, options);
    }
    async delete_lookml_model(lookml_model_name, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.delete(`/lookml_models/${lookml_model_name}`, null, null, options);
    }
    async delete_model_set(model_set_id, options) {
        return this.delete(`/model_sets/${model_set_id}`, null, null, options);
    }
    async delete_oidc_test_config(test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.delete(`/oidc_test_configs/${test_slug}`, null, null, options);
    }
    async delete_permission_set(permission_set_id, options) {
        return this.delete(`/permission_sets/${permission_set_id}`, null, null, options);
    }
    async delete_repository_credential(root_project_id, credential_id, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        credential_id = transport_1.encodeParam(credential_id);
        return this.delete(`/projects/${root_project_id}/credential/${credential_id}`, null, null, options);
    }
    async delete_role(role_id, options) {
        return this.delete(`/roles/${role_id}`, null, null, options);
    }
    async delete_saml_test_config(test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.delete(`/saml_test_configs/${test_slug}`, null, null, options);
    }
    async delete_scheduled_plan(scheduled_plan_id, options) {
        return this.delete(`/scheduled_plans/${scheduled_plan_id}`, null, null, options);
    }
    async delete_space(space_id, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.delete(`/spaces/${space_id}`, null, null, options);
    }
    async delete_theme(theme_id, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.delete(`/themes/${theme_id}`, null, null, options);
    }
    async delete_user(user_id, options) {
        return this.delete(`/users/${user_id}`, null, null, options);
    }
    async delete_user_attribute(user_attribute_id, options) {
        return this.delete(`/user_attributes/${user_attribute_id}`, null, null, options);
    }
    async delete_user_attribute_group_value(group_id, user_attribute_id, options) {
        return this.delete(`/groups/${group_id}/attribute_values/${user_attribute_id}`, null, null, options);
    }
    async delete_user_attribute_user_value(user_id, user_attribute_id, options) {
        return this.delete(`/users/${user_id}/attribute_values/${user_attribute_id}`, null, null, options);
    }
    async delete_user_credentials_api3(user_id, credentials_api3_id, options) {
        return this.delete(`/users/${user_id}/credentials_api3/${credentials_api3_id}`, null, null, options);
    }
    async delete_user_credentials_email(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_email`, null, null, options);
    }
    async delete_user_credentials_embed(user_id, credentials_embed_id, options) {
        return this.delete(`/users/${user_id}/credentials_embed/${credentials_embed_id}`, null, null, options);
    }
    async delete_user_credentials_google(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_google`, null, null, options);
    }
    async delete_user_credentials_ldap(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_ldap`, null, null, options);
    }
    async delete_user_credentials_looker_openid(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_looker_openid`, null, null, options);
    }
    async delete_user_credentials_oidc(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_oidc`, null, null, options);
    }
    async delete_user_credentials_saml(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_saml`, null, null, options);
    }
    async delete_user_credentials_totp(user_id, options) {
        return this.delete(`/users/${user_id}/credentials_totp`, null, null, options);
    }
    async delete_user_login_lockout(key, options) {
        key = transport_1.encodeParam(key);
        return this.delete(`/user_login_lockout/${key}`, null, null, options);
    }
    async delete_user_session(user_id, session_id, options) {
        return this.delete(`/users/${user_id}/sessions/${session_id}`, null, null, options);
    }
    async deploy_to_production(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/deploy_to_production`, null, null, options);
    }
    async digest_emails_enabled(options) {
        return this.get('/digest_emails_enabled', null, null, options);
    }
    async fetch_and_parse_saml_idp_metadata(body, options) {
        return this.post('/fetch_and_parse_saml_idp_metadata', null, body, options);
    }
    async fetch_integration_form(integration_id, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.post(`/integrations/${integration_id}/form`, null, null, options);
    }
    async fetch_remote_data_action_form(body, options) {
        return this.post('/data_actions/form', null, body, options);
    }
    async find_git_branch(project_id, branch_name, options) {
        project_id = transport_1.encodeParam(project_id);
        branch_name = transport_1.encodeParam(branch_name);
        return this.get(`/projects/${project_id}/git_branch/${branch_name}`, null, null, options);
    }
    async folder(folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.get(`/folders/${folder_id}`, { fields }, null, options);
    }
    async folder_ancestors(folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.get(`/folders/${folder_id}/ancestors`, { fields }, null, options);
    }
    async folder_children(request, options) {
        request.folder_id = transport_1.encodeParam(request.folder_id);
        return this.get(`/folders/${request.folder_id}/children`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async folder_children_search(request, options) {
        request.folder_id = transport_1.encodeParam(request.folder_id);
        return this.get(`/folders/${request.folder_id}/children/search`, { fields: request.fields, sorts: request.sorts, name: request.name }, null, options);
    }
    async folder_dashboards(folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.get(`/folders/${folder_id}/dashboards`, { fields }, null, options);
    }
    async folder_looks(folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.get(`/folders/${folder_id}/looks`, { fields }, null, options);
    }
    async folder_parent(folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.get(`/folders/${folder_id}/parent`, { fields }, null, options);
    }
    async force_password_reset_at_next_login_for_all_users(options) {
        return this.put('/password_config/force_password_reset_at_next_login_for_all_users', null, null, options);
    }
    async get_all_repository_credentials(root_project_id, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        return this.get(`/projects/${root_project_id}/credentials`, null, null, options);
    }
    async git_branch(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/git_branch`, null, null, options);
    }
    async git_deploy_key(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/git/deploy_key`, null, null, options);
    }
    async group(group_id, fields, options) {
        return this.get(`/groups/${group_id}`, { fields }, null, options);
    }
    async homepage(homepage_id, fields, options) {
        return this.get(`/homepages/${homepage_id}`, { fields }, null, options);
    }
    async homepage_item(homepage_item_id, fields, options) {
        return this.get(`/homepage_items/${homepage_item_id}`, { fields }, null, options);
    }
    async homepage_section(homepage_section_id, fields, options) {
        return this.get(`/homepage_sections/${homepage_section_id}`, { fields }, null, options);
    }
    async import_lookml_dashboard(lookml_dashboard_id, space_id, body, raw_locale, options) {
        lookml_dashboard_id = transport_1.encodeParam(lookml_dashboard_id);
        space_id = transport_1.encodeParam(space_id);
        return this.post(`/dashboards/${lookml_dashboard_id}/import/${space_id}`, { raw_locale }, body, options);
    }
    async integration(integration_id, fields, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.get(`/integrations/${integration_id}`, { fields }, null, options);
    }
    async integration_hub(integration_hub_id, fields, options) {
        return this.get(`/integration_hubs/${integration_hub_id}`, { fields }, null, options);
    }
    async internal_help_resources(options) {
        return this.get('/internal_help_resources_enabled', null, null, options);
    }
    async internal_help_resources_content(options) {
        return this.get('/internal_help_resources_content', null, null, options);
    }
    async kill_query(query_task_id, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.delete(`/running_queries/${query_task_id}`, null, null, options);
    }
    async ldap_config(options) {
        return this.get('/ldap_config', null, null, options);
    }
    async legacy_feature(legacy_feature_id, options) {
        return this.get(`/legacy_features/${legacy_feature_id}`, null, null, options);
    }
    async login(request, options) {
        return this.post('/login', { client_id: request.client_id, client_secret: request.client_secret }, null, options);
    }
    async login_user(user_id, associative, options) {
        return this.post(`/login/${user_id}`, { associative }, null, options);
    }
    async logout(options) {
        return this.delete('/logout', null, null, options);
    }
    async look(look_id, fields, options) {
        return this.get(`/looks/${look_id}`, { fields }, null, options);
    }
    async lookml_model(lookml_model_name, fields, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.get(`/lookml_models/${lookml_model_name}`, { fields }, null, options);
    }
    async lookml_model_explore(lookml_model_name, explore_name, fields, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        explore_name = transport_1.encodeParam(explore_name);
        return this.get(`/lookml_models/${lookml_model_name}/explores/${explore_name}`, { fields }, null, options);
    }
    async manifest(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/manifest`, null, null, options);
    }
    async me(fields, options) {
        return this.get('/user', { fields }, null, options);
    }
    async merge_query(merge_query_id, fields, options) {
        merge_query_id = transport_1.encodeParam(merge_query_id);
        return this.get(`/merge_queries/${merge_query_id}`, { fields }, null, options);
    }
    async model_set(model_set_id, fields, options) {
        return this.get(`/model_sets/${model_set_id}`, { fields }, null, options);
    }
    async oidc_config(options) {
        return this.get('/oidc_config', null, null, options);
    }
    async oidc_test_config(test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.get(`/oidc_test_configs/${test_slug}`, null, null, options);
    }
    async parse_saml_idp_metadata(body, options) {
        return this.post('/parse_saml_idp_metadata', null, body, options);
    }
    async password_config(options) {
        return this.get('/password_config', null, null, options);
    }
    async perform_data_action(body, options) {
        return this.post('/data_actions', null, body, options);
    }
    async permission_set(permission_set_id, fields, options) {
        return this.get(`/permission_sets/${permission_set_id}`, { fields }, null, options);
    }
    async project(project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}`, { fields }, null, options);
    }
    async project_file(project_id, file_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/files/file`, { file_id, fields }, null, options);
    }
    async project_validation_results(project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/validate`, { fields }, null, options);
    }
    async project_workspace(project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.get(`/projects/${project_id}/current_workspace`, { fields }, null, options);
    }
    async query(query_id, fields, options) {
        return this.get(`/queries/${query_id}`, { fields }, null, options);
    }
    async query_for_slug(slug, fields, options) {
        slug = transport_1.encodeParam(slug);
        return this.get(`/queries/slug/${slug}`, { fields }, null, options);
    }
    async query_task(query_task_id, fields, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.get(`/query_tasks/${query_task_id}`, { fields }, null, options);
    }
    async query_task_multi_results(query_task_ids, options) {
        return this.get('/query_tasks/multi_results', { query_task_ids }, null, options);
    }
    async query_task_results(query_task_id, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.get(`/query_tasks/${query_task_id}/results`, null, null, options);
    }
    async render_task(render_task_id, fields, options) {
        render_task_id = transport_1.encodeParam(render_task_id);
        return this.get(`/render_tasks/${render_task_id}`, { fields }, null, options);
    }
    async render_task_results(render_task_id, options) {
        render_task_id = transport_1.encodeParam(render_task_id);
        return this.get(`/render_tasks/${render_task_id}/results`, null, null, options);
    }
    async reset_project_to_production(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/reset_to_production`, null, null, options);
    }
    async reset_project_to_remote(project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/reset_to_remote`, null, null, options);
    }
    async role(role_id, options) {
        return this.get(`/roles/${role_id}`, null, null, options);
    }
    async role_groups(role_id, fields, options) {
        return this.get(`/roles/${role_id}/groups`, { fields }, null, options);
    }
    async role_users(request, options) {
        return this.get(`/roles/${request.role_id}/users`, {
            fields: request.fields,
            direct_association_only: request.direct_association_only,
        }, null, options);
    }
    async run_git_connection_test(project_id, test_id, remote_url, options) {
        project_id = transport_1.encodeParam(project_id);
        test_id = transport_1.encodeParam(test_id);
        return this.get(`/projects/${project_id}/git_connection_tests/${test_id}`, { remote_url }, null, options);
    }
    async run_inline_query(request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.post(`/queries/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, request.body, options);
    }
    async run_look(request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.get(`/looks/${request.look_id}/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, null, options);
    }
    async run_lookml_test(request, options) {
        request.project_id = transport_1.encodeParam(request.project_id);
        return this.get(`/projects/${request.project_id}/lookml_tests/run`, { file_id: request.file_id, test: request.test, model: request.model }, null, options);
    }
    async run_query(request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.get(`/queries/${request.query_id}/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, null, options);
    }
    async run_sql_query(slug, result_format, download, options) {
        slug = transport_1.encodeParam(slug);
        result_format = transport_1.encodeParam(result_format);
        return this.post(`/sql_queries/${slug}/run/${result_format}`, { download }, null, options);
    }
    async run_url_encoded_query(model_name, view_name, result_format, options) {
        model_name = transport_1.encodeParam(model_name);
        view_name = transport_1.encodeParam(view_name);
        result_format = transport_1.encodeParam(result_format);
        return this.get(`/queries/models/${model_name}/views/${view_name}/run/${result_format}`, null, null, options);
    }
    async saml_config(options) {
        return this.get('/saml_config', null, null, options);
    }
    async saml_test_config(test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.get(`/saml_test_configs/${test_slug}`, null, null, options);
    }
    async scheduled_plan(scheduled_plan_id, fields, options) {
        return this.get(`/scheduled_plans/${scheduled_plan_id}`, { fields }, null, options);
    }
    async scheduled_plan_run_once(body, options) {
        return this.post('/scheduled_plans/run_once', null, body, options);
    }
    async scheduled_plan_run_once_by_id(scheduled_plan_id, body, options) {
        return this.post(`/scheduled_plans/${scheduled_plan_id}/run_once`, null, body, options);
    }
    async scheduled_plans_for_dashboard(request, options) {
        return this.get(`/scheduled_plans/dashboard/${request.dashboard_id}`, {
            user_id: request.user_id,
            all_users: request.all_users,
            fields: request.fields,
        }, null, options);
    }
    async scheduled_plans_for_look(request, options) {
        return this.get(`/scheduled_plans/look/${request.look_id}`, {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async scheduled_plans_for_lookml_dashboard(request, options) {
        return this.get(`/scheduled_plans/lookml_dashboard/${request.lookml_dashboard_id}`, {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async scheduled_plans_for_space(space_id, fields, options) {
        return this.get(`/scheduled_plans/space/${space_id}`, { fields }, null, options);
    }
    async search_content_favorites(request, options) {
        return this.get('/content_favorite/search', {
            id: request.id,
            user_id: request.user_id,
            content_metadata_id: request.content_metadata_id,
            dashboard_id: request.dashboard_id,
            look_id: request.look_id,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            fields: request.fields,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_content_views(request, options) {
        return this.get('/content_view/search', {
            view_count: request.view_count,
            group_id: request.group_id,
            look_id: request.look_id,
            dashboard_id: request.dashboard_id,
            content_metadata_id: request.content_metadata_id,
            start_of_week_date: request.start_of_week_date,
            all_time: request.all_time,
            user_id: request.user_id,
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_dashboard_elements(request, options) {
        return this.get('/dashboard_elements/search', {
            dashboard_id: request.dashboard_id,
            look_id: request.look_id,
            title: request.title,
            deleted: request.deleted,
            fields: request.fields,
            filter_or: request.filter_or,
            sorts: request.sorts,
        }, null, options);
    }
    async search_dashboards(request, options) {
        return this.get('/dashboards/search', {
            id: request.id,
            slug: request.slug,
            title: request.title,
            description: request.description,
            content_favorite_id: request.content_favorite_id,
            space_id: request.space_id,
            folder_id: request.folder_id,
            deleted: request.deleted,
            user_id: request.user_id,
            view_count: request.view_count,
            content_metadata_id: request.content_metadata_id,
            curate: request.curate,
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_folders(request, options) {
        return this.get('/folders/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            name: request.name,
            id: request.id,
            parent_id: request.parent_id,
            creator_id: request.creator_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_groups(request, options) {
        return this.get('/groups/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
            id: request.id,
            name: request.name,
            external_group_id: request.external_group_id,
            externally_managed: request.externally_managed,
            externally_orphaned: request.externally_orphaned,
        }, null, options);
    }
    async search_homepages(request, options) {
        return this.get('/homepages/search', {
            title: request.title,
            created_at: request.created_at,
            first_name: request.first_name,
            last_name: request.last_name,
            fields: request.fields,
            favorited: request.favorited,
            creator_id: request.creator_id,
            page: request.page,
            per_page: request.per_page,
            offset: request.offset,
            limit: request.limit,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_looks(request, options) {
        return this.get('/looks/search', {
            id: request.id,
            title: request.title,
            description: request.description,
            content_favorite_id: request.content_favorite_id,
            space_id: request.space_id,
            user_id: request.user_id,
            view_count: request.view_count,
            deleted: request.deleted,
            query_id: request.query_id,
            curate: request.curate,
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_model_sets(request, options) {
        return this.get('/model_sets/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            all_access: request.all_access,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_permission_sets(request, options) {
        return this.get('/permission_sets/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            all_access: request.all_access,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_roles(request, options) {
        return this.get('/roles/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_spaces(request, options) {
        return this.get('/spaces/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            name: request.name,
            id: request.id,
            parent_id: request.parent_id,
            creator_id: request.creator_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_themes(request, options) {
        return this.get('/themes/search', {
            id: request.id,
            name: request.name,
            begin_at: request.begin_at,
            end_at: request.end_at,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            fields: request.fields,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_user_login_lockouts(request, options) {
        return this.get('/user_login_lockouts/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            auth_type: request.auth_type,
            full_name: request.full_name,
            email: request.email,
            remote_id: request.remote_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_users(request, options) {
        return this.get('/users/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            id: request.id,
            first_name: request.first_name,
            last_name: request.last_name,
            verified_looker_employee: request.verified_looker_employee,
            email: request.email,
            is_disabled: request.is_disabled,
            filter_or: request.filter_or,
            content_metadata_id: request.content_metadata_id,
            group_id: request.group_id,
        }, null, options);
    }
    async search_users_names(request, options) {
        request.pattern = transport_1.encodeParam(request.pattern);
        return this.get(`/users/search/names/${request.pattern}`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            id: request.id,
            first_name: request.first_name,
            last_name: request.last_name,
            verified_looker_employee: request.verified_looker_employee,
            email: request.email,
            is_disabled: request.is_disabled,
        }, null, options);
    }
    async session(options) {
        return this.get('/session', null, null, options);
    }
    async session_config(options) {
        return this.get('/session_config', null, null, options);
    }
    async set_default_color_collection(collection_id, options) {
        return this.put('/color_collections/default', { collection_id }, null, options);
    }
    async set_default_theme(name, options) {
        return this.put('/themes/default', { name }, null, options);
    }
    async set_role_groups(role_id, body, options) {
        return this.put(`/roles/${role_id}/groups`, null, body, options);
    }
    async set_role_users(role_id, body, options) {
        return this.put(`/roles/${role_id}/users`, null, body, options);
    }
    async set_user_attribute_group_values(user_attribute_id, body, options) {
        return this.post(`/user_attributes/${user_attribute_id}/group_values`, null, body, options);
    }
    async set_user_attribute_user_value(user_id, user_attribute_id, body, options) {
        return this.patch(`/users/${user_id}/attribute_values/${user_attribute_id}`, null, body, options);
    }
    async set_user_roles(user_id, body, fields, options) {
        return this.put(`/users/${user_id}/roles`, { fields }, body, options);
    }
    async space(space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.get(`/spaces/${space_id}`, { fields }, null, options);
    }
    async space_ancestors(space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.get(`/spaces/${space_id}/ancestors`, { fields }, null, options);
    }
    async space_children(request, options) {
        request.space_id = transport_1.encodeParam(request.space_id);
        return this.get(`/spaces/${request.space_id}/children`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async space_children_search(request, options) {
        request.space_id = transport_1.encodeParam(request.space_id);
        return this.get(`/spaces/${request.space_id}/children/search`, { fields: request.fields, sorts: request.sorts, name: request.name }, null, options);
    }
    async space_dashboards(space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.get(`/spaces/${space_id}/dashboards`, { fields }, null, options);
    }
    async space_looks(space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.get(`/spaces/${space_id}/looks`, { fields }, null, options);
    }
    async space_parent(space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.get(`/spaces/${space_id}/parent`, { fields }, null, options);
    }
    async sql_query(slug, options) {
        slug = transport_1.encodeParam(slug);
        return this.get(`/sql_queries/${slug}`, null, null, options);
    }
    async sync_lookml_dashboard(lookml_dashboard_id, body, raw_locale, options) {
        lookml_dashboard_id = transport_1.encodeParam(lookml_dashboard_id);
        return this.patch(`/dashboards/${lookml_dashboard_id}/sync`, { raw_locale }, body, options);
    }
    async test_connection(connection_name, tests, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.put(`/connections/${connection_name}/test`, { tests }, null, options);
    }
    async test_connection_config(body, tests, options) {
        return this.put('/connections/test', { tests }, body, options);
    }
    async test_integration(integration_id, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.post(`/integrations/${integration_id}/test`, null, null, options);
    }
    async test_ldap_config_auth(body, options) {
        return this.put('/ldap_config/test_auth', null, body, options);
    }
    async test_ldap_config_connection(body, options) {
        return this.put('/ldap_config/test_connection', null, body, options);
    }
    async test_ldap_config_user_auth(body, options) {
        return this.put('/ldap_config/test_user_auth', null, body, options);
    }
    async test_ldap_config_user_info(body, options) {
        return this.put('/ldap_config/test_user_info', null, body, options);
    }
    async theme(theme_id, fields, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.get(`/themes/${theme_id}`, { fields }, null, options);
    }
    async theme_or_default(name, ts, options) {
        return this.get('/themes/theme_or_default', { name, ts }, null, options);
    }
    async update_backup_configuration(body, options) {
        return this.patch('/backup_configuration', null, body, options);
    }
    async update_cloud_storage_configuration(body, options) {
        return this.patch('/cloud_storage', null, body, options);
    }
    async update_color_collection(collection_id, body, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.patch(`/color_collections/${collection_id}`, null, body, options);
    }
    async update_connection(connection_name, body, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.patch(`/connections/${connection_name}`, null, body, options);
    }
    async update_content_metadata(content_metadata_id, body, options) {
        return this.patch(`/content_metadata/${content_metadata_id}`, null, body, options);
    }
    async update_content_metadata_access(content_metadata_access_id, body, options) {
        return this.put(`/content_metadata_access/${content_metadata_access_id}`, null, body, options);
    }
    async update_custom_welcome_email(body, send_test_welcome_email, options) {
        return this.patch('/custom_welcome_email', { send_test_welcome_email }, body, options);
    }
    async update_custom_welcome_email_test(body, options) {
        return this.put('/custom_welcome_email_test', null, body, options);
    }
    async update_dashboard(dashboard_id, body, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.patch(`/dashboards/${dashboard_id}`, null, body, options);
    }
    async update_dashboard_element(dashboard_element_id, body, fields, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.patch(`/dashboard_elements/${dashboard_element_id}`, { fields }, body, options);
    }
    async update_dashboard_filter(dashboard_filter_id, body, fields, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.patch(`/dashboard_filters/${dashboard_filter_id}`, { fields }, body, options);
    }
    async update_dashboard_layout(dashboard_layout_id, body, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.patch(`/dashboard_layouts/${dashboard_layout_id}`, { fields }, body, options);
    }
    async update_dashboard_layout_component(dashboard_layout_component_id, body, fields, options) {
        dashboard_layout_component_id = transport_1.encodeParam(dashboard_layout_component_id);
        return this.patch(`/dashboard_layout_components/${dashboard_layout_component_id}`, { fields }, body, options);
    }
    async update_datagroup(datagroup_id, body, options) {
        datagroup_id = transport_1.encodeParam(datagroup_id);
        return this.patch(`/datagroups/${datagroup_id}`, null, body, options);
    }
    async update_digest_emails_enabled(body, options) {
        return this.patch('/digest_emails_enabled', null, body, options);
    }
    async update_folder(folder_id, body, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.patch(`/folders/${folder_id}`, null, body, options);
    }
    async update_git_branch(project_id, body, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.put(`/projects/${project_id}/git_branch`, null, body, options);
    }
    async update_group(group_id, body, fields, options) {
        return this.patch(`/groups/${group_id}`, { fields }, body, options);
    }
    async update_homepage(homepage_id, body, fields, options) {
        return this.patch(`/homepages/${homepage_id}`, { fields }, body, options);
    }
    async update_homepage_item(homepage_item_id, body, fields, options) {
        return this.patch(`/homepage_items/${homepage_item_id}`, { fields }, body, options);
    }
    async update_homepage_section(homepage_section_id, body, fields, options) {
        return this.patch(`/homepage_sections/${homepage_section_id}`, { fields }, body, options);
    }
    async update_integration(integration_id, body, fields, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.patch(`/integrations/${integration_id}`, { fields }, body, options);
    }
    async update_integration_hub(integration_hub_id, body, fields, options) {
        return this.patch(`/integration_hubs/${integration_hub_id}`, { fields }, body, options);
    }
    async update_internal_help_resources(body, options) {
        return this.patch('/internal_help_resources', null, body, options);
    }
    async update_internal_help_resources_content(body, options) {
        return this.patch('/internal_help_resources_content', null, body, options);
    }
    async update_ldap_config(body, options) {
        return this.patch('/ldap_config', null, body, options);
    }
    async update_legacy_feature(legacy_feature_id, body, options) {
        return this.patch(`/legacy_features/${legacy_feature_id}`, null, body, options);
    }
    async update_look(look_id, body, fields, options) {
        return this.patch(`/looks/${look_id}`, { fields }, body, options);
    }
    async update_lookml_model(lookml_model_name, body, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.patch(`/lookml_models/${lookml_model_name}`, null, body, options);
    }
    async update_model_set(model_set_id, body, options) {
        return this.patch(`/model_sets/${model_set_id}`, null, body, options);
    }
    async update_oidc_config(body, options) {
        return this.patch('/oidc_config', null, body, options);
    }
    async update_password_config(body, options) {
        return this.patch('/password_config', null, body, options);
    }
    async update_permission_set(permission_set_id, body, options) {
        return this.patch(`/permission_sets/${permission_set_id}`, null, body, options);
    }
    async update_project(project_id, body, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.patch(`/projects/${project_id}`, { fields }, body, options);
    }
    async update_repository_credential(root_project_id, credential_id, body, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        credential_id = transport_1.encodeParam(credential_id);
        return this.put(`/projects/${root_project_id}/credential/${credential_id}`, null, body, options);
    }
    async update_role(role_id, body, options) {
        return this.patch(`/roles/${role_id}`, null, body, options);
    }
    async update_saml_config(body, options) {
        return this.patch('/saml_config', null, body, options);
    }
    async update_scheduled_plan(scheduled_plan_id, body, options) {
        return this.patch(`/scheduled_plans/${scheduled_plan_id}`, null, body, options);
    }
    async update_session(body, options) {
        return this.patch('/session', null, body, options);
    }
    async update_session_config(body, options) {
        return this.patch('/session_config', null, body, options);
    }
    async update_space(space_id, body, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.patch(`/spaces/${space_id}`, null, body, options);
    }
    async update_theme(theme_id, body, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.patch(`/themes/${theme_id}`, null, body, options);
    }
    async update_user(user_id, body, fields, options) {
        return this.patch(`/users/${user_id}`, { fields }, body, options);
    }
    async update_user_attribute(user_attribute_id, body, fields, options) {
        return this.patch(`/user_attributes/${user_attribute_id}`, { fields }, body, options);
    }
    async update_user_attribute_group_value(group_id, user_attribute_id, body, options) {
        return this.patch(`/groups/${group_id}/attribute_values/${user_attribute_id}`, null, body, options);
    }
    async update_user_credentials_email(user_id, body, fields, options) {
        return this.patch(`/users/${user_id}/credentials_email`, { fields }, body, options);
    }
    async update_whitelabel_configuration(body, options) {
        return this.put('/whitelabel_configuration', null, body, options);
    }
    async user(user_id, fields, options) {
        return this.get(`/users/${user_id}`, { fields }, null, options);
    }
    async user_attribute(user_attribute_id, fields, options) {
        return this.get(`/user_attributes/${user_attribute_id}`, { fields }, null, options);
    }
    async user_attribute_user_values(request, options) {
        return this.get(`/users/${request.user_id}/attribute_values`, {
            fields: request.fields,
            user_attribute_ids: request.user_attribute_ids,
            all_values: request.all_values,
            include_unset: request.include_unset,
        }, null, options);
    }
    async user_credentials_api3(user_id, credentials_api3_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_api3/${credentials_api3_id}`, { fields }, null, options);
    }
    async user_credentials_email(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_email`, { fields }, null, options);
    }
    async user_credentials_embed(user_id, credentials_embed_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_embed/${credentials_embed_id}`, { fields }, null, options);
    }
    async user_credentials_google(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_google`, { fields }, null, options);
    }
    async user_credentials_ldap(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_ldap`, { fields }, null, options);
    }
    async user_credentials_looker_openid(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_looker_openid`, { fields }, null, options);
    }
    async user_credentials_oidc(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_oidc`, { fields }, null, options);
    }
    async user_credentials_saml(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_saml`, { fields }, null, options);
    }
    async user_credentials_totp(user_id, fields, options) {
        return this.get(`/users/${user_id}/credentials_totp`, { fields }, null, options);
    }
    async user_for_credential(credential_type, credential_id, fields, options) {
        credential_type = transport_1.encodeParam(credential_type);
        credential_id = transport_1.encodeParam(credential_id);
        return this.get(`/users/credential/${credential_type}/${credential_id}`, { fields }, null, options);
    }
    async user_roles(request, options) {
        return this.get(`/users/${request.user_id}/roles`, {
            fields: request.fields,
            direct_association_only: request.direct_association_only,
        }, null, options);
    }
    async user_session(user_id, session_id, fields, options) {
        return this.get(`/users/${user_id}/sessions/${session_id}`, { fields }, null, options);
    }
    async validate_project(project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.post(`/projects/${project_id}/validate`, { fields }, null, options);
    }
    async validate_theme(body, options) {
        return this.post('/themes/validate', null, body, options);
    }
    async vector_thumbnail(type, resource_id, reload, options) {
        type = transport_1.encodeParam(type);
        resource_id = transport_1.encodeParam(resource_id);
        return this.get(`/vector_thumbnail/${type}/${resource_id}`, { reload }, null, options);
    }
    async versions(fields, options) {
        return this.get('/versions', { fields }, null, options);
    }
    async whitelabel_configuration(fields, options) {
        return this.get('/whitelabel_configuration', { fields }, null, options);
    }
    async workspace(workspace_id, options) {
        workspace_id = transport_1.encodeParam(workspace_id);
        return this.get(`/workspaces/${workspace_id}`, null, null, options);
    }
}
exports.Looker31SDK = Looker31SDK;
//# sourceMappingURL=methods.js.map