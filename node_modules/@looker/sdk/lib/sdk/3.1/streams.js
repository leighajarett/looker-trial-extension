"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Looker31SDKStream = void 0;
const apiMethods_1 = require("../../rtl/apiMethods");
const transport_1 = require("../../rtl/transport");
class Looker31SDKStream extends apiMethods_1.APIMethods {
    constructor(authSession) {
        super(authSession, '3.1');
    }
    async accept_integration_hub_legal_agreement(callback, integration_hub_id, options) {
        return this.authStream(callback, 'POST', `/integration_hubs/${integration_hub_id}/accept_legal_agreement`, null, null, options);
    }
    async active_themes(callback, request, options) {
        return this.authStream(callback, 'GET', '/themes/active', { name: request.name, ts: request.ts, fields: request.fields }, null, options);
    }
    async add_group_group(callback, group_id, body, options) {
        return this.authStream(callback, 'POST', `/groups/${group_id}/groups`, null, body, options);
    }
    async add_group_user(callback, group_id, body, options) {
        return this.authStream(callback, 'POST', `/groups/${group_id}/users`, null, body, options);
    }
    async all_color_collections(callback, fields, options) {
        return this.authStream(callback, 'GET', '/color_collections', { fields }, null, options);
    }
    async all_connections(callback, fields, options) {
        return this.authStream(callback, 'GET', '/connections', { fields }, null, options);
    }
    async all_content_metadata_accesses(callback, content_metadata_id, fields, options) {
        return this.authStream(callback, 'GET', '/content_metadata_access', { content_metadata_id, fields }, null, options);
    }
    async all_content_metadatas(callback, parent_id, fields, options) {
        return this.authStream(callback, 'GET', '/content_metadata', { parent_id, fields }, null, options);
    }
    async all_dashboards(callback, fields, options) {
        return this.authStream(callback, 'GET', '/dashboards', { fields }, null, options);
    }
    async all_datagroups(callback, options) {
        return this.authStream(callback, 'GET', '/datagroups', null, null, options);
    }
    async all_dialect_infos(callback, fields, options) {
        return this.authStream(callback, 'GET', '/dialect_info', { fields }, null, options);
    }
    async all_folders(callback, fields, options) {
        return this.authStream(callback, 'GET', '/folders', { fields }, null, options);
    }
    async all_git_branches(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git_branches`, null, null, options);
    }
    async all_git_connection_tests(callback, project_id, remote_url, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git_connection_tests`, { remote_url }, null, options);
    }
    async all_group_groups(callback, group_id, fields, options) {
        return this.authStream(callback, 'GET', `/groups/${group_id}/groups`, { fields }, null, options);
    }
    async all_group_users(callback, request, options) {
        return this.authStream(callback, 'GET', `/groups/${request.group_id}/users`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async all_groups(callback, request, options) {
        return this.authStream(callback, 'GET', '/groups', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            ids: request.ids,
            content_metadata_id: request.content_metadata_id,
            can_add_to_content_metadata: request.can_add_to_content_metadata,
        }, null, options);
    }
    async all_homepage_items(callback, request, options) {
        return this.authStream(callback, 'GET', '/homepage_items', {
            fields: request.fields,
            sorts: request.sorts,
            homepage_section_id: request.homepage_section_id,
        }, null, options);
    }
    async all_homepage_sections(callback, request, options) {
        return this.authStream(callback, 'GET', '/homepage_sections', { fields: request.fields, sorts: request.sorts }, null, options);
    }
    async all_homepages(callback, fields, options) {
        return this.authStream(callback, 'GET', '/homepages', { fields }, null, options);
    }
    async all_integration_hubs(callback, fields, options) {
        return this.authStream(callback, 'GET', '/integration_hubs', { fields }, null, options);
    }
    async all_integrations(callback, request, options) {
        return this.authStream(callback, 'GET', '/integrations', {
            fields: request.fields,
            integration_hub_id: request.integration_hub_id,
        }, null, options);
    }
    async all_legacy_features(callback, options) {
        return this.authStream(callback, 'GET', '/legacy_features', null, null, options);
    }
    async all_locales(callback, options) {
        return this.authStream(callback, 'GET', '/locales', null, null, options);
    }
    async all_lookml_models(callback, fields, options) {
        return this.authStream(callback, 'GET', '/lookml_models', { fields }, null, options);
    }
    async all_lookml_tests(callback, project_id, file_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/lookml_tests`, { file_id }, null, options);
    }
    async all_looks(callback, fields, options) {
        return this.authStream(callback, 'GET', '/looks', { fields }, null, options);
    }
    async all_model_sets(callback, fields, options) {
        return this.authStream(callback, 'GET', '/model_sets', { fields }, null, options);
    }
    async all_permission_sets(callback, fields, options) {
        return this.authStream(callback, 'GET', '/permission_sets', { fields }, null, options);
    }
    async all_permissions(callback, options) {
        return this.authStream(callback, 'GET', '/permissions', null, null, options);
    }
    async all_project_files(callback, project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/files`, { fields }, null, options);
    }
    async all_projects(callback, fields, options) {
        return this.authStream(callback, 'GET', '/projects', { fields }, null, options);
    }
    async all_roles(callback, request, options) {
        return this.authStream(callback, 'GET', '/roles', { fields: request.fields, ids: request.ids }, null, options);
    }
    async all_running_queries(callback, options) {
        return this.authStream(callback, 'GET', '/running_queries', null, null, options);
    }
    async all_scheduled_plans(callback, request, options) {
        return this.authStream(callback, 'GET', '/scheduled_plans', {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async all_spaces(callback, fields, options) {
        return this.authStream(callback, 'GET', '/spaces', { fields }, null, options);
    }
    async all_themes(callback, fields, options) {
        return this.authStream(callback, 'GET', '/themes', { fields }, null, options);
    }
    async all_timezones(callback, options) {
        return this.authStream(callback, 'GET', '/timezones', null, null, options);
    }
    async all_user_attribute_group_values(callback, user_attribute_id, fields, options) {
        return this.authStream(callback, 'GET', `/user_attributes/${user_attribute_id}/group_values`, { fields }, null, options);
    }
    async all_user_attributes(callback, request, options) {
        return this.authStream(callback, 'GET', '/user_attributes', { fields: request.fields, sorts: request.sorts }, null, options);
    }
    async all_user_credentials_api3s(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_api3`, { fields }, null, options);
    }
    async all_user_credentials_embeds(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_embed`, { fields }, null, options);
    }
    async all_user_login_lockouts(callback, fields, options) {
        return this.authStream(callback, 'GET', '/user_login_lockouts', { fields }, null, options);
    }
    async all_user_sessions(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/sessions`, { fields }, null, options);
    }
    async all_users(callback, request, options) {
        return this.authStream(callback, 'GET', '/users', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            ids: request.ids,
        }, null, options);
    }
    async all_workspaces(callback, options) {
        return this.authStream(callback, 'GET', '/workspaces', null, null, options);
    }
    async backup_configuration(callback, options) {
        return this.authStream(callback, 'GET', '/backup_configuration', null, null, options);
    }
    async cloud_storage_configuration(callback, options) {
        return this.authStream(callback, 'GET', '/cloud_storage', null, null, options);
    }
    async color_collection(callback, collection_id, fields, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.authStream(callback, 'GET', `/color_collections/${collection_id}`, { fields }, null, options);
    }
    async color_collections_custom(callback, fields, options) {
        return this.authStream(callback, 'GET', '/color_collections/custom', { fields }, null, options);
    }
    async color_collections_standard(callback, fields, options) {
        return this.authStream(callback, 'GET', '/color_collections/standard', { fields }, null, options);
    }
    async connection(callback, connection_name, fields, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.authStream(callback, 'GET', `/connections/${connection_name}`, { fields }, null, options);
    }
    async content_favorite(callback, content_favorite_id, fields, options) {
        return this.authStream(callback, 'GET', `/content_favorite/${content_favorite_id}`, { fields }, null, options);
    }
    async content_metadata(callback, content_metadata_id, fields, options) {
        return this.authStream(callback, 'GET', `/content_metadata/${content_metadata_id}`, { fields }, null, options);
    }
    async content_validation(callback, fields, options) {
        return this.authStream(callback, 'GET', '/content_validation', { fields }, null, options);
    }
    async create_color_collection(callback, body, options) {
        return this.authStream(callback, 'POST', '/color_collections', null, body, options);
    }
    async create_connection(callback, body, options) {
        return this.authStream(callback, 'POST', '/connections', null, body, options);
    }
    async create_content_favorite(callback, body, options) {
        return this.authStream(callback, 'POST', '/content_favorite', null, body, options);
    }
    async create_content_metadata_access(callback, body, send_boards_notification_email, options) {
        return this.authStream(callback, 'POST', '/content_metadata_access', { send_boards_notification_email }, body, options);
    }
    async create_dashboard(callback, body, options) {
        return this.authStream(callback, 'POST', '/dashboards', null, body, options);
    }
    async create_dashboard_element(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/dashboard_elements', { fields }, body, options);
    }
    async create_dashboard_filter(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/dashboard_filters', { fields }, body, options);
    }
    async create_dashboard_layout(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/dashboard_layouts', { fields }, body, options);
    }
    async create_dashboard_render_task(callback, request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.authStream(callback, 'POST', `/render_tasks/dashboards/${request.dashboard_id}/${request.result_format}`, {
            width: request.width,
            height: request.height,
            fields: request.fields,
            pdf_paper_size: request.pdf_paper_size,
            pdf_landscape: request.pdf_landscape,
        }, request.body, options);
    }
    async create_digest_email_send(callback, options) {
        return this.authStream(callback, 'POST', '/digest_email_send', null, null, options);
    }
    async create_folder(callback, body, options) {
        return this.authStream(callback, 'POST', '/folders', null, body, options);
    }
    async create_git_branch(callback, project_id, body, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/git_branch`, null, body, options);
    }
    async create_git_deploy_key(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/git/deploy_key`, null, null, options);
    }
    async create_group(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/groups', { fields }, body, options);
    }
    async create_homepage(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/homepages', { fields }, body, options);
    }
    async create_homepage_item(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/homepage_items', { fields }, body, options);
    }
    async create_homepage_section(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/homepage_sections', { fields }, body, options);
    }
    async create_integration_hub(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/integration_hubs', { fields }, body, options);
    }
    async create_look(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/looks', { fields }, body, options);
    }
    async create_look_render_task(callback, look_id, result_format, width, height, fields, options) {
        result_format = transport_1.encodeParam(result_format);
        return this.authStream(callback, 'POST', `/render_tasks/looks/${look_id}/${result_format}`, { width, height, fields }, null, options);
    }
    async create_lookml_dashboard_render_task(callback, request, options) {
        request.dashboard_id = transport_1.encodeParam(request.dashboard_id);
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.authStream(callback, 'POST', `/render_tasks/lookml_dashboards/${request.dashboard_id}/${request.result_format}`, {
            width: request.width,
            height: request.height,
            fields: request.fields,
            pdf_paper_size: request.pdf_paper_size,
            pdf_landscape: request.pdf_landscape,
        }, request.body, options);
    }
    async create_lookml_model(callback, body, options) {
        return this.authStream(callback, 'POST', '/lookml_models', null, body, options);
    }
    async create_merge_query(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/merge_queries', { fields }, body, options);
    }
    async create_model_set(callback, body, options) {
        return this.authStream(callback, 'POST', '/model_sets', null, body, options);
    }
    async create_oidc_test_config(callback, body, options) {
        return this.authStream(callback, 'POST', '/oidc_test_configs', null, body, options);
    }
    async create_permission_set(callback, body, options) {
        return this.authStream(callback, 'POST', '/permission_sets', null, body, options);
    }
    async create_project(callback, body, options) {
        return this.authStream(callback, 'POST', '/projects', null, body, options);
    }
    async create_query(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/queries', { fields }, body, options);
    }
    async create_query_render_task(callback, query_id, result_format, width, height, fields, options) {
        result_format = transport_1.encodeParam(result_format);
        return this.authStream(callback, 'POST', `/render_tasks/queries/${query_id}/${result_format}`, { width, height, fields }, null, options);
    }
    async create_query_task(callback, request, options) {
        return this.authStream(callback, 'POST', '/query_tasks', {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
            fields: request.fields,
        }, request.body, options);
    }
    async create_role(callback, body, options) {
        return this.authStream(callback, 'POST', '/roles', null, body, options);
    }
    async create_saml_test_config(callback, body, options) {
        return this.authStream(callback, 'POST', '/saml_test_configs', null, body, options);
    }
    async create_scheduled_plan(callback, body, options) {
        return this.authStream(callback, 'POST', '/scheduled_plans', null, body, options);
    }
    async create_space(callback, body, options) {
        return this.authStream(callback, 'POST', '/spaces', null, body, options);
    }
    async create_sql_query(callback, body, options) {
        return this.authStream(callback, 'POST', '/sql_queries', null, body, options);
    }
    async create_sso_embed_url(callback, body, options) {
        return this.authStream(callback, 'POST', '/embed/sso_url', null, body, options);
    }
    async create_theme(callback, body, options) {
        return this.authStream(callback, 'POST', '/themes', null, body, options);
    }
    async create_user(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/users', { fields }, body, options);
    }
    async create_user_attribute(callback, body, fields, options) {
        return this.authStream(callback, 'POST', '/user_attributes', { fields }, body, options);
    }
    async create_user_credentials_api3(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'POST', `/users/${user_id}/credentials_api3`, { fields }, body, options);
    }
    async create_user_credentials_email(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'POST', `/users/${user_id}/credentials_email`, { fields }, body, options);
    }
    async create_user_credentials_email_password_reset(callback, request, options) {
        return this.authStream(callback, 'POST', `/users/${request.user_id}/credentials_email/password_reset`, { expires: request.expires, fields: request.fields }, null, options);
    }
    async create_user_credentials_totp(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'POST', `/users/${user_id}/credentials_totp`, { fields }, body, options);
    }
    async custom_welcome_email(callback, options) {
        return this.authStream(callback, 'GET', '/custom_welcome_email', null, null, options);
    }
    async dashboard(callback, dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'GET', `/dashboards/${dashboard_id}`, { fields }, null, options);
    }
    async dashboard_dashboard_elements(callback, dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'GET', `/dashboards/${dashboard_id}/dashboard_elements`, { fields }, null, options);
    }
    async dashboard_dashboard_filters(callback, dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'GET', `/dashboards/${dashboard_id}/dashboard_filters`, { fields }, null, options);
    }
    async dashboard_dashboard_layouts(callback, dashboard_id, fields, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'GET', `/dashboards/${dashboard_id}/dashboard_layouts`, { fields }, null, options);
    }
    async dashboard_element(callback, dashboard_element_id, fields, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.authStream(callback, 'GET', `/dashboard_elements/${dashboard_element_id}`, { fields }, null, options);
    }
    async dashboard_filter(callback, dashboard_filter_id, fields, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.authStream(callback, 'GET', `/dashboard_filters/${dashboard_filter_id}`, { fields }, null, options);
    }
    async dashboard_layout(callback, dashboard_layout_id, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.authStream(callback, 'GET', `/dashboard_layouts/${dashboard_layout_id}`, { fields }, null, options);
    }
    async dashboard_layout_component(callback, dashboard_layout_component_id, fields, options) {
        dashboard_layout_component_id = transport_1.encodeParam(dashboard_layout_component_id);
        return this.authStream(callback, 'GET', `/dashboard_layout_components/${dashboard_layout_component_id}`, { fields }, null, options);
    }
    async dashboard_layout_dashboard_layout_components(callback, dashboard_layout_id, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.authStream(callback, 'GET', `/dashboard_layouts/${dashboard_layout_id}/dashboard_layout_components`, { fields }, null, options);
    }
    async dashboard_lookml(callback, dashboard_id, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'GET', `/dashboards/lookml/${dashboard_id}`, null, null, options);
    }
    async datagroup(callback, datagroup_id, options) {
        datagroup_id = transport_1.encodeParam(datagroup_id);
        return this.authStream(callback, 'GET', `/datagroups/${datagroup_id}`, null, null, options);
    }
    async default_color_collection(callback, options) {
        return this.authStream(callback, 'GET', '/color_collections/default', null, null, options);
    }
    async default_theme(callback, ts, options) {
        return this.authStream(callback, 'GET', '/themes/default', { ts }, null, options);
    }
    async delete_color_collection(callback, collection_id, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.authStream(callback, 'DELETE', `/color_collections/${collection_id}`, null, null, options);
    }
    async delete_connection(callback, connection_name, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.authStream(callback, 'DELETE', `/connections/${connection_name}`, null, null, options);
    }
    async delete_connection_override(callback, connection_name, override_context, options) {
        connection_name = transport_1.encodeParam(connection_name);
        override_context = transport_1.encodeParam(override_context);
        return this.authStream(callback, 'DELETE', `/connections/${connection_name}/connection_override/${override_context}`, null, null, options);
    }
    async delete_content_favorite(callback, content_favorite_id, options) {
        return this.authStream(callback, 'DELETE', `/content_favorite/${content_favorite_id}`, null, null, options);
    }
    async delete_content_metadata_access(callback, content_metadata_access_id, options) {
        return this.authStream(callback, 'DELETE', `/content_metadata_access/${content_metadata_access_id}`, null, null, options);
    }
    async delete_dashboard(callback, dashboard_id, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'DELETE', `/dashboards/${dashboard_id}`, null, null, options);
    }
    async delete_dashboard_element(callback, dashboard_element_id, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.authStream(callback, 'DELETE', `/dashboard_elements/${dashboard_element_id}`, null, null, options);
    }
    async delete_dashboard_filter(callback, dashboard_filter_id, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.authStream(callback, 'DELETE', `/dashboard_filters/${dashboard_filter_id}`, null, null, options);
    }
    async delete_dashboard_layout(callback, dashboard_layout_id, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.authStream(callback, 'DELETE', `/dashboard_layouts/${dashboard_layout_id}`, null, null, options);
    }
    async delete_folder(callback, folder_id, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'DELETE', `/folders/${folder_id}`, null, null, options);
    }
    async delete_git_branch(callback, project_id, branch_name, options) {
        project_id = transport_1.encodeParam(project_id);
        branch_name = transport_1.encodeParam(branch_name);
        return this.authStream(callback, 'DELETE', `/projects/${project_id}/git_branch/${branch_name}`, null, null, options);
    }
    async delete_group(callback, group_id, options) {
        return this.authStream(callback, 'DELETE', `/groups/${group_id}`, null, null, options);
    }
    async delete_group_from_group(callback, group_id, deleting_group_id, options) {
        return this.authStream(callback, 'DELETE', `/groups/${group_id}/groups/${deleting_group_id}`, null, null, options);
    }
    async delete_group_user(callback, group_id, user_id, options) {
        return this.authStream(callback, 'DELETE', `/groups/${group_id}/users/${user_id}`, null, null, options);
    }
    async delete_homepage(callback, homepage_id, options) {
        return this.authStream(callback, 'DELETE', `/homepages/${homepage_id}`, null, null, options);
    }
    async delete_homepage_item(callback, homepage_item_id, options) {
        return this.authStream(callback, 'DELETE', `/homepage_items/${homepage_item_id}`, null, null, options);
    }
    async delete_homepage_section(callback, homepage_section_id, options) {
        return this.authStream(callback, 'DELETE', `/homepage_sections/${homepage_section_id}`, null, null, options);
    }
    async delete_integration_hub(callback, integration_hub_id, options) {
        return this.authStream(callback, 'DELETE', `/integration_hubs/${integration_hub_id}`, null, null, options);
    }
    async delete_look(callback, look_id, options) {
        return this.authStream(callback, 'DELETE', `/looks/${look_id}`, null, null, options);
    }
    async delete_lookml_model(callback, lookml_model_name, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.authStream(callback, 'DELETE', `/lookml_models/${lookml_model_name}`, null, null, options);
    }
    async delete_model_set(callback, model_set_id, options) {
        return this.authStream(callback, 'DELETE', `/model_sets/${model_set_id}`, null, null, options);
    }
    async delete_oidc_test_config(callback, test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.authStream(callback, 'DELETE', `/oidc_test_configs/${test_slug}`, null, null, options);
    }
    async delete_permission_set(callback, permission_set_id, options) {
        return this.authStream(callback, 'DELETE', `/permission_sets/${permission_set_id}`, null, null, options);
    }
    async delete_repository_credential(callback, root_project_id, credential_id, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        credential_id = transport_1.encodeParam(credential_id);
        return this.authStream(callback, 'DELETE', `/projects/${root_project_id}/credential/${credential_id}`, null, null, options);
    }
    async delete_role(callback, role_id, options) {
        return this.authStream(callback, 'DELETE', `/roles/${role_id}`, null, null, options);
    }
    async delete_saml_test_config(callback, test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.authStream(callback, 'DELETE', `/saml_test_configs/${test_slug}`, null, null, options);
    }
    async delete_scheduled_plan(callback, scheduled_plan_id, options) {
        return this.authStream(callback, 'DELETE', `/scheduled_plans/${scheduled_plan_id}`, null, null, options);
    }
    async delete_space(callback, space_id, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'DELETE', `/spaces/${space_id}`, null, null, options);
    }
    async delete_theme(callback, theme_id, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.authStream(callback, 'DELETE', `/themes/${theme_id}`, null, null, options);
    }
    async delete_user(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}`, null, null, options);
    }
    async delete_user_attribute(callback, user_attribute_id, options) {
        return this.authStream(callback, 'DELETE', `/user_attributes/${user_attribute_id}`, null, null, options);
    }
    async delete_user_attribute_group_value(callback, group_id, user_attribute_id, options) {
        return this.authStream(callback, 'DELETE', `/groups/${group_id}/attribute_values/${user_attribute_id}`, null, null, options);
    }
    async delete_user_attribute_user_value(callback, user_id, user_attribute_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/attribute_values/${user_attribute_id}`, null, null, options);
    }
    async delete_user_credentials_api3(callback, user_id, credentials_api3_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_api3/${credentials_api3_id}`, null, null, options);
    }
    async delete_user_credentials_email(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_email`, null, null, options);
    }
    async delete_user_credentials_embed(callback, user_id, credentials_embed_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_embed/${credentials_embed_id}`, null, null, options);
    }
    async delete_user_credentials_google(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_google`, null, null, options);
    }
    async delete_user_credentials_ldap(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_ldap`, null, null, options);
    }
    async delete_user_credentials_looker_openid(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_looker_openid`, null, null, options);
    }
    async delete_user_credentials_oidc(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_oidc`, null, null, options);
    }
    async delete_user_credentials_saml(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_saml`, null, null, options);
    }
    async delete_user_credentials_totp(callback, user_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/credentials_totp`, null, null, options);
    }
    async delete_user_login_lockout(callback, key, options) {
        key = transport_1.encodeParam(key);
        return this.authStream(callback, 'DELETE', `/user_login_lockout/${key}`, null, null, options);
    }
    async delete_user_session(callback, user_id, session_id, options) {
        return this.authStream(callback, 'DELETE', `/users/${user_id}/sessions/${session_id}`, null, null, options);
    }
    async deploy_to_production(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/deploy_to_production`, null, null, options);
    }
    async digest_emails_enabled(callback, options) {
        return this.authStream(callback, 'GET', '/digest_emails_enabled', null, null, options);
    }
    async fetch_and_parse_saml_idp_metadata(callback, body, options) {
        return this.authStream(callback, 'POST', '/fetch_and_parse_saml_idp_metadata', null, body, options);
    }
    async fetch_integration_form(callback, integration_id, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.authStream(callback, 'POST', `/integrations/${integration_id}/form`, null, null, options);
    }
    async fetch_remote_data_action_form(callback, body, options) {
        return this.authStream(callback, 'POST', '/data_actions/form', null, body, options);
    }
    async find_git_branch(callback, project_id, branch_name, options) {
        project_id = transport_1.encodeParam(project_id);
        branch_name = transport_1.encodeParam(branch_name);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git_branch/${branch_name}`, null, null, options);
    }
    async folder(callback, folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'GET', `/folders/${folder_id}`, { fields }, null, options);
    }
    async folder_ancestors(callback, folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'GET', `/folders/${folder_id}/ancestors`, { fields }, null, options);
    }
    async folder_children(callback, request, options) {
        request.folder_id = transport_1.encodeParam(request.folder_id);
        return this.authStream(callback, 'GET', `/folders/${request.folder_id}/children`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async folder_children_search(callback, request, options) {
        request.folder_id = transport_1.encodeParam(request.folder_id);
        return this.authStream(callback, 'GET', `/folders/${request.folder_id}/children/search`, { fields: request.fields, sorts: request.sorts, name: request.name }, null, options);
    }
    async folder_dashboards(callback, folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'GET', `/folders/${folder_id}/dashboards`, { fields }, null, options);
    }
    async folder_looks(callback, folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'GET', `/folders/${folder_id}/looks`, { fields }, null, options);
    }
    async folder_parent(callback, folder_id, fields, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'GET', `/folders/${folder_id}/parent`, { fields }, null, options);
    }
    async force_password_reset_at_next_login_for_all_users(callback, options) {
        return this.authStream(callback, 'PUT', '/password_config/force_password_reset_at_next_login_for_all_users', null, null, options);
    }
    async get_all_repository_credentials(callback, root_project_id, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        return this.authStream(callback, 'GET', `/projects/${root_project_id}/credentials`, null, null, options);
    }
    async git_branch(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git_branch`, null, null, options);
    }
    async git_deploy_key(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git/deploy_key`, null, null, options);
    }
    async group(callback, group_id, fields, options) {
        return this.authStream(callback, 'GET', `/groups/${group_id}`, { fields }, null, options);
    }
    async homepage(callback, homepage_id, fields, options) {
        return this.authStream(callback, 'GET', `/homepages/${homepage_id}`, { fields }, null, options);
    }
    async homepage_item(callback, homepage_item_id, fields, options) {
        return this.authStream(callback, 'GET', `/homepage_items/${homepage_item_id}`, { fields }, null, options);
    }
    async homepage_section(callback, homepage_section_id, fields, options) {
        return this.authStream(callback, 'GET', `/homepage_sections/${homepage_section_id}`, { fields }, null, options);
    }
    async import_lookml_dashboard(callback, lookml_dashboard_id, space_id, body, raw_locale, options) {
        lookml_dashboard_id = transport_1.encodeParam(lookml_dashboard_id);
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'POST', `/dashboards/${lookml_dashboard_id}/import/${space_id}`, { raw_locale }, body, options);
    }
    async integration(callback, integration_id, fields, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.authStream(callback, 'GET', `/integrations/${integration_id}`, { fields }, null, options);
    }
    async integration_hub(callback, integration_hub_id, fields, options) {
        return this.authStream(callback, 'GET', `/integration_hubs/${integration_hub_id}`, { fields }, null, options);
    }
    async internal_help_resources(callback, options) {
        return this.authStream(callback, 'GET', '/internal_help_resources_enabled', null, null, options);
    }
    async internal_help_resources_content(callback, options) {
        return this.authStream(callback, 'GET', '/internal_help_resources_content', null, null, options);
    }
    async kill_query(callback, query_task_id, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.authStream(callback, 'DELETE', `/running_queries/${query_task_id}`, null, null, options);
    }
    async ldap_config(callback, options) {
        return this.authStream(callback, 'GET', '/ldap_config', null, null, options);
    }
    async legacy_feature(callback, legacy_feature_id, options) {
        return this.authStream(callback, 'GET', `/legacy_features/${legacy_feature_id}`, null, null, options);
    }
    async login(callback, request, options) {
        return this.authStream(callback, 'POST', '/login', { client_id: request.client_id, client_secret: request.client_secret }, null, options);
    }
    async login_user(callback, user_id, associative, options) {
        return this.authStream(callback, 'POST', `/login/${user_id}`, { associative }, null, options);
    }
    async logout(callback, options) {
        return this.authStream(callback, 'DELETE', '/logout', null, null, options);
    }
    async look(callback, look_id, fields, options) {
        return this.authStream(callback, 'GET', `/looks/${look_id}`, { fields }, null, options);
    }
    async lookml_model(callback, lookml_model_name, fields, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.authStream(callback, 'GET', `/lookml_models/${lookml_model_name}`, { fields }, null, options);
    }
    async lookml_model_explore(callback, lookml_model_name, explore_name, fields, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        explore_name = transport_1.encodeParam(explore_name);
        return this.authStream(callback, 'GET', `/lookml_models/${lookml_model_name}/explores/${explore_name}`, { fields }, null, options);
    }
    async manifest(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/manifest`, null, null, options);
    }
    async me(callback, fields, options) {
        return this.authStream(callback, 'GET', '/user', { fields }, null, options);
    }
    async merge_query(callback, merge_query_id, fields, options) {
        merge_query_id = transport_1.encodeParam(merge_query_id);
        return this.authStream(callback, 'GET', `/merge_queries/${merge_query_id}`, { fields }, null, options);
    }
    async model_set(callback, model_set_id, fields, options) {
        return this.authStream(callback, 'GET', `/model_sets/${model_set_id}`, { fields }, null, options);
    }
    async oidc_config(callback, options) {
        return this.authStream(callback, 'GET', '/oidc_config', null, null, options);
    }
    async oidc_test_config(callback, test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.authStream(callback, 'GET', `/oidc_test_configs/${test_slug}`, null, null, options);
    }
    async parse_saml_idp_metadata(callback, body, options) {
        return this.authStream(callback, 'POST', '/parse_saml_idp_metadata', null, body, options);
    }
    async password_config(callback, options) {
        return this.authStream(callback, 'GET', '/password_config', null, null, options);
    }
    async perform_data_action(callback, body, options) {
        return this.authStream(callback, 'POST', '/data_actions', null, body, options);
    }
    async permission_set(callback, permission_set_id, fields, options) {
        return this.authStream(callback, 'GET', `/permission_sets/${permission_set_id}`, { fields }, null, options);
    }
    async project(callback, project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}`, { fields }, null, options);
    }
    async project_file(callback, project_id, file_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/files/file`, { file_id, fields }, null, options);
    }
    async project_validation_results(callback, project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/validate`, { fields }, null, options);
    }
    async project_workspace(callback, project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/current_workspace`, { fields }, null, options);
    }
    async query(callback, query_id, fields, options) {
        return this.authStream(callback, 'GET', `/queries/${query_id}`, { fields }, null, options);
    }
    async query_for_slug(callback, slug, fields, options) {
        slug = transport_1.encodeParam(slug);
        return this.authStream(callback, 'GET', `/queries/slug/${slug}`, { fields }, null, options);
    }
    async query_task(callback, query_task_id, fields, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.authStream(callback, 'GET', `/query_tasks/${query_task_id}`, { fields }, null, options);
    }
    async query_task_multi_results(callback, query_task_ids, options) {
        return this.authStream(callback, 'GET', '/query_tasks/multi_results', { query_task_ids }, null, options);
    }
    async query_task_results(callback, query_task_id, options) {
        query_task_id = transport_1.encodeParam(query_task_id);
        return this.authStream(callback, 'GET', `/query_tasks/${query_task_id}/results`, null, null, options);
    }
    async render_task(callback, render_task_id, fields, options) {
        render_task_id = transport_1.encodeParam(render_task_id);
        return this.authStream(callback, 'GET', `/render_tasks/${render_task_id}`, { fields }, null, options);
    }
    async render_task_results(callback, render_task_id, options) {
        render_task_id = transport_1.encodeParam(render_task_id);
        return this.authStream(callback, 'GET', `/render_tasks/${render_task_id}/results`, null, null, options);
    }
    async reset_project_to_production(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/reset_to_production`, null, null, options);
    }
    async reset_project_to_remote(callback, project_id, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/reset_to_remote`, null, null, options);
    }
    async role(callback, role_id, options) {
        return this.authStream(callback, 'GET', `/roles/${role_id}`, null, null, options);
    }
    async role_groups(callback, role_id, fields, options) {
        return this.authStream(callback, 'GET', `/roles/${role_id}/groups`, { fields }, null, options);
    }
    async role_users(callback, request, options) {
        return this.authStream(callback, 'GET', `/roles/${request.role_id}/users`, {
            fields: request.fields,
            direct_association_only: request.direct_association_only,
        }, null, options);
    }
    async run_git_connection_test(callback, project_id, test_id, remote_url, options) {
        project_id = transport_1.encodeParam(project_id);
        test_id = transport_1.encodeParam(test_id);
        return this.authStream(callback, 'GET', `/projects/${project_id}/git_connection_tests/${test_id}`, { remote_url }, null, options);
    }
    async run_inline_query(callback, request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.authStream(callback, 'POST', `/queries/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, request.body, options);
    }
    async run_look(callback, request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.authStream(callback, 'GET', `/looks/${request.look_id}/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, null, options);
    }
    async run_lookml_test(callback, request, options) {
        request.project_id = transport_1.encodeParam(request.project_id);
        return this.authStream(callback, 'GET', `/projects/${request.project_id}/lookml_tests/run`, { file_id: request.file_id, test: request.test, model: request.model }, null, options);
    }
    async run_query(callback, request, options) {
        request.result_format = transport_1.encodeParam(request.result_format);
        return this.authStream(callback, 'GET', `/queries/${request.query_id}/run/${request.result_format}`, {
            limit: request.limit,
            apply_formatting: request.apply_formatting,
            apply_vis: request.apply_vis,
            cache: request.cache,
            image_width: request.image_width,
            image_height: request.image_height,
            generate_drill_links: request.generate_drill_links,
            force_production: request.force_production,
            cache_only: request.cache_only,
            path_prefix: request.path_prefix,
            rebuild_pdts: request.rebuild_pdts,
            server_table_calcs: request.server_table_calcs,
        }, null, options);
    }
    async run_sql_query(callback, slug, result_format, download, options) {
        slug = transport_1.encodeParam(slug);
        result_format = transport_1.encodeParam(result_format);
        return this.authStream(callback, 'POST', `/sql_queries/${slug}/run/${result_format}`, { download }, null, options);
    }
    async run_url_encoded_query(callback, model_name, view_name, result_format, options) {
        model_name = transport_1.encodeParam(model_name);
        view_name = transport_1.encodeParam(view_name);
        result_format = transport_1.encodeParam(result_format);
        return this.authStream(callback, 'GET', `/queries/models/${model_name}/views/${view_name}/run/${result_format}`, null, null, options);
    }
    async saml_config(callback, options) {
        return this.authStream(callback, 'GET', '/saml_config', null, null, options);
    }
    async saml_test_config(callback, test_slug, options) {
        test_slug = transport_1.encodeParam(test_slug);
        return this.authStream(callback, 'GET', `/saml_test_configs/${test_slug}`, null, null, options);
    }
    async scheduled_plan(callback, scheduled_plan_id, fields, options) {
        return this.authStream(callback, 'GET', `/scheduled_plans/${scheduled_plan_id}`, { fields }, null, options);
    }
    async scheduled_plan_run_once(callback, body, options) {
        return this.authStream(callback, 'POST', '/scheduled_plans/run_once', null, body, options);
    }
    async scheduled_plan_run_once_by_id(callback, scheduled_plan_id, body, options) {
        return this.authStream(callback, 'POST', `/scheduled_plans/${scheduled_plan_id}/run_once`, null, body, options);
    }
    async scheduled_plans_for_dashboard(callback, request, options) {
        return this.authStream(callback, 'GET', `/scheduled_plans/dashboard/${request.dashboard_id}`, {
            user_id: request.user_id,
            all_users: request.all_users,
            fields: request.fields,
        }, null, options);
    }
    async scheduled_plans_for_look(callback, request, options) {
        return this.authStream(callback, 'GET', `/scheduled_plans/look/${request.look_id}`, {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async scheduled_plans_for_lookml_dashboard(callback, request, options) {
        return this.authStream(callback, 'GET', `/scheduled_plans/lookml_dashboard/${request.lookml_dashboard_id}`, {
            user_id: request.user_id,
            fields: request.fields,
            all_users: request.all_users,
        }, null, options);
    }
    async scheduled_plans_for_space(callback, space_id, fields, options) {
        return this.authStream(callback, 'GET', `/scheduled_plans/space/${space_id}`, { fields }, null, options);
    }
    async search_content_favorites(callback, request, options) {
        return this.authStream(callback, 'GET', '/content_favorite/search', {
            id: request.id,
            user_id: request.user_id,
            content_metadata_id: request.content_metadata_id,
            dashboard_id: request.dashboard_id,
            look_id: request.look_id,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            fields: request.fields,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_content_views(callback, request, options) {
        return this.authStream(callback, 'GET', '/content_view/search', {
            view_count: request.view_count,
            group_id: request.group_id,
            look_id: request.look_id,
            dashboard_id: request.dashboard_id,
            content_metadata_id: request.content_metadata_id,
            start_of_week_date: request.start_of_week_date,
            all_time: request.all_time,
            user_id: request.user_id,
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_dashboard_elements(callback, request, options) {
        return this.authStream(callback, 'GET', '/dashboard_elements/search', {
            dashboard_id: request.dashboard_id,
            look_id: request.look_id,
            title: request.title,
            deleted: request.deleted,
            fields: request.fields,
            filter_or: request.filter_or,
            sorts: request.sorts,
        }, null, options);
    }
    async search_dashboards(callback, request, options) {
        return this.authStream(callback, 'GET', '/dashboards/search', {
            id: request.id,
            slug: request.slug,
            title: request.title,
            description: request.description,
            content_favorite_id: request.content_favorite_id,
            space_id: request.space_id,
            folder_id: request.folder_id,
            deleted: request.deleted,
            user_id: request.user_id,
            view_count: request.view_count,
            content_metadata_id: request.content_metadata_id,
            curate: request.curate,
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_folders(callback, request, options) {
        return this.authStream(callback, 'GET', '/folders/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            name: request.name,
            id: request.id,
            parent_id: request.parent_id,
            creator_id: request.creator_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_groups(callback, request, options) {
        return this.authStream(callback, 'GET', '/groups/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
            id: request.id,
            name: request.name,
            external_group_id: request.external_group_id,
            externally_managed: request.externally_managed,
            externally_orphaned: request.externally_orphaned,
        }, null, options);
    }
    async search_homepages(callback, request, options) {
        return this.authStream(callback, 'GET', '/homepages/search', {
            title: request.title,
            created_at: request.created_at,
            first_name: request.first_name,
            last_name: request.last_name,
            fields: request.fields,
            favorited: request.favorited,
            creator_id: request.creator_id,
            page: request.page,
            per_page: request.per_page,
            offset: request.offset,
            limit: request.limit,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_looks(callback, request, options) {
        return this.authStream(callback, 'GET', '/looks/search', {
            id: request.id,
            title: request.title,
            description: request.description,
            content_favorite_id: request.content_favorite_id,
            space_id: request.space_id,
            user_id: request.user_id,
            view_count: request.view_count,
            deleted: request.deleted,
            query_id: request.query_id,
            curate: request.curate,
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_model_sets(callback, request, options) {
        return this.authStream(callback, 'GET', '/model_sets/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            all_access: request.all_access,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_permission_sets(callback, request, options) {
        return this.authStream(callback, 'GET', '/permission_sets/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            all_access: request.all_access,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_roles(callback, request, options) {
        return this.authStream(callback, 'GET', '/roles/search', {
            fields: request.fields,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            id: request.id,
            name: request.name,
            built_in: request.built_in,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_spaces(callback, request, options) {
        return this.authStream(callback, 'GET', '/spaces/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            name: request.name,
            id: request.id,
            parent_id: request.parent_id,
            creator_id: request.creator_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_themes(callback, request, options) {
        return this.authStream(callback, 'GET', '/themes/search', {
            id: request.id,
            name: request.name,
            begin_at: request.begin_at,
            end_at: request.end_at,
            limit: request.limit,
            offset: request.offset,
            sorts: request.sorts,
            fields: request.fields,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_user_login_lockouts(callback, request, options) {
        return this.authStream(callback, 'GET', '/user_login_lockouts/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            auth_type: request.auth_type,
            full_name: request.full_name,
            email: request.email,
            remote_id: request.remote_id,
            filter_or: request.filter_or,
        }, null, options);
    }
    async search_users(callback, request, options) {
        return this.authStream(callback, 'GET', '/users/search', {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            id: request.id,
            first_name: request.first_name,
            last_name: request.last_name,
            verified_looker_employee: request.verified_looker_employee,
            email: request.email,
            is_disabled: request.is_disabled,
            filter_or: request.filter_or,
            content_metadata_id: request.content_metadata_id,
            group_id: request.group_id,
        }, null, options);
    }
    async search_users_names(callback, request, options) {
        request.pattern = transport_1.encodeParam(request.pattern);
        return this.authStream(callback, 'GET', `/users/search/names/${request.pattern}`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
            id: request.id,
            first_name: request.first_name,
            last_name: request.last_name,
            verified_looker_employee: request.verified_looker_employee,
            email: request.email,
            is_disabled: request.is_disabled,
        }, null, options);
    }
    async session(callback, options) {
        return this.authStream(callback, 'GET', '/session', null, null, options);
    }
    async session_config(callback, options) {
        return this.authStream(callback, 'GET', '/session_config', null, null, options);
    }
    async set_default_color_collection(callback, collection_id, options) {
        return this.authStream(callback, 'PUT', '/color_collections/default', { collection_id }, null, options);
    }
    async set_default_theme(callback, name, options) {
        return this.authStream(callback, 'PUT', '/themes/default', { name }, null, options);
    }
    async set_role_groups(callback, role_id, body, options) {
        return this.authStream(callback, 'PUT', `/roles/${role_id}/groups`, null, body, options);
    }
    async set_role_users(callback, role_id, body, options) {
        return this.authStream(callback, 'PUT', `/roles/${role_id}/users`, null, body, options);
    }
    async set_user_attribute_group_values(callback, user_attribute_id, body, options) {
        return this.authStream(callback, 'POST', `/user_attributes/${user_attribute_id}/group_values`, null, body, options);
    }
    async set_user_attribute_user_value(callback, user_id, user_attribute_id, body, options) {
        return this.authStream(callback, 'PATCH', `/users/${user_id}/attribute_values/${user_attribute_id}`, null, body, options);
    }
    async set_user_roles(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'PUT', `/users/${user_id}/roles`, { fields }, body, options);
    }
    async space(callback, space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'GET', `/spaces/${space_id}`, { fields }, null, options);
    }
    async space_ancestors(callback, space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'GET', `/spaces/${space_id}/ancestors`, { fields }, null, options);
    }
    async space_children(callback, request, options) {
        request.space_id = transport_1.encodeParam(request.space_id);
        return this.authStream(callback, 'GET', `/spaces/${request.space_id}/children`, {
            fields: request.fields,
            page: request.page,
            per_page: request.per_page,
            sorts: request.sorts,
        }, null, options);
    }
    async space_children_search(callback, request, options) {
        request.space_id = transport_1.encodeParam(request.space_id);
        return this.authStream(callback, 'GET', `/spaces/${request.space_id}/children/search`, { fields: request.fields, sorts: request.sorts, name: request.name }, null, options);
    }
    async space_dashboards(callback, space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'GET', `/spaces/${space_id}/dashboards`, { fields }, null, options);
    }
    async space_looks(callback, space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'GET', `/spaces/${space_id}/looks`, { fields }, null, options);
    }
    async space_parent(callback, space_id, fields, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'GET', `/spaces/${space_id}/parent`, { fields }, null, options);
    }
    async sql_query(callback, slug, options) {
        slug = transport_1.encodeParam(slug);
        return this.authStream(callback, 'GET', `/sql_queries/${slug}`, null, null, options);
    }
    async sync_lookml_dashboard(callback, lookml_dashboard_id, body, raw_locale, options) {
        lookml_dashboard_id = transport_1.encodeParam(lookml_dashboard_id);
        return this.authStream(callback, 'PATCH', `/dashboards/${lookml_dashboard_id}/sync`, { raw_locale }, body, options);
    }
    async test_connection(callback, connection_name, tests, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.authStream(callback, 'PUT', `/connections/${connection_name}/test`, { tests }, null, options);
    }
    async test_connection_config(callback, body, tests, options) {
        return this.authStream(callback, 'PUT', '/connections/test', { tests }, body, options);
    }
    async test_integration(callback, integration_id, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.authStream(callback, 'POST', `/integrations/${integration_id}/test`, null, null, options);
    }
    async test_ldap_config_auth(callback, body, options) {
        return this.authStream(callback, 'PUT', '/ldap_config/test_auth', null, body, options);
    }
    async test_ldap_config_connection(callback, body, options) {
        return this.authStream(callback, 'PUT', '/ldap_config/test_connection', null, body, options);
    }
    async test_ldap_config_user_auth(callback, body, options) {
        return this.authStream(callback, 'PUT', '/ldap_config/test_user_auth', null, body, options);
    }
    async test_ldap_config_user_info(callback, body, options) {
        return this.authStream(callback, 'PUT', '/ldap_config/test_user_info', null, body, options);
    }
    async theme(callback, theme_id, fields, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.authStream(callback, 'GET', `/themes/${theme_id}`, { fields }, null, options);
    }
    async theme_or_default(callback, name, ts, options) {
        return this.authStream(callback, 'GET', '/themes/theme_or_default', { name, ts }, null, options);
    }
    async update_backup_configuration(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/backup_configuration', null, body, options);
    }
    async update_cloud_storage_configuration(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/cloud_storage', null, body, options);
    }
    async update_color_collection(callback, collection_id, body, options) {
        collection_id = transport_1.encodeParam(collection_id);
        return this.authStream(callback, 'PATCH', `/color_collections/${collection_id}`, null, body, options);
    }
    async update_connection(callback, connection_name, body, options) {
        connection_name = transport_1.encodeParam(connection_name);
        return this.authStream(callback, 'PATCH', `/connections/${connection_name}`, null, body, options);
    }
    async update_content_metadata(callback, content_metadata_id, body, options) {
        return this.authStream(callback, 'PATCH', `/content_metadata/${content_metadata_id}`, null, body, options);
    }
    async update_content_metadata_access(callback, content_metadata_access_id, body, options) {
        return this.authStream(callback, 'PUT', `/content_metadata_access/${content_metadata_access_id}`, null, body, options);
    }
    async update_custom_welcome_email(callback, body, send_test_welcome_email, options) {
        return this.authStream(callback, 'PATCH', '/custom_welcome_email', { send_test_welcome_email }, body, options);
    }
    async update_custom_welcome_email_test(callback, body, options) {
        return this.authStream(callback, 'PUT', '/custom_welcome_email_test', null, body, options);
    }
    async update_dashboard(callback, dashboard_id, body, options) {
        dashboard_id = transport_1.encodeParam(dashboard_id);
        return this.authStream(callback, 'PATCH', `/dashboards/${dashboard_id}`, null, body, options);
    }
    async update_dashboard_element(callback, dashboard_element_id, body, fields, options) {
        dashboard_element_id = transport_1.encodeParam(dashboard_element_id);
        return this.authStream(callback, 'PATCH', `/dashboard_elements/${dashboard_element_id}`, { fields }, body, options);
    }
    async update_dashboard_filter(callback, dashboard_filter_id, body, fields, options) {
        dashboard_filter_id = transport_1.encodeParam(dashboard_filter_id);
        return this.authStream(callback, 'PATCH', `/dashboard_filters/${dashboard_filter_id}`, { fields }, body, options);
    }
    async update_dashboard_layout(callback, dashboard_layout_id, body, fields, options) {
        dashboard_layout_id = transport_1.encodeParam(dashboard_layout_id);
        return this.authStream(callback, 'PATCH', `/dashboard_layouts/${dashboard_layout_id}`, { fields }, body, options);
    }
    async update_dashboard_layout_component(callback, dashboard_layout_component_id, body, fields, options) {
        dashboard_layout_component_id = transport_1.encodeParam(dashboard_layout_component_id);
        return this.authStream(callback, 'PATCH', `/dashboard_layout_components/${dashboard_layout_component_id}`, { fields }, body, options);
    }
    async update_datagroup(callback, datagroup_id, body, options) {
        datagroup_id = transport_1.encodeParam(datagroup_id);
        return this.authStream(callback, 'PATCH', `/datagroups/${datagroup_id}`, null, body, options);
    }
    async update_digest_emails_enabled(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/digest_emails_enabled', null, body, options);
    }
    async update_folder(callback, folder_id, body, options) {
        folder_id = transport_1.encodeParam(folder_id);
        return this.authStream(callback, 'PATCH', `/folders/${folder_id}`, null, body, options);
    }
    async update_git_branch(callback, project_id, body, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'PUT', `/projects/${project_id}/git_branch`, null, body, options);
    }
    async update_group(callback, group_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/groups/${group_id}`, { fields }, body, options);
    }
    async update_homepage(callback, homepage_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/homepages/${homepage_id}`, { fields }, body, options);
    }
    async update_homepage_item(callback, homepage_item_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/homepage_items/${homepage_item_id}`, { fields }, body, options);
    }
    async update_homepage_section(callback, homepage_section_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/homepage_sections/${homepage_section_id}`, { fields }, body, options);
    }
    async update_integration(callback, integration_id, body, fields, options) {
        integration_id = transport_1.encodeParam(integration_id);
        return this.authStream(callback, 'PATCH', `/integrations/${integration_id}`, { fields }, body, options);
    }
    async update_integration_hub(callback, integration_hub_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/integration_hubs/${integration_hub_id}`, { fields }, body, options);
    }
    async update_internal_help_resources(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/internal_help_resources', null, body, options);
    }
    async update_internal_help_resources_content(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/internal_help_resources_content', null, body, options);
    }
    async update_ldap_config(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/ldap_config', null, body, options);
    }
    async update_legacy_feature(callback, legacy_feature_id, body, options) {
        return this.authStream(callback, 'PATCH', `/legacy_features/${legacy_feature_id}`, null, body, options);
    }
    async update_look(callback, look_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/looks/${look_id}`, { fields }, body, options);
    }
    async update_lookml_model(callback, lookml_model_name, body, options) {
        lookml_model_name = transport_1.encodeParam(lookml_model_name);
        return this.authStream(callback, 'PATCH', `/lookml_models/${lookml_model_name}`, null, body, options);
    }
    async update_model_set(callback, model_set_id, body, options) {
        return this.authStream(callback, 'PATCH', `/model_sets/${model_set_id}`, null, body, options);
    }
    async update_oidc_config(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/oidc_config', null, body, options);
    }
    async update_password_config(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/password_config', null, body, options);
    }
    async update_permission_set(callback, permission_set_id, body, options) {
        return this.authStream(callback, 'PATCH', `/permission_sets/${permission_set_id}`, null, body, options);
    }
    async update_project(callback, project_id, body, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'PATCH', `/projects/${project_id}`, { fields }, body, options);
    }
    async update_repository_credential(callback, root_project_id, credential_id, body, options) {
        root_project_id = transport_1.encodeParam(root_project_id);
        credential_id = transport_1.encodeParam(credential_id);
        return this.authStream(callback, 'PUT', `/projects/${root_project_id}/credential/${credential_id}`, null, body, options);
    }
    async update_role(callback, role_id, body, options) {
        return this.authStream(callback, 'PATCH', `/roles/${role_id}`, null, body, options);
    }
    async update_saml_config(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/saml_config', null, body, options);
    }
    async update_scheduled_plan(callback, scheduled_plan_id, body, options) {
        return this.authStream(callback, 'PATCH', `/scheduled_plans/${scheduled_plan_id}`, null, body, options);
    }
    async update_session(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/session', null, body, options);
    }
    async update_session_config(callback, body, options) {
        return this.authStream(callback, 'PATCH', '/session_config', null, body, options);
    }
    async update_space(callback, space_id, body, options) {
        space_id = transport_1.encodeParam(space_id);
        return this.authStream(callback, 'PATCH', `/spaces/${space_id}`, null, body, options);
    }
    async update_theme(callback, theme_id, body, options) {
        theme_id = transport_1.encodeParam(theme_id);
        return this.authStream(callback, 'PATCH', `/themes/${theme_id}`, null, body, options);
    }
    async update_user(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/users/${user_id}`, { fields }, body, options);
    }
    async update_user_attribute(callback, user_attribute_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/user_attributes/${user_attribute_id}`, { fields }, body, options);
    }
    async update_user_attribute_group_value(callback, group_id, user_attribute_id, body, options) {
        return this.authStream(callback, 'PATCH', `/groups/${group_id}/attribute_values/${user_attribute_id}`, null, body, options);
    }
    async update_user_credentials_email(callback, user_id, body, fields, options) {
        return this.authStream(callback, 'PATCH', `/users/${user_id}/credentials_email`, { fields }, body, options);
    }
    async update_whitelabel_configuration(callback, body, options) {
        return this.authStream(callback, 'PUT', '/whitelabel_configuration', null, body, options);
    }
    async user(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}`, { fields }, null, options);
    }
    async user_attribute(callback, user_attribute_id, fields, options) {
        return this.authStream(callback, 'GET', `/user_attributes/${user_attribute_id}`, { fields }, null, options);
    }
    async user_attribute_user_values(callback, request, options) {
        return this.authStream(callback, 'GET', `/users/${request.user_id}/attribute_values`, {
            fields: request.fields,
            user_attribute_ids: request.user_attribute_ids,
            all_values: request.all_values,
            include_unset: request.include_unset,
        }, null, options);
    }
    async user_credentials_api3(callback, user_id, credentials_api3_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_api3/${credentials_api3_id}`, { fields }, null, options);
    }
    async user_credentials_email(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_email`, { fields }, null, options);
    }
    async user_credentials_embed(callback, user_id, credentials_embed_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_embed/${credentials_embed_id}`, { fields }, null, options);
    }
    async user_credentials_google(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_google`, { fields }, null, options);
    }
    async user_credentials_ldap(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_ldap`, { fields }, null, options);
    }
    async user_credentials_looker_openid(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_looker_openid`, { fields }, null, options);
    }
    async user_credentials_oidc(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_oidc`, { fields }, null, options);
    }
    async user_credentials_saml(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_saml`, { fields }, null, options);
    }
    async user_credentials_totp(callback, user_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/credentials_totp`, { fields }, null, options);
    }
    async user_for_credential(callback, credential_type, credential_id, fields, options) {
        credential_type = transport_1.encodeParam(credential_type);
        credential_id = transport_1.encodeParam(credential_id);
        return this.authStream(callback, 'GET', `/users/credential/${credential_type}/${credential_id}`, { fields }, null, options);
    }
    async user_roles(callback, request, options) {
        return this.authStream(callback, 'GET', `/users/${request.user_id}/roles`, {
            fields: request.fields,
            direct_association_only: request.direct_association_only,
        }, null, options);
    }
    async user_session(callback, user_id, session_id, fields, options) {
        return this.authStream(callback, 'GET', `/users/${user_id}/sessions/${session_id}`, { fields }, null, options);
    }
    async validate_project(callback, project_id, fields, options) {
        project_id = transport_1.encodeParam(project_id);
        return this.authStream(callback, 'POST', `/projects/${project_id}/validate`, { fields }, null, options);
    }
    async validate_theme(callback, body, options) {
        return this.authStream(callback, 'POST', '/themes/validate', null, body, options);
    }
    async vector_thumbnail(callback, type, resource_id, reload, options) {
        type = transport_1.encodeParam(type);
        resource_id = transport_1.encodeParam(resource_id);
        return this.authStream(callback, 'GET', `/vector_thumbnail/${type}/${resource_id}`, { reload }, null, options);
    }
    async versions(callback, fields, options) {
        return this.authStream(callback, 'GET', '/versions', { fields }, null, options);
    }
    async whitelabel_configuration(callback, fields, options) {
        return this.authStream(callback, 'GET', '/whitelabel_configuration', { fields }, null, options);
    }
    async workspace(callback, workspace_id, options) {
        workspace_id = transport_1.encodeParam(workspace_id);
        return this.authStream(callback, 'GET', `/workspaces/${workspace_id}`, null, null, options);
    }
}
exports.Looker31SDKStream = Looker31SDKStream;
//# sourceMappingURL=streams.js.map