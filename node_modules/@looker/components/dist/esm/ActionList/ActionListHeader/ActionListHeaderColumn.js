import React, { useContext, forwardRef } from 'react';
import styled from 'styled-components';
import { ActionListContext } from '../ActionListContext';
import { Icon } from '../../Icon';
const ActionListHeaderColumnLayout = forwardRef(({ className, children, id }, ref) => {
    const { columns, onSort } = useContext(ActionListContext);
    const columnInfo = columns && columns.find((column) => column.id === id);
    const canSort = columnInfo && columnInfo.canSort;
    const handleClick = () => {
        if (onSort && columnInfo && columnInfo.canSort) {
            onSort(id, columnInfo.sortDirection === 'asc' ? 'desc' : 'asc');
        }
    };
    return (React.createElement("div", { className: className, onClick: handleClick, ref: ref, style: { cursor: canSort ? 'pointer' : undefined } },
        children,
        columnInfo && columnInfo.sortDirection ? (React.createElement(Icon, { ml: columnInfo.type === 'string' ? 'xxsmall' : undefined, mr: columnInfo.type === 'number' ? 'xxsmall' : undefined, name: columnInfo.sortDirection === 'asc' ? 'CaretUp' : 'CaretDown' })) : null));
});
ActionListHeaderColumnLayout.displayName = 'ActionListHeaderColumnLayout';
export const ActionListHeaderColumn = styled(ActionListHeaderColumnLayout).withConfig({ displayName: "ActionListHeaderColumn", componentId: "sc-1kw5jif" }) `
  display: flex;
  align-items: center;
  word-break: break-all;
`;
//# sourceMappingURL=ActionListHeaderColumn.js.map