import styled from 'styled-components';
import React, { useState } from 'react';
import { ActionListHeader, generateActionListHeaderColumns, } from './ActionListHeader';
import { ActionListItemColumn } from './ActionListItemColumn';
import { ActionListRowColumns } from './ActionListRow';
import { actionListCheckboxWidth } from './ActionListCheckbox';
import { ActionListContext } from './ActionListContext';
import { ActionListHeaderColumn } from './ActionListHeader/ActionListHeaderColumn';
import { getPrimaryKeyColumnIndices, primaryKeyColumnCSS, getNumericColumnIndices, numericColumnCSS, } from './utils/actionListFormatting';
export const ActionListLayout = ({ canSelect = false, className, header = true, children, columns, itemsSelected = [], onClickRowSelect = false, onSelect, onSelectAll, onSort, }) => {
    const [allItems, setAllItems] = useState([]);
    const allSelected = !!allItems.length && allItems.every((item) => itemsSelected.includes(item))
        ? true
        : allItems.some((item) => itemsSelected.includes(item))
            ? 'mixed'
            : false;
    const addItemToAllItems = (id) => {
        !allItems.includes(id) && setAllItems([...allItems, id]);
    };
    const handleSelectAll = onSelectAll ? () => onSelectAll() : undefined;
    const context = {
        addItemToAllItems,
        allSelected,
        canSelect: !!canSelect,
        columns,
        itemsSelected,
        onClickRowSelect,
        onSelect,
        onSelectAll: handleSelectAll,
        onSort,
    };
    const actionListHeader = header === true ? (React.createElement(ActionListHeader, null, generateActionListHeaderColumns(columns))) : header === false ? null : (React.createElement(ActionListHeader, null, header));
    return (React.createElement(ActionListContext.Provider, { value: context },
        React.createElement("div", { className: className },
            actionListHeader,
            React.createElement("div", null, children))));
};
export const ActionList = styled(ActionListLayout).withConfig({ displayName: "ActionList", componentId: "sc-1sr9tfc" }) `
  ${ActionListRowColumns} {
    display: grid;
    grid-template-columns: ${(props) => props.columns.map((column) => `${column.widthPercent}%`).join(' ')};
    align-items: center;
  }

  ${ActionListItemColumn}:first-child {
    padding-left: ${({ canSelect, theme }) => canSelect ? theme.space.none : undefined};
  }

  ${ActionListHeaderColumn}:first-child {
    padding-left: ${({ canSelect, theme }) => canSelect ? theme.space.none : undefined};
  }

  ${ActionListItemColumn},
  ${ActionListHeaderColumn} {
    display: flex;
    padding: ${(props) => props.theme.space.small};
  }

  ${ActionListHeader} {
    padding-left: ${({ canSelect }) => typeof canSelect === 'object' &&
    !canSelect.all &&
    actionListCheckboxWidth};
  }

  ${(props) => numericColumnCSS(getNumericColumnIndices(props.columns))}
  ${(props) => primaryKeyColumnCSS(getPrimaryKeyColumnIndices(props.columns))}
`;
//# sourceMappingURL=ActionList.js.map