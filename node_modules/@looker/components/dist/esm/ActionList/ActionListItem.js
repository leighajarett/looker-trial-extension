import styled from 'styled-components';
import React, { useContext, useRef, useEffect } from 'react';
import { IconButton } from '../Button';
import { Menu, MenuDisclosure, MenuList } from '../Menu';
import { ActionListRow } from './ActionListRow';
import { ActionListContext } from './ActionListContext';
const ActionListItemInternal = ({ actions, children, className, disabled, id, onClick, }) => {
    const actionListItemRef = useRef(null);
    const { addItemToAllItems, canSelect, itemsSelected, onSelect, onClickRowSelect, } = useContext(ActionListContext);
    useEffect(() => {
        addItemToAllItems(id);
    }, [addItemToAllItems, id]);
    const handleOnSelect = () => onClickRowSelect && onSelect && onSelect(id);
    const handleClick = disabled
        ? undefined
        : onClickRowSelect
            ? handleOnSelect
            : onClick || undefined;
    const handleMenuClick = (event) => {
        event.stopPropagation();
    };
    const handleKeyDown = (event) => {
        const isEventFromChild = event.currentTarget !== event.target;
        if (event.keyCode === 13 && !isEventFromChild) {
            event.currentTarget.click();
        }
    };
    const itemActions = actions && (React.createElement("div", { onClick: handleMenuClick },
        React.createElement(Menu, { hoverDisclosureRef: actionListItemRef },
            React.createElement(MenuDisclosure, null,
                React.createElement(IconButton, { icon: "DotsVert", label: "Actions", size: "medium" })),
            React.createElement(MenuList, null, actions))));
    const onChange = onSelect ? () => onSelect(id) : undefined;
    return (React.createElement(ActionListRow, { className: className, secondary: itemActions, ref: actionListItemRef, onClick: handleClick, onKeyDown: handleKeyDown, tabIndex: 0, hasCheckbox: !!canSelect, onChange: onChange, checked: itemsSelected.includes(id), disabled: disabled, supportsRaised: !onClickRowSelect }, children));
};
export const ActionListItem = styled(ActionListItemInternal).withConfig({ displayName: "ActionListItem", componentId: "sc-z9mpwi" }) `
  border-bottom: solid 1px ${(props) => props.theme.colors.palette.charcoal200};
  display: flex;
`;
//# sourceMappingURL=ActionListItem.js.map