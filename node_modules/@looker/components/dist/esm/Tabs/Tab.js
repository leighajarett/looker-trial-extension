var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState } from 'react';
import { rgba } from 'polished';
import styled from 'styled-components';
import { border, layout, reset, space, typography, } from '@looker/design-tokens';
const TabStyle = styled.button.withConfig({ displayName: "TabStyle", componentId: "sc-1vvz242" }) `
  ${reset}
  border: none;

  ${border}
  ${layout}
  ${space}
  ${typography}

  background: transparent;
  border-bottom: 3px solid;
  border-bottom-color: ${(props) => props.selected ? props.theme.colors.palette.purple400 : 'transparent'};
  border-radius: 0;
  color: ${(props) => props.selected
    ? props.theme.colors.palette.charcoal800
    : props.theme.colors.palette.charcoal500};
  cursor: pointer;

  & + & {
    margin-left: ${(props) => props.theme.space.xlarge};
  }

  &:active {
    border-bottom-color: ${(props) => props.selected
    ? props.theme.colors.palette.purple400
    : props.theme.colors.palette.charcoal400};
  }

  &:active,
  &:hover {
    border-bottom-color: transparent;
  }

  &:focus {
    outline: none;
  }

  ${(props) => props.focusVisible &&
    `box-shadow: 0 0 0 0.15rem ${rgba(props.theme.colors.palette.purple300, 0.25)};`};

  &:hover {
    border-bottom-color: ${(props) => props.selected
    ? props.theme.colors.palette.purple400
    : props.theme.colors.palette.charcoal300};
  }

  &:disabled {
    cursor: default;
    color: ${(props) => props.theme.colors.palette.charcoal300};
    border-bottom-color: transparent;
  }
`;
const TabJSX = forwardRef((props, ref) => {
    const { children, disabled, onBlur, onKeyUp, onSelect } = props, restProps = __rest(props, ["children", "disabled", "onBlur", "onKeyUp", "onSelect"]);
    const [isFocusVisible, setFocusVisible] = useState(false);
    const handleOnKeyUp = (event) => {
        setFocusVisible(true);
        onKeyUp && onKeyUp(event);
    };
    const handleOnBlur = (event) => {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    const onClick = () => {
        if (!disabled && onSelect) {
            onSelect();
        }
        setFocusVisible(false);
    };
    return (React.createElement(TabStyle, Object.assign({ focusVisible: isFocusVisible, onKeyUp: handleOnKeyUp, onBlur: handleOnBlur, onClick: onClick, disabled: disabled }, restProps, { ref: ref }), children));
});
TabJSX.displayName = 'TabJSX';
export const Tab = styled(TabJSX).withConfig({ displayName: "Tab", componentId: "sc-1exl08p" }) ``;
Tab.defaultProps = {
    fontSize: 'small',
    fontWeight: 'semiBold',
    minWidth: '3rem',
    pb: 'small',
    pt: 'xsmall',
};
//# sourceMappingURL=Tab.js.map