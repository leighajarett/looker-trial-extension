var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement } from 'react';
import styled from 'styled-components';
import { flexbox, layout, space, reset, } from '@looker/design-tokens';
import omit from 'lodash/omit';
const Layout = (_a) => {
    var { children, className, selectedIndex } = _a, props = __rest(_a, ["children", "className", "selectedIndex"]);
    const tabPanelsLayoutProps = omit(props, 'onSelectTab');
    const clonedChildren = Children.map(children, (child, index) => {
        return cloneElement(child, {
            selected: index === selectedIndex,
        });
    });
    return (React.createElement("div", Object.assign({ className: className }, tabPanelsLayoutProps), clonedChildren));
};
export const TabPanels = styled(Layout).withConfig({ displayName: "TabPanels", componentId: "sc-1r5jmld" }) `
  ${reset}
  ${flexbox}
  ${layout}
  ${space}
`;
TabPanels.defaultProps = { pt: 'large' };
//# sourceMappingURL=TabPanels.js.map