var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { reset, theme } from '@looker/design-tokens';
import React, { useContext, useEffect } from 'react';
import { HotKeys } from 'react-hotkeys';
import styled, { css } from 'styled-components';
import { boxShadow, border, color, layout, } from 'styled-system';
import { ModalContext } from './ModalContext';
export const ModalSurface = (_a) => {
    var { anchor, style, className } = _a, props = __rest(_a, ["anchor", "style", "className"]);
    const { closeModal, enableFocusTrap, enableScrollLock } = useContext(ModalContext);
    useEffect(() => {
        enableScrollLock && enableScrollLock();
        const t = window.setTimeout(() => {
            enableFocusTrap && enableFocusTrap();
        }, theme.transitions.durationModerate);
        return () => {
            window.clearTimeout(t);
        };
    }, [enableFocusTrap, enableScrollLock]);
    return (React.createElement(HotKeys, { keyMap: {
            CLOSE_MODAL: {
                action: 'keyup',
                name: 'Close Modal',
                sequence: 'esc',
            },
        }, handlers: {
            CLOSE_MODAL: () => {
                closeModal && closeModal();
            },
        }, style: {
            alignItems: 'center',
            display: 'flex',
            height: '100%',
            justifyContent: anchor === 'right' ? 'flex-end' : 'center',
            width: '100%',
        } },
        React.createElement(Style, Object.assign({ className: `surface-overflow ${className}`, surfaceStyles: style }, props))));
};
const surfaceTransition = () => css `
  ${(props) => `${props.theme.transitions.durationModerate} ${props.theme.easings.ease}`}
`;
const Style = styled.div.withConfig({ displayName: "Style", componentId: "sc-1l2ixi" }) `
  ${reset}
  ${boxShadow}
  ${border}
  ${layout}

  ${color}

  display: flex;
  flex-direction: column;
  position: relative;
  transition: transform ${surfaceTransition}, opacity ${surfaceTransition};

  ${(props) => props.surfaceStyles};

  &:focus {
    outline: none;
  }
`;
Style.defaultProps = {
    backgroundColor: 'palette.white',
    borderRadius: 'medium',
    boxShadow: 3,
    color: 'palette.charcoal900',
    maxHeight: '90vh',
    maxWidth: ['90vw', '90vw', '600px'],
};
//# sourceMappingURL=ModalSurface.js.map