import React from 'react';
import styled, { css } from 'styled-components';
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import { inputHeight } from '../Inputs/InputText/InputText';
import { Label } from '../Label/Label';
import { Paragraph } from '../../Text/Paragraph';
import { Text } from '../../Text/Text';
import { ValidationMessage } from '../ValidationMessage';
import { RequiredStar } from './RequiredStar';
export const fieldPropKeys = [
    'description',
    'detail',
    'id',
    'inline',
    'label',
    'labelFontSize',
    'labelFontWeight',
    'labelWidth',
    'validationMessage',
    'width',
];
export const pickFieldProps = (props) => pick(props, [...fieldPropKeys, 'disabled', 'required', 'className']);
export const omitFieldProps = (props) => omit(props, fieldPropKeys);
const FieldLayout = ({ className, children, description, detail, id, label, labelFontSize, labelFontWeight, required, validationMessage, }) => {
    const fieldDescription = description && (React.createElement(Paragraph, { mt: "xsmall", fontSize: "xsmall", color: "palette.charcoal500" }, description));
    const fieldValidation = validationMessage && (React.createElement(ValidationMessage, Object.assign({}, validationMessage)));
    return (React.createElement("div", { className: className },
        React.createElement(Label, { fontSize: labelFontSize, fontWeight: labelFontWeight, htmlFor: id, id: `${id}-labeledby` },
            label,
            required && React.createElement(RequiredStar, null)),
        detail && React.createElement(FieldDetail, null, detail),
        React.createElement(InputArea, null, children),
        React.createElement(MessageArea, { id: `${id}-describedby` },
            fieldDescription,
            fieldValidation)));
};
const FieldDetail = styled(Text).withConfig({ displayName: "FieldDetail", componentId: "sc-l5jdo5" }) ``;
FieldDetail.defaultProps = {
    fontSize: 'xsmall',
};
const InputArea = styled.div.withConfig({ displayName: "InputArea", componentId: "sc-1q5yiwd" }) ``;
const MessageArea = styled.div.withConfig({ displayName: "MessageArea", componentId: "sc-1oz33yp" }) ``;
const fieldLabelCSS = (inline) => inline
    ? css `
        text-align: right;
        line-height: ${inputHeight};
        justify-self: end;
        height: ${inputHeight};
        padding-right: ${({ theme }) => theme.space.small};
      `
    : css `
        line-height: ${({ theme }) => theme.lineHeights.xsmall};
        padding-bottom: ${({ theme }) => theme.space.xsmall};
      `;
export const Field = styled(FieldLayout).withConfig({ displayName: "Field", componentId: "sc-1vl3olm" }) `
  height: fit-content;
  width: ${({ width }) => width || 'fit-content'};
  align-items: left;
  justify-content: space-between;

  display: grid;
  grid-template-areas: ${({ inline }) => inline
    ? '"label input detail" ". messages messages"'
    : '"label detail" "input input" "messages messages"'};
  grid-template-columns: ${({ inline, labelWidth }) => inline ? `${labelWidth} 1fr` : undefined};

  ${InputArea} {
    display: flex;
    grid-area: input;
    align-items: center;
  }

  ${MessageArea} {
    grid-area: messages;
  }

  & > ${Label} {
    grid-area: label;
    ${({ inline }) => fieldLabelCSS(inline)}
  }

  ${FieldDetail} {
    grid-area: detail;
    justify-self: end;

    ${({ inline, theme }) => inline &&
    ` align-self: center;
        padding-left: ${theme.space.small}; `}
  }

  ${ValidationMessage} {
    margin-right: ${({ theme }) => theme.space.xsmall};
    margin-top: ${({ theme }) => theme.space.xsmall};
  }
`;
Field.defaultProps = { labelWidth: '150px', width: '100%' };
//# sourceMappingURL=Field.js.map