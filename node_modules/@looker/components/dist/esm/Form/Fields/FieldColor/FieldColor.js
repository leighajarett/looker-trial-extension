var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState, forwardRef, useEffect, } from 'react';
import styled from 'styled-components';
import { useID, useWrapEvent } from '../../../utils';
import { usePopover, PopoverContent } from '../../../Popover';
import { InputText } from '../../Inputs/InputText';
import { Field, omitFieldProps, pickFieldProps } from '../Field';
import { useFormContext } from '../../Form';
import { polarbrightness2hsv, white, } from './ColorWheel/color_wheel_utils';
import { ColorWheel } from './ColorWheel';
import { LuminositySlider } from './LuminositySlider';
import { Swatch } from './Swatch';
import { hsv2hex, simpleHSVtoFormattedColorString, str2simpleHsv, } from './utils/color_format_utils';
import { isValidColor } from './utils/color_utils';
const colorWheelSize = 164;
const createEventWithHSVValue = (color) => {
    return {
        currentTarget: {
            value: typeof color === 'string'
                ? color
                : simpleHSVtoFormattedColorString(color),
        },
        target: {
            value: typeof color === 'string'
                ? color
                : simpleHSVtoFormattedColorString(color),
        },
    };
};
function getColorFromText(text) {
    const initialWhite = polarbrightness2hsv(white());
    return text && isValidColor(text) ? str2simpleHsv(text) : initialWhite;
}
export const FieldColorComponent = forwardRef((_a, ref) => {
    var { hideInput, id, onChange, onFocus, onBlur, value, defaultValue } = _a, props = __rest(_a, ["hideInput", "id", "onChange", "onFocus", "onBlur", "value", "defaultValue"]);
    const inputID = useID(id);
    const validationMessage = useFormContext(props);
    const initialWhite = polarbrightness2hsv(white());
    const initialColor = getColorFromText(value || defaultValue);
    const [color, setColor] = useState(initialColor);
    const [inputTextValue, setInputTextValue] = useState(value || defaultValue || '');
    const [isFocused, setIsFocused] = useState(false);
    const handleFocus = () => setIsFocused(true);
    const handleBlur = () => setIsFocused(false);
    const wrappedOnFocus = useWrapEvent(handleFocus, onFocus);
    const wrappedOnBlur = useWrapEvent(handleBlur, onBlur);
    useEffect(() => {
        if (value && value !== inputTextValue) {
            setColor(str2simpleHsv(value));
            !isFocused && setInputTextValue(value);
        }
    }, [isFocused, value, inputTextValue]);
    const callOnChange = (newColor) => {
        if (!onChange || !newColor)
            return;
        onChange(createEventWithHSVValue(newColor));
    };
    const setColorState = (newColor) => {
        setColor(newColor);
        newColor && setInputTextValue(simpleHSVtoFormattedColorString(newColor));
        callOnChange(newColor);
    };
    const handleColorChange = (hs) => setColorState(Object.assign(Object.assign({}, hs), { v: color.v }));
    const handleSliderChange = (event) => setColorState(Object.assign(Object.assign({}, color), { v: Number(event.currentTarget.value) / 100 }));
    const handleInputTextChange = (event) => {
        const newValue = event.currentTarget.value;
        setInputTextValue(newValue);
        const isValid = isValidColor(newValue);
        callOnChange(isValid ? newValue : initialWhite);
        setColor(getColorFromText(event.currentTarget.value));
    };
    const content = (React.createElement(PopoverContent, { display: "flex", flexDirection: "column" },
        React.createElement(ColorWheel, { size: colorWheelSize, hue: color.h, saturation: color.s, value: color.v, onColorChange: handleColorChange }),
        React.createElement(LuminositySlider, { min: 0, max: 100, step: 1, value: color.v * 100, width: colorWheelSize, onChange: handleSliderChange })));
    const { open, popover, ref: triggerRef } = usePopover({ content });
    return (React.createElement(Field, Object.assign({}, pickFieldProps(props), { id: inputID, validationMessage: validationMessage }),
        React.createElement(Swatch, { ref: triggerRef, color: hsv2hex(color), borderRadius: hideInput ? 'medium' : 'none', borderTopLeftRadius: "medium", borderBottomLeftRadius: "medium", border: "1px solid", borderRight: hideInput ? undefined : 'none', disabled: props.disabled, onClick: open }),
        !props.disabled && popover,
        !hideInput && (React.createElement(InputText, Object.assign({}, omitFieldProps(props), { "aria-describedby": `${id}-describedby`, id: inputID, ref: ref, borderRadius: "none", borderTopRightRadius: "medium", borderBottomRightRadius: "medium", validationType: validationMessage && validationMessage.type, onChange: handleInputTextChange, value: inputTextValue, onFocus: wrappedOnFocus, onBlur: wrappedOnBlur })))));
});
FieldColorComponent.displayName = 'FieldColorComponent';
export const FieldColor = styled(FieldColorComponent).withConfig({ displayName: "FieldColor", componentId: "sc-sus44v" }) ``;
//# sourceMappingURL=FieldColor.js.map