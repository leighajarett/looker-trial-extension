import React from 'react';
import styled from 'styled-components';
import { Label } from '../Label/Label';
import { ValidationMessage } from '../ValidationMessage/ValidationMessage';
import { RequiredStar } from './RequiredStar';
const FieldInlineLayout = ({ className, children, label, labelFontSize, id, required, validationMessage, }) => {
    return (React.createElement("label", { className: className, htmlFor: id },
        React.createElement(Label, { as: "span", fontSize: labelFontSize },
            label,
            required && React.createElement(RequiredStar, null)),
        React.createElement(InputArea, null, children),
        React.createElement(MessageArea, { id: `${id}-describedby` }, validationMessage ? (React.createElement(ValidationMessage, Object.assign({}, validationMessage))) : null)));
};
const InputArea = styled.div.withConfig({ displayName: "InputArea", componentId: "sc-1i2och3" }) ``;
const MessageArea = styled.div.withConfig({ displayName: "MessageArea", componentId: "sc-14b9q2" }) ``;
export const FieldInline = styled(FieldInlineLayout).withConfig({ displayName: "FieldInline", componentId: "sc-ry3fzk" }) `
  align-items: center;
  display: grid;
  grid-template-areas: 'input label' '. messages';
  grid-template-columns: repeat(3, max-content);
  line-height: ${({ theme }) => theme.lineHeights.small};

  ${InputArea} {
    grid-area: input;
  }

  ${Label} {
    color: ${({ theme, disabled }) => disabled && theme.colors.palette.charcoal500};
    font-size: ${({ theme }) => theme.fontSizes.small};
    font-weight: normal;
    grid-area: label;
    padding-left: ${({ theme }) => theme.space.xsmall};
  }

  ${MessageArea} {
    grid-area: messages;
    padding-left: ${({ theme }) => theme.space.small};
  }
`;
//# sourceMappingURL=FieldInline.js.map