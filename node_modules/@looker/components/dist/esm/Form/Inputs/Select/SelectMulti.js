var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { ComboboxMulti, ComboboxMultiInput, ComboboxMultiList, } from '../Combobox';
import { SelectOptions, } from './SelectOptions';
import { getOptions } from './utils/options';
import { useShouldWindowOptions } from './utils/useWindowedOptions';
const SelectMultiComponent = forwardRef((_a, ref) => {
    var { options, disabled, isFilterable = false, placeholder, onFilter, onChange, values, defaultValues, noOptionsLabel, 'aria-describedby': ariaDescribedby, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, validationType, windowedOptions: windowedOptionsProp, closeOnSelect = false, showCreate = false, formatCreateLabel, removeOnBackspace = true } = _a, props = __rest(_a, ["options", "disabled", "isFilterable", "placeholder", "onFilter", "onChange", "values", "defaultValues", "noOptionsLabel", 'aria-describedby', 'aria-label', 'aria-labelledby', "validationType", "windowedOptions", "closeOnSelect", "showCreate", "formatCreateLabel", "removeOnBackspace"]);
    const optionValues = getOptions(values, options);
    const defaultOptionValues = getOptions(defaultValues, options);
    function handleChange(options) {
        const newValues = options && options.map((option) => option.value);
        onChange && onChange(newValues);
        onFilter && onFilter('');
    }
    function handleInputChange(value) {
        onFilter && onFilter(value);
    }
    function handleClose() {
        onFilter && onFilter('');
    }
    const ariaProps = {
        'aria-describedby': ariaDescribedby,
        'aria-invalid': validationType === 'error',
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby,
    };
    const inputProps = Object.assign({ disabled,
        placeholder,
        validationType }, (removeOnBackspace
        ? {}
        : {
            onKeyDown: (e) => {
                if (e.currentTarget.value === '' && e.key === 'Backspace') {
                    e.preventDefault();
                }
            },
        }));
    const windowedOptions = useShouldWindowOptions(options, windowedOptionsProp);
    return (React.createElement(ComboboxMulti, Object.assign({}, props, { values: optionValues, defaultValues: defaultOptionValues, onChange: handleChange, onClose: handleClose }),
        React.createElement(ComboboxMultiInput, Object.assign({}, inputProps, ariaProps, { autoComplete: false, readOnly: !isFilterable, onInputChange: handleInputChange, selectOnClick: isFilterable, ref: ref })),
        !disabled && (React.createElement(ComboboxMultiList, Object.assign({ persistSelection: true, closeOnSelect: closeOnSelect, windowedOptions: windowedOptions }, ariaProps),
            React.createElement(SelectOptions, { isMulti: true, options: options, windowedOptions: windowedOptions, isFilterable: isFilterable, noOptionsLabel: noOptionsLabel, showCreate: showCreate, formatCreateLabel: formatCreateLabel })))));
});
SelectMultiComponent.displayName = 'SelectMultiComponent';
export const SelectMulti = styled(SelectMultiComponent).withConfig({ displayName: "SelectMulti", componentId: "sc-1iles8u" }) ``;
//# sourceMappingURL=SelectMulti.js.map