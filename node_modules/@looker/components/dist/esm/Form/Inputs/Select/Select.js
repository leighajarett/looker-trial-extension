var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Combobox, ComboboxInput, ComboboxList, } from '../Combobox';
import { SelectOptions, } from './SelectOptions';
import { getOption, getFirstOption } from './utils/options';
import { useShouldWindowOptions } from './utils/useWindowedOptions';
const SelectComponent = forwardRef((_a, ref) => {
    var { options, disabled, isFilterable, isClearable, placeholder, onFilter, onChange, value, defaultValue, noOptionsLabel, 'aria-describedby': ariaDescribedby, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, validationType, windowedOptions: windowedOptionsProp } = _a, props = __rest(_a, ["options", "disabled", "isFilterable", "isClearable", "placeholder", "onFilter", "onChange", "value", "defaultValue", "noOptionsLabel", 'aria-describedby', 'aria-label', 'aria-labelledby', "validationType", "windowedOptions"]);
    const optionValue = getOption(value, options);
    const nullDefault = (isClearable || placeholder) && !defaultValue;
    const defaultOptionValue = nullDefault
        ? undefined
        : getOption(defaultValue, options) || (options && getFirstOption(options));
    function handleChange(option) {
        const newValue = option ? option.value : '';
        onChange && onChange(newValue);
        onFilter && onFilter('');
    }
    function handleInputChange(e) {
        onFilter && onFilter(e.currentTarget.value);
    }
    function handleClose() {
        onFilter && onFilter('');
    }
    const ariaProps = {
        'aria-describedby': ariaDescribedby,
        'aria-invalid': validationType === 'error',
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby,
    };
    const inputProps = {
        disabled,
        placeholder,
        validationType,
    };
    const windowedOptions = useShouldWindowOptions(options, windowedOptionsProp);
    return (React.createElement(Combobox, Object.assign({}, props, { value: optionValue, defaultValue: defaultOptionValue, onChange: handleChange, onClose: handleClose }),
        React.createElement(ComboboxInput, Object.assign({}, inputProps, ariaProps, { autoComplete: false, readOnly: !isFilterable, onChange: handleInputChange, hideControls: !isClearable, selectOnClick: isFilterable, ref: ref })),
        !disabled && (React.createElement(ComboboxList, Object.assign({ persistSelection: true, windowedOptions: windowedOptions }, ariaProps),
            React.createElement(SelectOptions, { options: options, windowedOptions: windowedOptions, noOptionsLabel: noOptionsLabel })))));
});
SelectComponent.displayName = 'SelectComponent';
export const Select = styled(SelectComponent).withConfig({ displayName: "Select", componentId: "sc-1doyw8e" }) ``;
Select.defaultProps = { width: '100%' };
//# sourceMappingURL=Select.js.map