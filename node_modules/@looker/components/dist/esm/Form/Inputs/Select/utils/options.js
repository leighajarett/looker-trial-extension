import { getComboboxText } from '../../Combobox';
export function flattenOptions(options) {
    return options.reduce((acc, option) => {
        const optionAsGroup = option;
        if (optionAsGroup.options) {
            return [...acc, ...optionAsGroup.options];
        }
        return [...acc, option];
    }, []);
}
export function getOption(value, options) {
    const flattenedOptions = options && flattenOptions(options);
    return value
        ? { label: getComboboxText(value, flattenedOptions), value }
        : undefined;
}
export function getOptions(values, options) {
    if (!values)
        return undefined;
    const flattenedOptions = options && flattenOptions(options);
    return values.map((value) => ({
        label: getComboboxText(value, flattenedOptions),
        value,
    }));
}
export function compareOption(option, value) {
    return getComboboxText(option).toLowerCase() === value.toLowerCase();
}
export function getFirstOption(options) {
    const optionAsGroup = options[0];
    if (optionAsGroup && optionAsGroup.options)
        return optionAsGroup.options[0];
    return options[0];
}
export function notInOptions(currentOptions, options, inputValue) {
    if (!inputValue)
        return false;
    if (currentOptions.find((option) => compareOption(option, inputValue))) {
        return false;
    }
    if (!options)
        return true;
    return (flattenOptions(options).find((option) => compareOption(option, inputValue)) === undefined);
}
//# sourceMappingURL=options.js.map