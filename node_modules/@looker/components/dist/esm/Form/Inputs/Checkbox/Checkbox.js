var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import noop from 'lodash/noop';
import pick from 'lodash/pick';
import React, { forwardRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import isUndefined from 'lodash/isUndefined';
import { inputPropKeys } from '../InputProps';
import { inputTextValidation } from '../InputText';
import { CheckMark } from './CheckMark';
import { CheckMarkMixed } from './CheckMarkMixed';
import { FauxCheckbox } from './FauxCheckbox';
const CheckboxLayout = forwardRef((props, ref) => {
    const { className, checked, defaultChecked, onChange, readOnly, validationType } = props, restProps = __rest(props, ["className", "checked", "defaultChecked", "onChange", "readOnly", "validationType"]);
    const [isChecked, setIsChecked] = useState(!!defaultChecked);
    const handleClick = readOnly
        ? undefined
        : (e) => {
            if (isUndefined(checked)) {
                setIsChecked(!isChecked);
            }
            if (onChange) {
                onChange(e);
            }
        };
    useEffect(() => {
        if (!isUndefined(checked)) {
            setIsChecked(checked);
        }
    }, [checked]);
    return (React.createElement("div", { className: className },
        React.createElement("input", Object.assign({ type: "checkbox" }, pick(restProps, inputPropKeys), { checked: !!isChecked, "aria-checked": checked, "aria-invalid": validationType === 'error' ? 'true' : undefined, onClick: handleClick, onChange: noop, ref: ref })),
        React.createElement(FauxCheckbox, null, checked === 'mixed' ? React.createElement(CheckMarkMixed, null) : React.createElement(CheckMark, null))));
});
CheckboxLayout.displayName = 'CheckboxLayout';
export const Checkbox = styled(CheckboxLayout).withConfig({ displayName: "Checkbox", componentId: "sc-1ifxiz6" }) `
  ${reset}
  ${space}

  height: 1rem;
  position: relative;
  width: 1rem;

  input {
    cursor: ${({ readOnly, disabled }) => readOnly || disabled ? 'not-allowed' : undefined};
    height: 100%;
    opacity: 0;
    position: absolute;
    width: 100%;
    z-index: 1;
  }

  input + ${FauxCheckbox} {
    ${inputTextValidation};
  }

  input:checked + ${FauxCheckbox} {
    background-color: ${({ theme }) => theme.colors.palette.purple400};
    border-color: ${({ theme }) => theme.colors.palette.purple400};
  }

  input:not(:checked) + ${FauxCheckbox} {
    color: ${({ theme }) => theme.colors.palette.white};
  }

  input:focus + ${FauxCheckbox} {
    border-color: ${({ theme }) => theme.colors.palette.purple300};
    box-shadow: 0 0 0 2px ${({ theme }) => theme.colors.palette.purple100};
    outline: none;
  }

  input:disabled + ${FauxCheckbox} {
    background: transparent;
    border-color: ${({ theme }) => theme.colors.palette.charcoal200};
    color: ${({ theme }) => theme.colors.palette.charcoal400};
  }

  input:disabled:not(:checked) + ${FauxCheckbox} {
    color: transparent;
  }
`;
//# sourceMappingURL=Checkbox.js.map