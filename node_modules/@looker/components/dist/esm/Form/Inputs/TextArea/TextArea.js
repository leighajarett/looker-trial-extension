var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import pick from 'lodash/pick';
import React from 'react';
import styled from 'styled-components';
import { layout, space, typography, } from '@looker/design-tokens';
import { inputTextHover, inputTextFocus, inputTextDisabled, inputTextValidation, } from '../InputText';
import { Icon } from '../../../Icon';
import { inputPropKeys } from '../InputProps';
const TextAreaLayout = (_a) => {
    var { className, validationType } = _a, props = __rest(_a, ["className", "validationType"]);
    const textareaProps = pick(props, inputPropKeys);
    return (React.createElement("div", { className: className },
        React.createElement("textarea", Object.assign({ "aria-invalid": validationType === 'error' ? 'true' : undefined }, textareaProps)),
        validationType && React.createElement(Icon, { name: "Warning", color: "palette.red500" })));
};
const TextAreaResize = (resize) => resize === false ? 'none' : resize === true ? 'vertical' : resize;
export const TextArea = styled(TextAreaLayout).withConfig({ displayName: "TextArea", componentId: "sc-g658lj" }) `
  height: fit-content;
  position: relative;
  width: 100%;

  ${Icon} {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
  }

  textarea {
    ${layout}
    ${space}
    ${typography}

    resize: ${(props) => TextAreaResize(props.resize)};
    border: solid 1px;
    width: 100%;

    border-color: ${(props) => props.theme.colors.palette.charcoal200};
    border-radius: ${(props) => props.theme.radii.medium};
    font-size: ${(props) => props.theme.fontSizes.small};
    min-height: 6.25rem;
    padding: ${({ theme }) => `${theme.space.xsmall} ${theme.space.small}`};
    padding-right: ${(props) => props.theme.space.xlarge};

    &:hover {
      ${inputTextHover}
    }
    &:focus,
    :focus-within {
      ${inputTextFocus}
    }

    ${(props) => (props.disabled ? inputTextDisabled : '')}

    ${inputTextValidation}
  }
`;
TextArea.defaultProps = {
    height: '6.25rem',
    resize: 'vertical',
    width: '100%',
};
TextArea.displayName = 'TextArea';
//# sourceMappingURL=TextArea.js.map