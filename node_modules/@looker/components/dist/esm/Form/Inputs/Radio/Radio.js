var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import pick from 'lodash/pick';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import { inputPropKeys } from '../InputProps';
import { FauxRadio } from './FauxRadio';
const RadioLayout = forwardRef((props, ref) => {
    const { className } = props, restProps = __rest(props, ["className"]);
    return (React.createElement("div", { className: className },
        React.createElement("input", Object.assign({ type: "radio" }, pick(restProps, inputPropKeys), { ref: ref })),
        React.createElement(FauxRadio, null)));
});
RadioLayout.displayName = 'RadioLayout';
export const Radio = styled(RadioLayout).withConfig({ displayName: "Radio", componentId: "sc-zoz6yw" }) `
  ${reset}
  ${space}

  height: 1rem;
  position: relative;
  width: 1rem;
  input {
    background: ${(props) => props.theme.colors.palette.white};
    cursor: ${({ readOnly, disabled }) => readOnly || disabled ? 'not-allowed' : undefined};
    height: 100%;
    opacity: 0;
    position: absolute;
    width: 100%;
    z-index: 1;
  }

  input:checked + ${FauxRadio} {
    color: ${({ theme }) => theme.colors.palette.purple400};
  }

  input:not(:checked) + ${FauxRadio} {
    border-color: ${({ theme }) => theme.colors.palette.charcoal200};
    background: ${({ theme }) => theme.colors.palette.white};
  }

  input:focus + ${FauxRadio} {
    border-color: ${(props) => props.theme.colors.palette.purple300};
    box-shadow: 0 0 0 2px ${(props) => props.theme.colors.palette.purple100};
    outline: none;
  }

  input:disabled + ${FauxRadio} {
    color: ${({ theme }) => theme.colors.palette.charcoal400};
  }

  input:disabled:not(:checked) + ${FauxRadio} {
    background: transparent;

    &::after {
      background: transparent;
    }
  }
`;
//# sourceMappingURL=Radio.js.map