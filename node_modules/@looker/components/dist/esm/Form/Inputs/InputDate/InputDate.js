import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import isFunction from 'lodash/isFunction';
import isEqual from 'lodash/isEqual';
import { InputText } from '../InputText';
import { Calendar } from '../../../Calendar';
import { Locales, formatDateString, parseDateFromString, useReadOnlyWarn, } from '../../../utils';
const isDateInView = (value, viewMonth) => {
    if (!value) {
        return false;
    }
    if (value.getFullYear() === viewMonth.getFullYear() &&
        value.getMonth() === viewMonth.getMonth()) {
        return true;
    }
    return false;
};
export const InputDate = ({ onChange, defaultValue, locale = Locales.English, validationType, onValidationFail, value, }) => {
    useReadOnlyWarn('InputDate', value, onChange);
    const [selectedDate, setSelectedDate] = useState(value || defaultValue);
    const [validDate, setValidDate] = useState(validationType !== 'error');
    const [textInputValue, setTextInputValue] = useState(selectedDate ? formatDateString(selectedDate, locale) : '');
    const [viewMonth, setViewMonth] = useState(defaultValue || new Date(Date.now()));
    const handleDateChange = (date) => {
        setValidDate(true);
        setSelectedDate(date);
        setViewMonth(date);
        if (isFunction(onChange)) {
            onChange(date);
        }
    };
    const handleDayClick = (date) => {
        setTextInputValue(formatDateString(date, locale));
        handleDateChange(date);
    };
    const handleTextInputChange = (e) => {
        const value = e.target.value;
        setTextInputValue(value);
        if (value.length === 0) {
            handleDateChange();
        }
        else {
            const parsedValue = parseDateFromString(value, locale);
            if (parsedValue) {
                handleDateChange(parsedValue);
            }
        }
    };
    const handleValidation = (e) => {
        const value = e.target.value;
        const isValid = value.length === 0 || !!parseDateFromString(value, locale);
        setValidDate(isValid);
        if (!isValid && isFunction(onValidationFail)) {
            onValidationFail(value);
        }
    };
    const handleNavClick = (month) => {
        setViewMonth(month);
    };
    const renderedValidationType = !validDate ? 'error' : undefined;
    useEffect(() => {
        if (value && !isEqual(value, selectedDate)) {
            setSelectedDate(value);
            value && setTextInputValue(formatDateString(value, locale));
            value &&
                viewMonth &&
                !isDateInView(value, viewMonth) &&
                setViewMonth(value);
        }
    }, [textInputValue, value, onChange]);
    return (React.createElement(InputDateWrapper, null,
        React.createElement(InputTextWrapper, null,
            React.createElement(InputText, { placeholder: `Date (${formatDateString(new Date(Date.now()), locale)})`, value: textInputValue, onChange: handleTextInputChange, validationType: renderedValidationType, onBlur: handleValidation, "data-testid": "text-input" })),
        React.createElement(CalendarWrapper, null,
            React.createElement(Calendar, { selectedDates: selectedDate, onDayClick: handleDayClick, locale: locale, viewMonth: viewMonth, onNowClick: handleNavClick, onNextClick: handleNavClick, onPrevClick: handleNavClick }))));
};
const InputDateWrapper = styled.div.withConfig({ displayName: "InputDateWrapper", componentId: "sc-kwvw1p" }) `
  display: inline-block;
`;
const InputTextWrapper = styled.div.withConfig({ displayName: "InputTextWrapper", componentId: "sc-mhsy30" }) `
  padding: ${({ theme }) => theme.space.small};
  ${InputText} {
    width: 100%;
  }
`;
const CalendarWrapper = styled.div.withConfig({ displayName: "CalendarWrapper", componentId: "sc-1hev99p" }) `
  ${Calendar} {
    padding: 0;
  }
`;
//# sourceMappingURL=InputDate.js.map