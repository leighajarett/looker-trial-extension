var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import pick from 'lodash/pick';
import React, { forwardRef } from 'react';
import isFunction from 'lodash/isFunction';
import styled from 'styled-components';
import { typography } from '@looker/design-tokens';
import { inputPropKeys } from '../InputProps';
export const InlineInputTextInternal = forwardRef((_a, ref) => {
    var { className, onChange, underlineOnlyOnHover, value: valueProp, placeholder } = _a, props = __rest(_a, ["className", "onChange", "underlineOnlyOnHover", "value", "placeholder"]);
    const [value, setValueChange] = React.useState(valueProp || '');
    const displayValue = isFunction(onChange) ? valueProp : value;
    const handleValueChange = (event) => {
        setValueChange(event.currentTarget.value);
    };
    const handleChange = isFunction(onChange) ? onChange : handleValueChange;
    return (React.createElement("div", { className: className, "data-testid": "inlineInputText" },
        React.createElement(Input, Object.assign({ onChange: handleChange, underlineOnlyOnHover: underlineOnlyOnHover, value: displayValue, ref: ref }, pick(props, inputPropKeys))),
        React.createElement(VisibleText, { displayValue: displayValue }, displayValue || placeholder)));
});
InlineInputTextInternal.displayName = 'InlineInputTextInternal';
const Input = styled.input.attrs({ type: 'text' }).withConfig({ displayName: "Input", componentId: "sc-19i2cyc" }) `
  background: transparent;
  border: none;
  color: transparent;
  font: inherit;
  caret-color: ${(props) => props.theme.colors.palette.charcoal900};
  height: 100%;
  left: 0;
  outline: none;
  padding: 0;
  position: absolute;
  text-transform: inherit;
  top: 0;
  width: 100%;
`;
const VisibleText = styled.div.withConfig({ displayName: "VisibleText", componentId: "sc-1ry5o74" }) `
  color: ${({ displayValue, theme }) => displayValue
    ? theme.colors.palette.charcoal900
    : theme.colors.palette.charcoal400};
`;
export const InlineInputText = styled(InlineInputTextInternal).withConfig({ displayName: "InlineInputText", componentId: "sc-aoxz2y" }) `
  ${typography}

  border: none;
  border-bottom: 1px dashed;
  border-bottom-color: ${(props) => props.underlineOnlyOnHover
    ? 'transparent'
    : props.theme.colors.palette.charcoal300};
  display: inline-flex;
  flex-direction: column;
  justify-content: center;
  position: relative;
  min-width: 2rem;
  min-height: ${(props) => props.theme.lineHeights.medium};

  :focus,
  :hover {
    outline: none;
    border-bottom-color: ${(props) => props.theme.colors.palette.purple400};
    background-color: ${(props) => props.theme.colors.palette.charcoal100};
  }

  :focus {
    border-bottom-style: solid;
  }
`;
//# sourceMappingURL=InlineInputText.js.map