var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Chip } from '../../../Chip';
import { Flex } from '../../../Layout';
import { InputText } from '../InputText';
import { InputSearch, InputSearchControls, } from '../InputSearch';
export const InputChipsBaseInternal = forwardRef((_a, ref) => {
    var { values, onChange, onKeyDown, inputValue, onInputChange } = _a, props = __rest(_a, ["values", "onChange", "onKeyDown", "inputValue", "onInputChange"]);
    function handleDeleteChip(value) {
        const newValues = values.filter((v) => value !== v);
        onChange(newValues);
    }
    function handleKeyDown(e) {
        onKeyDown && onKeyDown(e);
        if (e.key === 'Backspace' && !e.defaultPrevented) {
            inputValue === '' && handleDeleteChip(values[values.length - 1]);
        }
    }
    function handleClear() {
        onChange([]);
        onInputChange('');
    }
    const chips = values.map((value) => {
        function onChipDelete() {
            handleDeleteChip(value);
        }
        return (React.createElement(Chip, { onDelete: onChipDelete, key: value, mb: 1, mt: 1, ml: "xxsmall" }, value));
    });
    function handleInputChange(e) {
        onInputChange(e.currentTarget.value);
    }
    return (React.createElement(InputSearch, Object.assign({ hideSearchIcon: true, ref: ref, value: inputValue, onChange: handleInputChange, onKeyDown: handleKeyDown, showClear: values.length > 0, onClear: handleClear }, props), chips));
});
InputChipsBaseInternal.displayName = 'InputChipsBaseInternal';
export const InputChipsBase = styled(InputChipsBaseInternal).withConfig({ displayName: "InputChipsBase", componentId: "sc-tjydpe" }) `
  position: relative;
  align-items: stretch;

  ${Flex} {
    flex: 1;
    overflow: auto;
    padding-right: ${(props) => props.theme.space.xlarge};
  }

  ${InputText} {
    width: auto;
    min-width: 25%;
    padding-right: 0;
  }

  ${InputSearchControls} {
    position: absolute;
    top: 2px;
    right: 0;
  }
`;
//# sourceMappingURL=InputChipsBase.js.map