var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useID } from '../../../utils';
import { Box } from '../../../Layout';
import { useFocusManagement } from './utils/useFocusManagement';
import { useReducerMachine, ComboboxActionType } from './utils/state';
import { ComboboxContext, defaultData } from './ComboboxContext';
import { getComboboxText } from './utils/getComboboxText';
import { useComboboxRefs } from './utils/useComboboxRefs';
import { useComboboxToggle } from './utils/useComboboxToggle';
import { useScrollState } from './utils/useScrollState';
export const ComboboxInternal = forwardRef((_a, forwardedRef) => {
    var { openOnFocus = false, onChange, value, defaultValue, onClose, onOpen, id: propsID } = _a, rest = __rest(_a, ["openOnFocus", "onChange", "value", "defaultValue", "onClose", "onOpen", "id"]);
    const initialValue = value || defaultValue;
    const initialData = initialValue
        ? { inputValue: getComboboxText(initialValue), option: initialValue }
        : {};
    const [state, data, transition] = useReducerMachine(Object.assign(Object.assign({}, defaultData), initialData));
    const { lastActionType, option } = data;
    if (value !== undefined && (!option || option.value !== value.value)) {
        transition &&
            transition(ComboboxActionType.SELECT_SILENT, {
                option: value,
            });
    }
    const focusManagement = useFocusManagement(lastActionType);
    const id = useID(propsID);
    const isVisible = useComboboxToggle(state, option, onOpen, onClose);
    const _b = useComboboxRefs(forwardedRef), { ref } = _b, commonRefs = __rest(_b, ["ref"]);
    const scrollState = useScrollState();
    const context = Object.assign(Object.assign(Object.assign(Object.assign({}, commonRefs), focusManagement), scrollState), { data,
        id,
        isVisible,
        onChange,
        openOnFocus,
        state,
        transition });
    return (React.createElement(ComboboxContext.Provider, { value: context },
        React.createElement(ComboboxWrapper, Object.assign({ id: id }, rest, { isVisible: isVisible, ref: ref }))));
});
ComboboxInternal.displayName = 'ComboboxInternal';
export const ComboboxWrapper = forwardRef((_a, ref) => {
    var { isVisible } = _a, rest = __rest(_a, ["isVisible"]);
    return (React.createElement(Box, Object.assign({}, rest, { ref: ref, role: "combobox", "aria-haspopup": "listbox", "aria-owns": `listbox-${rest.id}`, "aria-expanded": isVisible })));
});
ComboboxWrapper.displayName = 'ComboboxWrapper';
export const Combobox = styled(ComboboxInternal).withConfig({ displayName: "Combobox", componentId: "sc-e97j8r" }) ``;
Combobox.defaultProps = {
    display: 'flex',
};
//# sourceMappingURL=Combobox.js.map