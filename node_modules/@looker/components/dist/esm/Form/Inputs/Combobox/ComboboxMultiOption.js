var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useForkedRef } from '../../../utils';
import { Checkbox } from '../Checkbox';
import { ComboboxMultiContext, } from './ComboboxContext';
import { comboboxOptionDefaultProps, ComboboxOptionDetail, comboboxOptionStyle, ComboboxOptionWrapper, ComboboxOptionText, } from './ComboboxOption';
import { useAddOptionToContext } from './utils/useAddOptionToContext';
import { useOptionEvents } from './utils/useOptionEvents';
import { useOptionStatus } from './utils/useOptionStatus';
import { useOptionScroll } from './utils/useOptionScroll';
const ComboboxMultiOptionInternal = forwardRef((_a, forwardedRef) => {
    var { children, highlightText = true, scrollIntoView, hideCheckMark } = _a, props = __rest(_a, ["children", "highlightText", "scrollIntoView", "hideCheckMark"]);
    const { label, value } = props;
    useAddOptionToContext(ComboboxMultiContext, value, label, scrollIntoView);
    const optionEvents = useOptionEvents(props, ComboboxMultiContext);
    const { isActive, isSelected } = useOptionStatus(ComboboxMultiContext, value);
    const scrollRef = useOptionScroll(ComboboxMultiContext, value, label, scrollIntoView, isActive);
    const ref = useForkedRef(scrollRef, forwardedRef);
    return (React.createElement(ComboboxOptionWrapper, Object.assign({}, props, optionEvents, { ref: ref, "aria-selected": isActive }),
        React.createElement(ComboboxOptionDetail, null, !hideCheckMark && React.createElement(Checkbox, { checked: isSelected })),
        children || React.createElement(ComboboxOptionText, { highlightText: highlightText })));
});
ComboboxMultiOptionInternal.displayName = 'ComboboxMultiOptionInternal';
export const ComboboxMultiOption = styled(ComboboxMultiOptionInternal).withConfig({ displayName: "ComboboxMultiOption", componentId: "sc-13i7vbd" }) `
  ${comboboxOptionStyle}
  grid-template-columns: ${(props) => props.hideCheckMark ? 0 : props.theme.space.xlarge} 1fr;
`;
ComboboxMultiOption.defaultProps = Object.assign({}, comboboxOptionDefaultProps);
//# sourceMappingURL=ComboboxMultiOption.js.map