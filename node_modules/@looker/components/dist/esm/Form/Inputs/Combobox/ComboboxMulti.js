var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import every from 'lodash/every';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useID } from '../../../utils';
import { useFocusManagement } from './utils/useFocusManagement';
import { useReducerMultiMachine, ComboboxActionType, } from './utils/state';
import { ComboboxMultiContext, defaultMultiData } from './ComboboxContext';
import { ComboboxWrapper, } from './Combobox';
import { useComboboxRefs } from './utils/useComboboxRefs';
import { useComboboxToggle } from './utils/useComboboxToggle';
import { useScrollState } from './utils/useScrollState';
function compareOptions(optionsA, optionsB, compare) {
    return compare(optionsA, (optionA) => optionsB.find((optionB) => optionA.value === optionB.value));
}
export const ComboboxMultiInternal = forwardRef((_a, forwardedRef) => {
    var { openOnFocus = false, onChange, values, defaultValues, onClose, onOpen, id: propsID } = _a, rest = __rest(_a, ["openOnFocus", "onChange", "values", "defaultValues", "onClose", "onOpen", "id"]);
    const initialValues = values || defaultValues;
    const initialData = {
        options: initialValues || [],
    };
    const [state, data, transition] = useReducerMultiMachine(Object.assign(Object.assign({}, defaultMultiData), initialData));
    const { lastActionType, options } = data;
    if (values !== undefined &&
        (options.length !== values.length ||
            !compareOptions(options, values, every))) {
        transition &&
            transition(ComboboxActionType.SELECT_SILENT, {
                options: values,
            });
    }
    const focusManagement = useFocusManagement(lastActionType);
    const id = useID(propsID);
    const isVisible = useComboboxToggle(state, options, onOpen, onClose);
    const _b = useComboboxRefs(forwardedRef), { ref } = _b, commonRefs = __rest(_b, ["ref"]);
    const scrollState = useScrollState();
    const context = Object.assign(Object.assign(Object.assign(Object.assign({}, commonRefs), focusManagement), scrollState), { data,
        id,
        isVisible,
        onChange,
        openOnFocus,
        state,
        transition });
    return (React.createElement(ComboboxMultiContext.Provider, { value: context },
        React.createElement(ComboboxWrapper, Object.assign({ id: id }, rest, { isVisible: isVisible, ref: ref }))));
});
ComboboxMultiInternal.displayName = 'ComboboxMultiInternal';
export const ComboboxMulti = styled(ComboboxMultiInternal).withConfig({ displayName: "ComboboxMulti", componentId: "sc-172z9fw" }) ``;
ComboboxMulti.defaultProps = {
    display: 'flex',
};
//# sourceMappingURL=ComboboxMulti.js.map