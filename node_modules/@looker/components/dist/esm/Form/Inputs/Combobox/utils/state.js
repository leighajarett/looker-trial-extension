import xorWith from 'lodash/xorWith';
import { useReducer, useState } from 'react';
import { getComboboxText } from './getComboboxText';
export var ComboboxState;
(function (ComboboxState) {
    ComboboxState["IDLE"] = "IDLE";
    ComboboxState["SUGGESTING"] = "SUGGESTING";
    ComboboxState["NAVIGATING"] = "NAVIGATING";
    ComboboxState["INTERACTING"] = "INTERACTING";
})(ComboboxState || (ComboboxState = {}));
export var ComboboxActionType;
(function (ComboboxActionType) {
    ComboboxActionType["CLEAR"] = "CLEAR";
    ComboboxActionType["CHANGE"] = "CHANGE";
    ComboboxActionType["CHANGE_SILENT"] = "CHANGE_SILENT";
    ComboboxActionType["CHANGE_VALUES"] = "CHANGE_VALUES";
    ComboboxActionType["NAVIGATE"] = "NAVIGATE";
    ComboboxActionType["SELECT_WITH_KEYBOARD"] = "SELECT_WITH_KEYBOARD";
    ComboboxActionType["SELECT_WITH_CLICK"] = "SELECT_WITH_CLICK";
    ComboboxActionType["SELECT_SILENT"] = "SELECT_SILENT";
    ComboboxActionType["ESCAPE"] = "ESCAPE";
    ComboboxActionType["BLUR"] = "BLUR";
    ComboboxActionType["INTERACT"] = "INTERACT";
    ComboboxActionType["FOCUS"] = "FOCUS";
})(ComboboxActionType || (ComboboxActionType = {}));
export const stateChart = {
    initial: ComboboxState.IDLE,
    states: {
        [ComboboxState.IDLE]: {
            on: {
                [ComboboxActionType.BLUR]: ComboboxState.IDLE,
                [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
                [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_SILENT]: ComboboxState.IDLE,
                [ComboboxActionType.CHANGE_VALUES]: ComboboxState.IDLE,
                [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
                [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
                [ComboboxActionType.SELECT_SILENT]: ComboboxState.IDLE,
            },
        },
        [ComboboxState.SUGGESTING]: {
            on: {
                [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_VALUES]: ComboboxState.SUGGESTING,
                [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
                [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
                [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
                [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
                [ComboboxActionType.BLUR]: ComboboxState.IDLE,
                [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.SUGGESTING,
                [ComboboxActionType.SELECT_SILENT]: ComboboxState.SUGGESTING,
                [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING,
            },
        },
        [ComboboxState.NAVIGATING]: {
            on: {
                [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_SILENT]: ComboboxState.NAVIGATING,
                [ComboboxActionType.CHANGE_VALUES]: ComboboxState.NAVIGATING,
                [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
                [ComboboxActionType.BLUR]: ComboboxState.IDLE,
                [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
                [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
                [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.NAVIGATING,
                [ComboboxActionType.SELECT_WITH_KEYBOARD]: ComboboxState.NAVIGATING,
                [ComboboxActionType.SELECT_SILENT]: ComboboxState.NAVIGATING,
                [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING,
            },
        },
        [ComboboxState.INTERACTING]: {
            on: {
                [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
                [ComboboxActionType.CHANGE_VALUES]: ComboboxState.INTERACTING,
                [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
                [ComboboxActionType.BLUR]: ComboboxState.IDLE,
                [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
                [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
                [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.INTERACTING,
                [ComboboxActionType.SELECT_SILENT]: ComboboxState.INTERACTING,
            },
        },
    },
};
const findNavigationValue = (state, action) => {
    if (action.option) {
        return action.option;
    }
    else if (action.persistSelection) {
        const singularState = state;
        const multiState = state;
        return singularState.option
            ? singularState.option
            : multiState.options
                ? multiState.navigationOption ||
                    multiState.options[multiState.options.length - 1]
                : undefined;
    }
    else {
        return undefined;
    }
};
const reducer = (data, action) => {
    const nextState = Object.assign(Object.assign({}, data), { lastActionType: action.type });
    switch (action.type) {
        case ComboboxActionType.CHANGE:
        case ComboboxActionType.CHANGE_SILENT:
            return Object.assign(Object.assign({}, nextState), { inputValue: action.inputValue });
        case ComboboxActionType.NAVIGATE:
            return Object.assign(Object.assign({}, nextState), { navigationOption: findNavigationValue(nextState, action) });
        case ComboboxActionType.CLEAR:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: undefined, option: undefined });
        case ComboboxActionType.BLUR:
        case ComboboxActionType.ESCAPE:
            return Object.assign(Object.assign({}, nextState), { inputValue: getComboboxText(data.option), navigationOption: undefined });
        case ComboboxActionType.SELECT_WITH_CLICK:
        case ComboboxActionType.SELECT_SILENT:
            return Object.assign(Object.assign({}, nextState), { inputValue: getComboboxText(action.option), navigationOption: undefined, option: action.option });
        case ComboboxActionType.SELECT_WITH_KEYBOARD:
            return Object.assign(Object.assign({}, nextState), { inputValue: getComboboxText(data.navigationOption), navigationOption: undefined, option: data.navigationOption });
        case ComboboxActionType.INTERACT:
            return nextState;
        case ComboboxActionType.FOCUS:
            return Object.assign(Object.assign({}, nextState), { navigationOption: findNavigationValue(nextState, action) });
        default:
            throw new Error(`Unknown action ${action.type}`);
    }
};
const reducerMulti = (data, action) => {
    const nextState = Object.assign(Object.assign({}, data), { lastActionType: action.type });
    switch (action.type) {
        case ComboboxActionType.CHANGE:
        case ComboboxActionType.CHANGE_SILENT:
            return Object.assign(Object.assign({}, nextState), { inputValue: action.inputValue });
        case ComboboxActionType.CHANGE_VALUES:
            return Object.assign(Object.assign({}, nextState), { navigationOption: undefined, options: nextState.options.filter((option) => action.inputValues &&
                    action.inputValues.includes(getComboboxText(option))) });
        case ComboboxActionType.NAVIGATE:
            return Object.assign(Object.assign({}, nextState), { navigationOption: findNavigationValue(nextState, action) });
        case ComboboxActionType.CLEAR:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: undefined, options: [] });
        case ComboboxActionType.BLUR:
        case ComboboxActionType.ESCAPE:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: undefined });
        case ComboboxActionType.SELECT_WITH_CLICK:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: findNavigationValue(nextState, action), options: xorWith(nextState.options, action.option ? [action.option] : [], (o1, o2) => o1.value === o2.value) });
        case ComboboxActionType.SELECT_SILENT:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: undefined, options: action.options || [] });
        case ComboboxActionType.SELECT_WITH_KEYBOARD:
            return Object.assign(Object.assign({}, nextState), { inputValue: '', navigationOption: findNavigationValue(nextState, action), options: xorWith(nextState.options, data.navigationOption ? [data.navigationOption] : [], (o1, o2) => o1.value === o2.value) });
        case ComboboxActionType.INTERACT:
            return nextState;
        case ComboboxActionType.FOCUS:
            return Object.assign(Object.assign({}, nextState), { navigationOption: findNavigationValue(nextState, action) });
        default:
            throw new Error(`Unknown action ${action.type}`);
    }
};
export function useReducerMachine(initialData) {
    const [state, setState] = useState(stateChart.initial);
    const [data, dispatch] = useReducer(reducer, initialData);
    function transition(action, payload = {}) {
        const currentState = stateChart.states[state];
        const nextState = currentState.on[action];
        if (!nextState) {
            console.warn(`Unknown action "${action}" for state "${state}"`);
            return;
        }
        dispatch(Object.assign({ state, type: action }, payload));
        setState(nextState);
    }
    return [state, data, transition];
}
export function useReducerMultiMachine(initialData) {
    const [state, setState] = useState(stateChart.initial);
    const [data, dispatch] = useReducer(reducerMulti, initialData);
    function transition(action, payload = { inputValues: [], options: [] }) {
        const currentState = stateChart.states[state];
        const nextState = currentState.on[action];
        if (!nextState) {
            console.warn(`Unknown action "${action}" for state "${state}"`);
            return;
        }
        dispatch(Object.assign({ state, type: action }, payload));
        setState(nextState);
    }
    return [state, data, transition];
}
//# sourceMappingURL=state.js.map