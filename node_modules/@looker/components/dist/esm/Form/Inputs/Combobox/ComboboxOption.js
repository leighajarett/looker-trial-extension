var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { color, flexbox, layout, reset, space, typography, } from '@looker/design-tokens';
import omit from 'lodash/omit';
import React, { forwardRef, useContext } from 'react';
import styled, { css } from 'styled-components';
import { Icon } from '../../../Icon';
import { ReplaceText, Text } from '../../../Text';
import { useForkedRef } from '../../../utils';
import { makeHash } from './utils/makeHash';
import { OptionContext, ComboboxContext, ComboboxMultiContext, } from './ComboboxContext';
import { getComboboxText } from './utils/getComboboxText';
import { useOptionEvents } from './utils/useOptionEvents';
import { useOptionStatus } from './utils/useOptionStatus';
import { useAddOptionToContext } from './utils/useAddOptionToContext';
import { useOptionScroll } from './utils/useOptionScroll';
export const ComboboxOptionWrapper = forwardRef((_a, forwardedRef) => {
    var { children, label, value } = _a, rest = __rest(_a, ["children", "label", "value"]);
    return (React.createElement(OptionContext.Provider, { value: { label, value } },
        React.createElement("li", Object.assign({}, omit(rest, 'color'), { ref: forwardedRef, id: String(makeHash(value)), role: "option", tabIndex: -1 }), children)));
});
ComboboxOptionWrapper.displayName = 'ComboboxOptionWrapper';
const ComboboxOptionInternal = forwardRef((_a, forwardedRef) => {
    var { children, highlightText = true, scrollIntoView } = _a, props = __rest(_a, ["children", "highlightText", "scrollIntoView"]);
    const { label, value } = props;
    useAddOptionToContext(ComboboxContext, value, label, scrollIntoView);
    const optionEvents = useOptionEvents(props, ComboboxContext);
    const { isActive, isSelected } = useOptionStatus(ComboboxContext, value);
    const scrollRef = useOptionScroll(ComboboxContext, value, label, scrollIntoView, isActive);
    const ref = useForkedRef(scrollRef, forwardedRef);
    return (React.createElement(ComboboxOptionWrapper, Object.assign({}, props, optionEvents, { ref: ref, "aria-selected": isActive }),
        React.createElement(ComboboxOptionDetail, null, isSelected && React.createElement(Icon, { name: "Check", mr: 0 })),
        children || React.createElement(ComboboxOptionText, { highlightText: highlightText })));
});
ComboboxOptionInternal.displayName = 'ComboboxOptionInternal';
export const ComboboxOptionDetail = styled.div.withConfig({ displayName: "ComboboxOptionDetail", componentId: "sc-193hzvs" }) `
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${(props) => props.theme.space.large};
`;
export const comboboxOptionGrid = css `
  display: grid;
  grid-gap: ${(props) => props.theme.space.xxsmall};
  grid-template-columns: ${(props) => props.theme.space.medium} 1fr;
`;
export const comboboxOptionStyle = css `
  ${reset}
  ${color}
  ${flexbox}
  ${layout}
  ${space}
  ${typography}
  cursor: default;
  align-items: flex-start;
  ${comboboxOptionGrid}
  outline: none;

  &[aria-selected='true'] {
    background-color: ${(props) => props.theme.colors.semanticColors.primary.lighter};
    color:  ${(props) => props.theme.colors.semanticColors.primary.darker};
  }
`;
export const ComboboxOption = styled(ComboboxOptionInternal).withConfig({ displayName: "ComboboxOption", componentId: "sc-1yo9c6e" }) `
  ${comboboxOptionStyle}
`;
export const comboboxOptionDefaultProps = {
    color: 'palette.charcoal700',
    display: 'flex',
    fontSize: 'small',
    px: 'xsmall',
    py: 'xxsmall',
};
ComboboxOption.defaultProps = comboboxOptionDefaultProps;
export function ComboboxOptionTextInternal(_a) {
    var { highlightText = true } = _a, props = __rest(_a, ["highlightText"]);
    const context = useContext(ComboboxContext);
    const contextMulti = useContext(ComboboxMultiContext);
    const contextToUse = context.transition ? context : contextMulti;
    const { data } = contextToUse;
    const { inputValue } = data;
    const contextOption = data.option;
    const option = useContext(OptionContext);
    const text = getComboboxText(option);
    if (!highlightText ||
        !inputValue ||
        inputValue === '' ||
        inputValue === getComboboxText(contextOption)) {
        return React.createElement("span", Object.assign({}, props), text);
    }
    return (React.createElement("span", Object.assign({}, props),
        React.createElement(ReplaceText, { match: inputValue, replace: (str, index) => (React.createElement(Text, { fontWeight: "semiBold", fontSize: "small", textDecoration: "underline", key: index }, str)) }, text)));
}
export const ComboboxOptionText = styled(ComboboxOptionTextInternal).withConfig({ displayName: "ComboboxOptionText", componentId: "sc-1qz6kly" }) ``;
//# sourceMappingURL=ComboboxOption.js.map