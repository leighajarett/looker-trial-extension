var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { reset, space } from '@looker/design-tokens';
import pick from 'lodash/pick';
import { rem, rgba } from 'polished';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { inputPropKeys } from '../InputProps';
import { KnobContainer } from './Knob';
const DisabledKnob = styled.div.withConfig({ displayName: "DisabledKnob", componentId: "sc-1l990uj" }) `
  ${reset}
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.4;
  background: ${(props) => props.theme.colors.palette.charcoal300};
  border-radius: ${(props) => rem(props.size)};
`;
export const ToggleSwitchLayout = forwardRef((_a, ref) => {
    var { className, disabled, on, size = 20, validationType } = _a, props = __rest(_a, ["className", "disabled", "on", "size", "validationType"]);
    return (React.createElement("div", { className: className },
        React.createElement("input", Object.assign({ type: "checkbox", checked: on, disabled: disabled, role: "switch", "aria-checked": on, "aria-invalid": validationType === 'error' ? 'true' : undefined, ref: ref }, pick(props, inputPropKeys))),
        React.createElement(KnobContainer, { size: size, on: on, disabled: disabled }),
        disabled && React.createElement(DisabledKnob, { size: size })));
});
ToggleSwitchLayout.displayName = 'ToggleSwitchLayout';
export const ToggleSwitch = styled(ToggleSwitchLayout).withConfig({ displayName: "ToggleSwitch", componentId: "sc-qd9gtp" }) `
  ${reset}
  ${space}

  width: ${(props) => rem((props.size || 20) * 1.75)};
  height: ${(props) => rem(props.size || 20)};
  display: inline-block;
  position: relative;
  vertical-align: middle;

  input {
    cursor: ${({ disabled }) => (!disabled ? 'pointer' : undefined)};
    opacity: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    margin: 0; /* Suppress browser default styling */

    &:focus + div {
      box-shadow: 0 0 0 0.2rem
        ${({ theme }) => rgba(theme.colors.palette.primary500, 0.4)};
    }
  }
`;
//# sourceMappingURL=ToggleSwitch.js.map