var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState } from 'react';
import isFunction from 'lodash/isFunction';
import styled, { css } from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import { width } from 'styled-system';
const SliderInternal = forwardRef((_a, ref) => {
    var { min = 0, max = 10, value = 0, step, onChange, name, id, className, disabled } = _a, restProps = __rest(_a, ["min", "max", "value", "step", "onChange", "name", "id", "className", "disabled"]);
    const [isFocused, setIsFocused] = useState(false);
    const [internalValue, setInternalValue] = useState(value);
    if (min > max) {
        console.warn(`Unable to render <Slider /> because the 'min' prop was set greater than 'max' value. MIN: ${min}, MAX: ${max}`);
        return null;
    }
    const boundSliderValue = (v) => Math.min(Math.max(v, min), max);
    const displayValue = isFunction(onChange)
        ? boundSliderValue(value)
        : boundSliderValue(internalValue);
    const fillPercent = Math.round(((displayValue - min) / (max - min)) * 100);
    const handleFocus = () => {
        setIsFocused(true);
    };
    const handleUnfocus = () => {
        setIsFocused(false);
    };
    const internalChangeHandler = (event) => {
        const evtValue = event.target.value;
        setInternalValue(parseInt(evtValue));
    };
    const handleChange = isFunction(onChange) ? onChange : internalChangeHandler;
    return (React.createElement("div", { className: className, "data-testid": "container" },
        React.createElement(SliderValueWrapper, null,
            React.createElement(SliderValue, { disabled: disabled, isFocused: isFocused, offsetPercent: fillPercent }, displayValue)),
        React.createElement(SliderTrack, null,
            React.createElement(SliderFill, { offsetPercent: fillPercent, disabled: disabled })),
        React.createElement(SliderInput, { disabled: disabled, id: id, isFocused: isFocused, max: max, min: min, name: name, onChange: handleChange, step: step, type: "range", value: displayValue, "aria-labelledby": restProps['aria-labelledby'], "data-testid": "slider-input", ref: ref, onBlur: handleUnfocus, onFocus: handleFocus })));
});
const sliderThumbFocusCss = css `
  border-width: 5px;
`;
const sliderThumbCss = css `
  border-radius: 100%;
  cursor: pointer;
  transition: transform 0.25s, box-shadow 0.25s;
  ${({ theme: { colors }, isFocused }) => css `
    border: 3px solid ${colors.semanticColors.primary.main};
    height: 16px;
    width: 16px;
    background: ${colors.palette.white};
    ${isFocused && sliderThumbFocusCss}
  `}
`;
const SliderInput = styled.input.attrs({ type: 'range' }).withConfig({ displayName: "SliderInput", componentId: "sc-1o398ec" }) `
  background: transparent;
  display: block;
  height: 22px;
  position: relative;
  width: 100%;
  -webkit-appearance: none; /* stylelint-disable-line */

  &::-webkit-slider-thumb {
    -webkit-appearance: none; /* stylelint-disable-line */
    ${sliderThumbCss}
  }

  &::-moz-range-thumb {
    ${sliderThumbCss}
  }

  &::-ms-thumb {
    ${sliderThumbCss}
  }

  &::-ms-track {
    width: 100%;
    cursor: pointer;
    background: transparent;
    border-color: transparent;
    color: transparent;
  }

  &::-moz-focus-outer {
    border: none;
  }

  &:focus {
    outline: none;
    &::-webkit-slider-thumb {
      ${sliderThumbFocusCss}
    }

    &::-moz-range-thumb {
      ${sliderThumbFocusCss}
    }

    &::-ms-thumb {
      ${sliderThumbFocusCss}
    }
  }

  &:disabled {
    &::-webkit-slider-thumb {
      border-color: ${({ theme }) => theme.colors.palette.charcoal500};
      cursor: default;
    }
    &::-moz-range-thumb {
      border-color: ${({ theme }) => theme.colors.palette.charcoal500};
      cursor: default;
    }
    &::-ms-thumb {
      border-color: ${({ theme }) => theme.colors.palette.charcoal500};
      cursor: default;
    }
  }
`;
const SliderTrack = styled.div.withConfig({ displayName: "SliderTrack", componentId: "sc-a4tl27" }) `
  width: calc(100% - 16px);
  height: 4px;
  background: ${({ theme }) => theme.colors.palette.charcoal200};
  border-radius: ${({ theme }) => theme.radii.small};
  position: absolute;
  top: 50%;
  left: 8px;
  margin-top: -2px;
`;
const SliderFill = styled.div.withConfig({ displayName: "SliderFill", componentId: "sc-eqcw9g" }) `
  height: 100%;
  background: ${({ theme: { colors }, disabled }) => disabled ? colors.palette.charcoal400 : colors.semanticColors.primary.main};
  width: ${({ offsetPercent }) => offsetPercent}%;
  border-radius: ${({ theme }) => theme.radii.small};
`;
const SliderValue = styled.div.withConfig({ displayName: "SliderValue", componentId: "sc-fhyan5" }) `
  color: ${({ theme: { colors }, disabled }) => disabled ? colors.palette.charcoal700 : colors.semanticColors.primary.main};
  line-height: 1;
  user-select: none;
  transform: translateX(-50%) translateY(-1.3rem);
  left: ${({ offsetPercent }) => offsetPercent}%;
  position: absolute;
  text-align: center;
  padding: 0.2rem 0.5rem;
  border-radius: 1rem;
  background: ${({ theme, isFocused }) => isFocused ? theme.colors.palette.purple100 : theme.colors.palette.white};
`;
const SliderValueWrapper = styled.div.withConfig({ displayName: "SliderValueWrapper", componentId: "sc-v8qyvo" }) `
  position: relative;
  width: calc(100% - 14px);
  margin: 0 auto;
`;
export const Slider = styled(SliderInternal).withConfig({ displayName: "Slider", componentId: "sc-v0u4" }) `
  ${reset}
  ${space}
  ${width}
  position: relative;
`;
SliderInternal.displayName = 'Slider';
Slider.defaultProps = { mt: 'large', width: '100%' };
//# sourceMappingURL=Slider.js.map