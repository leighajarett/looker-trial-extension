var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import React, { forwardRef, useState, useRef, } from 'react';
import styled from 'styled-components';
import { inputPropKeys } from '../InputProps';
import { InputText, inputTextDefaults, inputTextDisabled, inputTextFocus, inputTextHover, inputTextValidation, } from '../InputText';
import { useControlWarn, useForkedRef, useWrapEvent } from '../../../utils';
import { Flex } from '../../../Layout';
import { Icon } from '../../../Icon';
import { InputSearchControls } from './InputSearchControls';
const getHeight = (py) => {
    const verticalSpace = typeof py === 'number'
        ? `${((py || 0) + 1) * 2}px`
        : `(${String(py)} * 2) - 2px`;
    return `calc(${inputTextDefaults.height} - ${verticalSpace})`;
};
export const SearchIcon = styled(Icon).withConfig({ displayName: "SearchIcon", componentId: "sc-1h1nl6f" }) `
  color: ${(props) => props.theme.colors.palette.charcoal400};
  padding-left: ${(props) => props.theme.space.small};
`;
const InputSearchComponent = forwardRef((_a, forwardedRef) => {
    var { onChange, onClear, onClick, onMouseDown, onMouseEnter, onMouseLeave, onMouseOut, onMouseOver, onMouseUp, children, className, defaultValue, hideControls = false, hideSearchIcon = false, showClear, summary, value: controlledValue = '' } = _a, props = __rest(_a, ["onChange", "onClear", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver", "onMouseUp", "children", "className", "defaultValue", "hideControls", "hideSearchIcon", "showClear", "summary", "value"]);
    const isControlled = useControlWarn({
        controllingProps: ['onChange', 'onClear', 'value'],
        isControlledCheck: () => onChange !== undefined,
        name: 'InputSearch',
    });
    const [uncontrolledValue, setValue] = useState(defaultValue || controlledValue);
    const inputValue = isControlled ? controlledValue : uncontrolledValue;
    const internalRef = useRef(null);
    const ref = useForkedRef(internalRef, forwardedRef);
    function handleMouseDown() {
        window.requestAnimationFrame(() => {
            internalRef.current && internalRef.current.focus();
        });
    }
    const handleClear = (e) => {
        setValue('');
        if (onClear) {
            onClear(e);
        }
        else if (onChange) {
            onChange({
                currentTarget: { value: '' },
            });
        }
    };
    const handleChange = (event) => {
        setValue(event.currentTarget.value);
        onChange && onChange(event);
    };
    const controls = !hideControls && (React.createElement(InputSearchControls, { onClear: handleClear, showClear: showClear || inputValue.length > 0, summary: summary, height: getHeight(props.py), disabled: props.disabled }));
    const mouseHandlers = {
        onClick,
        onMouseDown: useWrapEvent(handleMouseDown, onMouseDown),
        onMouseEnter,
        onMouseLeave,
        onMouseOut,
        onMouseOver,
        onMouseUp,
    };
    const input = (React.createElement(InputText, Object.assign({ onChange: handleChange, value: inputValue, focusStyle: { outline: 'none' }, pr: "0" }, pick(props, inputPropKeys), { ref: ref })));
    return (React.createElement(Flex, Object.assign({ className: className }, omit(props, inputPropKeys), mouseHandlers),
        !hideSearchIcon && React.createElement(SearchIcon, { name: "Search", size: 30 }),
        children ? (React.createElement(Flex, { alignContent: "flex-start", flexWrap: "wrap" },
            children,
            input)) : (input),
        controls));
});
InputSearchComponent.displayName = 'InputSearchComponent';
export const InputSearch = styled(InputSearchComponent).withConfig({ displayName: "InputSearch", componentId: "sc-19dgbb0" }) `
  align-items: center;
  background-color: ${(props) => props.theme.colors.palette.white};

  &:hover {
    ${inputTextHover}
  }

  &:focus-within {
    ${inputTextFocus}
  }

  ${(props) => (props.disabled ? inputTextDisabled : '')}

  ${inputTextValidation}

  ${InputText} {
    border: none;
    appearance: none;
    background: transparent;
    box-shadow: none;
    flex: 1;

    width: 100%;
    height: ${(props) => getHeight(props.py)};

    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      appearance: none;
    }
  }
`;
InputSearch.defaultProps = Object.assign(Object.assign({}, omit(inputTextDefaults, ['height', 'px'])), { pr: 'xxsmall', py: 2 });
//# sourceMappingURL=InputSearch.js.map