var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { Space, SpaceVertical } from '../../Layout';
import { Legend } from '../Legend';
const FieldsetLayout = forwardRef((props, ref) => {
    const { inline, className, legend, children } = props, restProps = __rest(props, ["inline", "className", "legend", "children"]);
    const LayoutComponent = inline ? Space : SpaceVertical;
    const content = (React.createElement(LayoutComponent, Object.assign({}, restProps, { gap: inline ? 'medium' : 'small', className: className, ref: ref, role: "group" }), children));
    return legend ? (React.createElement(SpaceVertical, null,
        typeof legend === 'string' ? React.createElement(Legend, null, legend) : legend,
        content)) : (content);
});
FieldsetLayout.displayName = 'FieldsetLayout';
export const Fieldset = styled(FieldsetLayout).withConfig({ displayName: "Fieldset", componentId: "sc-5krsqv" }) ``;
Fieldset.defaultProps = {
    padding: 'none',
};
//# sourceMappingURL=Fieldset.js.map