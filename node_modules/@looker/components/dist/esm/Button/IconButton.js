var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import some from 'lodash/some';
import isFunction from 'lodash/isFunction';
import styled, { css } from 'styled-components';
import { pseudoClasses, reset, space, } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import { Icon } from '../Icon';
import { useTooltip } from '../Tooltip';
import { useForkedRef, useWrapEvent } from '../utils';
import { VisuallyHidden } from '../VisuallyHidden';
import { buttonCSS } from './ButtonBase';
import { ButtonTransparent } from './ButtonTransparent';
import { buttonSizeMap } from './size';
export const IconButtonStyle = styled.button.withConfig({ displayName: "IconButtonStyle", componentId: "sc-13kozb4" }) `
  ${buttonCSS}
  height: auto;
`;
const IconButtonComponent = forwardRef((props, forwardRef) => {
    const { icon, size = 'xsmall', label, color, tooltipDisabled, tooltipPlacement, onFocus: propsOnFocus, onBlur: propsOnBlur, onMouseOver: propsOnMouseOver, onMouseOut: propsOnMouseOut } = props, rest = __rest(props, ["icon", "size", "label", "color", "tooltipDisabled", "tooltipPlacement", "onFocus", "onBlur", "onMouseOver", "onMouseOut"]);
    const hasOuterTooltip = some([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], isFunction);
    const { ref, tooltip, eventHandlers: { onFocus, onBlur, onMouseOver, onMouseOut }, } = useTooltip({
        content: label,
        disabled: tooltipDisabled || hasOuterTooltip,
        placement: tooltipPlacement,
    });
    const eventHandlers = {
        onBlur: useWrapEvent(onBlur, propsOnBlur),
        onFocus: useWrapEvent(onFocus, propsOnFocus),
        onMouseOut: useWrapEvent(onMouseOut, propsOnMouseOut),
        onMouseOver: useWrapEvent(onMouseOver, propsOnMouseOver),
    };
    const actualRef = useForkedRef(forwardRef, ref);
    return (React.createElement(React.Fragment, null,
        tooltip,
        React.createElement(ButtonTransparent, Object.assign({ ref: actualRef, color: color, p: "none", size: size, width: buttonSizeMap[size] }, eventHandlers, rest),
            React.createElement(VisuallyHidden, null, label),
            React.createElement(Icon, { name: icon, size: buttonSizeMap[size] - 6, "aria-hidden": true }))));
});
IconButtonComponent.displayName = 'IconButtonComponent';
const outlineCSS = (props) => {
    const { color = 'primary' } = props;
    return css `
    border: 1px solid
      ${(props) => props.theme.colors.semanticColors[color].borderColor};

    &:hover,
    &:focus,
    &.hover {
      border-color: ${(props) => props.theme.colors.semanticColors[color].main};
    }

    &:active,
    &.active {
      border-color: ${(props) => props.theme.colors.semanticColors[color].main};
    }

    &[disabled] {
      &:hover,
      &:active,
      &:focus {
        border-color: ${(props) => props.theme.colors.semanticColors[color].borderColor};
      }
    }
  `;
};
export const IconButton = styled(IconButtonComponent).withConfig({ displayName: "IconButton", componentId: "sc-17n0jr7" }) `
  ${reset}
  ${space}

  ${(props) => props.outline && outlineCSS}

  ${pseudoClasses}
  ${({ shape }) => shape === 'round' && 'border-radius: 100%;'}

  svg {
    pointer-events: none;
  }
`;
IconButton.defaultProps = { color: 'neutral', type: 'button' };
//# sourceMappingURL=IconButton.js.map