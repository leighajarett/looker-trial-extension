var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef, forwardRef, useContext, useState } from 'react';
import { HotKeys } from 'react-hotkeys';
import styled, { css } from 'styled-components';
import { height, minHeight, maxHeight, width, minWidth, maxWidth, } from 'styled-system';
import { reset } from '@looker/design-tokens';
import { usePopover } from '../Popover';
import { MenuContext, MenuItemStyleContext } from './MenuContext';
import { MenuGroup } from './MenuGroup';
import { moveFocus } from './moveFocus';
export const MenuListInternal = forwardRef((_a, ref) => {
    var { children, compact, customizationProps, disabled, pin, placement } = _a, props = __rest(_a, ["children", "compact", "customizationProps", "disabled", "pin", "placement"]);
    const { id, isOpen, setOpen, triggerElement } = useContext(MenuContext);
    const [renderIconPlaceholder, setRenderIconPlaceholder] = useState(false);
    const innerRef = useRef(null);
    const context = {
        compact,
        customizationProps,
        renderIconPlaceholder,
        setRenderIconPlaceholder,
    };
    const menuList = (React.createElement(MenuItemStyleContext.Provider, { value: context },
        React.createElement(HotKeys, { innerRef: innerRef, keyMap: { MOVE_DOWN: 'down', MOVE_UP: 'up' }, handlers: {
                MOVE_DOWN: () => moveFocus(1, 0, innerRef),
                MOVE_UP: () => moveFocus(-1, -1, innerRef),
            }, style: { borderRadius: 'inherit' } },
            React.createElement("ul", Object.assign({ ref: ref, tabIndex: -1, role: "menu", id: id, "aria-labelledby": id && `button-${id}` }, props), children))));
    const isMenu = isOpen !== undefined;
    const { popover } = usePopover({
        content: menuList,
        isOpen,
        pin,
        placement,
        setOpen,
        triggerElement,
    });
    if (disabled)
        return null;
    if (isMenu)
        return popover || null;
    return menuList;
});
const dividersStyle = css `
  ${MenuGroup} ~ ${MenuGroup} { /* stylelint-disable-line */
    border-top: 1px solid ${(props) => props.theme.colors.palette.charcoal200};
  }
`;
export const MenuList = styled(MenuListInternal).withConfig({ displayName: "MenuList", componentId: "sc-1d0p517" }) `
  ${reset}

  ${minHeight}
  ${maxHeight}
  ${height}

  min-width: 12rem;
  ${minWidth}
  ${maxWidth}
  ${width}

  overflow: auto;
  border-radius: inherit;

  list-style: none;
  outline: none;
  user-select: none;
  ${(props) => props.groupDividers !== false && dividersStyle};
`;
//# sourceMappingURL=MenuList.js.map