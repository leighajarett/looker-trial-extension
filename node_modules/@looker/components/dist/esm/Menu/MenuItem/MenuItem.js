var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import merge from 'lodash/merge';
import React, { useContext, useState, useEffect, Children, } from 'react';
import styled from 'styled-components';
import { Icon } from '../../Icon';
import { MenuContext, MenuItemStyleContext } from '../MenuContext';
import { MenuItemButton } from './MenuItemButton';
import { MenuItemDetail } from './MenuItemDetail';
import { MenuItemListItem } from './MenuItemListItem';
import { defaultMenuItemStyle, } from './menuItemStyle';
export function useMenuItemStyleContext(props) {
    const { customizationProps: propCustomizations, compact: compactProp } = props;
    const { customizationProps: contextCustomizations, compact: contextCompact, } = useContext(MenuItemStyleContext);
    const parentCustomizations = contextCustomizations || {};
    let customizationProps = parentCustomizations || propCustomizations;
    if (customizationProps && parentCustomizations) {
        customizationProps = merge({}, parentCustomizations, propCustomizations);
    }
    const compact = compactProp === undefined ? contextCompact : compactProp;
    return { compact, customizationProps };
}
const assignCustomizations = (defaultStyle, changes) => {
    const { bg, color, iconColor, fontWeight, fontSize, iconSize } = changes || {};
    const customMarker = changes ? changes.marker : {};
    const defaults = {
        fontSize: fontSize || 'small',
        iconSize: iconSize || 20,
    };
    const base = {};
    bg && (base.bg = bg);
    color && (base.color = color);
    fontWeight && (base.fontWeight = fontWeight);
    iconColor && (base.iconColor = iconColor);
    const initial = Object.assign(Object.assign(Object.assign({}, defaultStyle.initial), defaults), base);
    const current = Object.assign(Object.assign(Object.assign(Object.assign({}, defaultStyle.current), defaults), base), (changes ? changes.current : {}));
    const hover = Object.assign(Object.assign(Object.assign(Object.assign({}, defaultStyle.hover), defaults), base), (changes ? changes.hover : {}));
    const marker = Object.assign(Object.assign({}, defaultStyle.marker), customMarker);
    return {
        current,
        hover,
        initial,
        marker,
    };
};
export const MenuItem = (props) => {
    const { children, compact: propCompact, customizationProps: propCustomizations, current, detail, href, icon, itemRole, onBlur, onClick, onKeyUp, target } = props, remainingProps = __rest(props, ["children", "compact", "customizationProps", "current", "detail", "href", "icon", "itemRole", "onBlur", "onClick", "onKeyUp", "target"]);
    const [isFocusVisible, setFocusVisible] = useState(false);
    const handleOnKeyUp = (event) => {
        setFocusVisible(true);
        onKeyUp && onKeyUp(event);
    };
    const handleOnBlur = (event) => {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    const { setOpen } = useContext(MenuContext);
    const handleOnClick = (event) => {
        setFocusVisible(false);
        onClick && onClick(event);
        if (setOpen && !event.defaultPrevented) {
            setOpen(false);
        }
    };
    const { customizationProps, compact } = useMenuItemStyleContext({
        compact: propCompact,
        customizationProps: propCustomizations,
    });
    const compactIconModifier = compact ? 1.25 : 1;
    const style = assignCustomizations(defaultMenuItemStyle, customizationProps);
    const styleState = current ? style.current : style.initial;
    const { iconSize, iconColor } = styleState, listItemProps = __rest(styleState, ["iconSize", "iconColor"]);
    const { p, py, px, pr, pl, pt, pb } = remainingProps, outerProps = __rest(remainingProps, ["p", "py", "px", "pr", "pl", "pt", "pb"]);
    const clickTargetProps = {
        p,
        pb: pb || py || p || compact ? 'xxsmall' : 'small',
        pl: pl || px || p || 'medium',
        pr: pr || px || p || 'medium',
        pt: pt || py || p || compact ? 'xxsmall' : 'small',
    };
    const { renderIconPlaceholder, setRenderIconPlaceholder } = useContext(MenuItemStyleContext);
    useEffect(() => {
        icon && setRenderIconPlaceholder(true);
    }, [icon, setRenderIconPlaceholder]);
    const renderedIcon = icon ? (React.createElement(Icon, { name: icon, mr: "xsmall", size: iconSize / compactIconModifier, color: iconColor })) : renderIconPlaceholder ? (React.createElement("div", null)) : undefined;
    return (React.createElement(MenuItemListItem, Object.assign({ "aria-current": current && 'page', onClick: handleOnClick, current: current, focusVisible: isFocusVisible, itemStyle: style, onKeyUp: handleOnKeyUp, onBlur: handleOnBlur }, listItemProps, outerProps),
        React.createElement(MenuItemButton, Object.assign({ as: itemRole === 'link' ? 'a' : 'button', href: href, role: "menuitem", target: target }, clickTargetProps),
            React.createElement(MenuItemGrid, { iconSize: customizationProps.iconSize || defaultMenuItemStyle.initial.iconSize },
                renderedIcon,
                children)),
        detail && React.createElement(MenuItemDetail, null, detail)));
};
const MenuItemGrid = styled.div.withConfig({ displayName: "MenuItemGrid", componentId: "sc-1sno6qj" }) `
  display: grid;
  grid-template-columns: ${({ children, iconSize }) => Children.toArray(children).length === 2 ? `${iconSize}px 1fr` : '1fr'};
  grid-gap: 0.5rem;
  align-items: center;
`;
//# sourceMappingURL=MenuItem.js.map