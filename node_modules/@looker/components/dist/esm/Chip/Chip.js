var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { color, reset, layout, space, typography, } from '@looker/design-tokens';
import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { rgba } from 'polished';
import { IconButton } from '../Button';
import { Text } from '../Text';
import { truncate } from '../Text/truncate';
const ChipStyle = styled.span.withConfig({ displayName: "ChipStyle", componentId: "sc-tncqtd" }) `
  ${reset}

  ${color}
  ${layout}
  ${space}
  ${typography}
  ${IconButton}{
    background-color: transparent;
    flex-shrink: 0;
  }

  align-items: center;
  background-color: ${(props) => props.theme.colors.palette.purple000};
  border-radius: 4px;
  color: ${(props) => props.theme.colors.palette.purple500};
  display: flex;
  justify-items: center;
  & + & {
    margin-left: ${(props) => props.theme.space.xxsmall};
  }

  &:hover {
    background-color: ${(props) => props.theme.colors.palette.purple100};
  }

  &:focus {
    background-color: ${(props) => props.theme.colors.palette.purple200};
    outline: none;
  }

  ${(props) => props.focusVisible &&
    `box-shadow: 0 0 0 0.15rem ${rgba(props.theme.colors.palette.purple300, 0.25)};`};

  ${(props) => props.disabled &&
    `color: ${props.theme.colors.palette.charcoal400};
      background-color: ${props.theme.colors.palette.charcoal100};

      &:hover {
        background-color: ${props.theme.colors.palette.charcoal100};
      }
    `}
`;
const ChipLabel = styled(Text).withConfig({ displayName: "ChipLabel", componentId: "sc-o3fli9" }) `
  ${truncate}
`;
const ChipJSX = forwardRef((props, ref) => {
    const { children, disabled, fontSize, onBlur, onDelete, onKeyUp, onKeyDown, truncate } = props, restProps = __rest(props, ["children", "disabled", "fontSize", "onBlur", "onDelete", "onKeyUp", "onKeyDown", "truncate"]);
    const [isFocusVisible, setFocusVisible] = useState(false);
    const handleOnKeyUp = (event) => {
        setFocusVisible(true);
        onKeyUp && onKeyUp(event);
    };
    const handleOnBlur = (event) => {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    const handleOnKeyDown = (event) => {
        setFocusVisible(false);
        if (event.key === 'Backspace') {
            onDelete && onDelete();
        }
        onKeyDown && onKeyDown(event);
        setFocusVisible(false);
    };
    const handleDelete = () => {
        if (!disabled) {
            onDelete && onDelete();
        }
        setFocusVisible(false);
    };
    return (React.createElement(ChipStyle, Object.assign({ disabled: disabled, focusVisible: isFocusVisible, onBlur: handleOnBlur, onKeyDown: handleOnKeyDown, onKeyUp: handleOnKeyUp, ref: ref, tabIndex: disabled ? undefined : 0 }, restProps),
        React.createElement(ChipLabel, { fontSize: fontSize, truncate: truncate }, children),
        onDelete && !disabled && (React.createElement(IconButton, { color: "primary", disabled: disabled, icon: "Close", label: "Delete", ml: "xsmall", onClick: handleDelete, size: "xxsmall" }))));
});
ChipJSX.displayName = 'ChipJSX';
export const Chip = styled(ChipJSX).withConfig({ displayName: "Chip", componentId: "sc-1z8g6q" }) ``;
Chip.defaultProps = {
    fontSize: 'xsmall',
    fontWeight: 'semiBold',
    height: 28,
    maxWidth: 320,
    mb: 'xxsmall',
    minWidth: 44,
    px: 'xsmall',
    py: 'xxsmall',
    truncate: true,
};
//# sourceMappingURL=Chip.js.map