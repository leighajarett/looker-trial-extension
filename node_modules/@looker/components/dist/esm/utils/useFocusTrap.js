import createFocusTrap from 'focus-trap';
import { useContext, useEffect, useRef } from 'react';
import { ModalContext } from '../Modal/ModalContext';
import { useToggle } from './useToggle';
import { useCallbackRef } from './useCallbackRef';
function checkFocusLost() {
    return document.activeElement
        ? document.activeElement.tagName === 'BODY'
        : true;
}
export function useFocusTrap(enabled = true, keepFocusWithin) {
    const trapRef = useRef();
    const [newElement, callbackRef] = useCallbackRef();
    const element = typeof keepFocusWithin === 'undefined' ? newElement : keepFocusWithin;
    const { disableFocusTrap, enableFocusTrap } = useContext(ModalContext);
    const { value, setOn, setOff } = useToggle(enabled);
    useEffect(() => {
        if (element && value) {
            const autoFocusElement = element.querySelector('[data-autofocus="true"]');
            trapRef.current = createFocusTrap(element, Object.assign({ clickOutsideDeactivates: true, escapeDeactivates: false, fallbackFocus: element, onDeactivate: () => setOff() }, (autoFocusElement ? { initialFocus: autoFocusElement } : {})));
            disableFocusTrap && disableFocusTrap();
            window.setTimeout(() => trapRef.current && trapRef.current.activate(), 0);
        }
        else {
            trapRef.current &&
                trapRef.current.deactivate({ returnFocus: checkFocusLost() });
            enableFocusTrap && enableFocusTrap();
        }
        return () => {
            trapRef.current &&
                trapRef.current.deactivate({ returnFocus: checkFocusLost() });
        };
    }, [value, element, disableFocusTrap, enableFocusTrap, setOff]);
    return {
        callbackRef,
        disable: setOff,
        element: element || null,
        enable: setOn,
        isEnabled: value,
        trapRef,
    };
}
//# sourceMappingURL=useFocusTrap.js.map