import { useCallback, useLayoutEffect, useState } from 'react';
import ResizeObserver from 'resize-observer-polyfill';
function measureElement(element) {
    if (!element) {
        return {
            bottom: 0,
            height: 0,
            left: 0,
            right: 0,
            top: 0,
            width: 0,
        };
    }
    return element.getBoundingClientRect();
}
export const useMeasuredElement = (element) => {
    const [rect, setRect] = useState(measureElement());
    const handleResize = useCallback(() => {
        element && setRect(measureElement(element));
    }, [element]);
    useLayoutEffect(() => {
        if (!element) {
            return;
        }
        handleResize();
        const resizeObserver = new ResizeObserver(() => handleResize());
        if (element) {
            resizeObserver.observe(element);
        }
        window.addEventListener('resize', handleResize);
        return () => {
            if (!resizeObserver) {
                return;
            }
            resizeObserver.disconnect();
            window.removeEventListener('resize', handleResize);
        };
    }, [handleResize, element]);
    return rect;
};
//# sourceMappingURL=useMeasuredElement.js.map