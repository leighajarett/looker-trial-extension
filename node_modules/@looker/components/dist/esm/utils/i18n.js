import format from 'date-fns/format';
import isValid from 'date-fns/isValid';
import parse from 'date-fns/parse';
import ar from 'date-fns/locale/ar-SA';
import de from 'date-fns/locale/de';
import en from 'date-fns/locale/en-US';
import es from 'date-fns/locale/es';
import fr from 'date-fns/locale/fr';
import it from 'date-fns/locale/it';
import ja from 'date-fns/locale/ja';
import ko from 'date-fns/locale/ko';
import nl from 'date-fns/locale/nl';
import pl from 'date-fns/locale/pl';
import pt from 'date-fns/locale/pt';
import ptBr from 'date-fns/locale/pt-BR';
import ru from 'date-fns/locale/ru';
import sv from 'date-fns/locale/sv';
import tr from 'date-fns/locale/tr';
import zhCn from 'date-fns/locale/zh-CN';
import zhTw from 'date-fns/locale/zh-TW';
export var Locales;
(function (Locales) {
    Locales["Arabic"] = "ar";
    Locales["German"] = "de";
    Locales["English"] = "en";
    Locales["Spanish"] = "es";
    Locales["French"] = "fr";
    Locales["Italian"] = "it";
    Locales["Japanese"] = "ja";
    Locales["Korean"] = "ko";
    Locales["Dutch"] = "nl";
    Locales["Polish"] = "pl";
    Locales["Portuguese"] = "pt";
    Locales["PortugueseBrazil"] = "pt-br";
    Locales["Russian"] = "ru";
    Locales["Swedish"] = "sv";
    Locales["Turkish"] = "tr";
    Locales["Chinese"] = "zh-cn";
    Locales["ChineseTaiwan"] = "zh-tw";
})(Locales || (Locales = {}));
export const dateFnLocaleMap = {
    [Locales.Arabic]: ar,
    [Locales.German]: de,
    [Locales.English]: en,
    [Locales.Spanish]: es,
    [Locales.French]: fr,
    [Locales.Italian]: it,
    [Locales.Japanese]: ja,
    [Locales.Korean]: ko,
    [Locales.Dutch]: nl,
    [Locales.Polish]: pl,
    [Locales.Portuguese]: pt,
    [Locales.PortugueseBrazil]: ptBr,
    [Locales.Russian]: ru,
    [Locales.Turkish]: tr,
    [Locales.Swedish]: sv,
    [Locales.Chinese]: zhCn,
    [Locales.ChineseTaiwan]: zhTw,
};
export const formatDateString = (date, locale = Locales.English) => {
    if (!date) {
        return '';
    }
    return format(date, 'P', {
        locale: dateFnLocaleMap[locale],
    });
};
export const formatYear = (date) => {
    const year = date.getFullYear();
    if (year < 100) {
        return year + 2000;
    }
    else if (year < 1000) {
        return parseInt(`${year}0`);
    }
    return year;
};
export const parseDateFromString = (value, locale) => {
    const parsedValue = parse(value, 'P', new Date(), {
        locale: dateFnLocaleMap[locale],
    });
    parsedValue.setFullYear(formatYear(parsedValue));
    return isValid(parsedValue) && parsedValue;
};
//# sourceMappingURL=i18n.js.map