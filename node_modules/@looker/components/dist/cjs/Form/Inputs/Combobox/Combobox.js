"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const utils_1 = require("../../../utils");
const Layout_1 = require("../../../Layout");
const useFocusManagement_1 = require("./utils/useFocusManagement");
const state_1 = require("./utils/state");
const ComboboxContext_1 = require("./ComboboxContext");
const getComboboxText_1 = require("./utils/getComboboxText");
const useComboboxRefs_1 = require("./utils/useComboboxRefs");
const useComboboxToggle_1 = require("./utils/useComboboxToggle");
const useScrollState_1 = require("./utils/useScrollState");
exports.ComboboxInternal = react_1.forwardRef((_a, forwardedRef) => {
    var { openOnFocus = false, onChange, value, defaultValue, onClose, onOpen, id: propsID } = _a, rest = __rest(_a, ["openOnFocus", "onChange", "value", "defaultValue", "onClose", "onOpen", "id"]);
    const initialValue = value || defaultValue;
    const initialData = initialValue
        ? { inputValue: getComboboxText_1.getComboboxText(initialValue), option: initialValue }
        : {};
    const [state, data, transition] = state_1.useReducerMachine(Object.assign(Object.assign({}, ComboboxContext_1.defaultData), initialData));
    const { lastActionType, option } = data;
    if (value !== undefined && (!option || option.value !== value.value)) {
        transition &&
            transition(state_1.ComboboxActionType.SELECT_SILENT, {
                option: value,
            });
    }
    const focusManagement = useFocusManagement_1.useFocusManagement(lastActionType);
    const id = utils_1.useID(propsID);
    const isVisible = useComboboxToggle_1.useComboboxToggle(state, option, onOpen, onClose);
    const _b = useComboboxRefs_1.useComboboxRefs(forwardedRef), { ref } = _b, commonRefs = __rest(_b, ["ref"]);
    const scrollState = useScrollState_1.useScrollState();
    const context = Object.assign(Object.assign(Object.assign(Object.assign({}, commonRefs), focusManagement), scrollState), { data,
        id,
        isVisible,
        onChange,
        openOnFocus,
        state,
        transition });
    return (react_1.default.createElement(ComboboxContext_1.ComboboxContext.Provider, { value: context },
        react_1.default.createElement(exports.ComboboxWrapper, Object.assign({ id: id }, rest, { isVisible: isVisible, ref: ref }))));
});
exports.ComboboxInternal.displayName = 'ComboboxInternal';
exports.ComboboxWrapper = react_1.forwardRef((_a, ref) => {
    var { isVisible } = _a, rest = __rest(_a, ["isVisible"]);
    return (react_1.default.createElement(Layout_1.Box, Object.assign({}, rest, { ref: ref, role: "combobox", "aria-haspopup": "listbox", "aria-owns": `listbox-${rest.id}`, "aria-expanded": isVisible })));
});
exports.ComboboxWrapper.displayName = 'ComboboxWrapper';
exports.Combobox = styled_components_1.default(exports.ComboboxInternal).withConfig({ displayName: "Combobox", componentId: "sc-e97j8r" }) ``;
exports.Combobox.defaultProps = {
    display: 'flex',
};
//# sourceMappingURL=Combobox.js.map