"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const btoa_1 = __importDefault(require("btoa"));
const react_1 = __importStar(require("react"));
const styled_components_1 = __importStar(require("styled-components"));
const utils_1 = require("../../../utils");
const InputSearch_1 = require("../InputSearch");
const InputText_1 = require("../InputText");
const ComboboxContext_1 = require("./ComboboxContext");
const getComboboxText_1 = require("./utils/getComboboxText");
const makeHash_1 = require("./utils/makeHash");
const state_1 = require("./utils/state");
const useInputEvents_1 = require("./utils/useInputEvents");
const useInputPropRefs_1 = require("./utils/useInputPropRefs");
exports.ComboboxInputInternal = react_1.forwardRef((props, forwardedRef) => {
    const { autoComplete = true, readOnly = false, onClear, onChange, value: controlledValue } = props, rest = __rest(props, ["autoComplete", "readOnly", "onClear", "onChange", "value"]);
    const { data: { navigationOption, option, inputValue: contextInputValue }, onChange: contextOnChange, inputCallbackRef, state, transition, id, } = react_1.useContext(ComboboxContext_1.ComboboxContext);
    useInputPropRefs_1.useInputPropRefs(props, ComboboxContext_1.ComboboxContext);
    const ref = utils_1.useForkedRef(inputCallbackRef, forwardedRef);
    const isControlled = controlledValue !== undefined;
    function handleClear() {
        contextOnChange && contextOnChange(undefined);
        transition && transition(state_1.ComboboxActionType.CLEAR);
    }
    function handleValueChange(value) {
        transition && transition(state_1.ComboboxActionType.CHANGE, { inputValue: value });
    }
    const isInputting = react_1.useRef(false);
    if (controlledValue !== undefined &&
        contextInputValue &&
        controlledValue !== contextInputValue) {
        if (isInputting.current) {
            handleValueChange(controlledValue);
        }
        else {
            transition &&
                transition(state_1.ComboboxActionType.CHANGE_SILENT, {
                    inputValue: controlledValue,
                });
        }
    }
    function handleChange(event) {
        isInputting.current = true;
        if (!isControlled) {
            handleValueChange(event.currentTarget.value);
        }
        requestAnimationFrame(() => {
            isInputting.current = false;
        });
    }
    let inputOption = contextInputValue !== undefined ? contextInputValue : option;
    if (autoComplete &&
        (state === state_1.ComboboxState.NAVIGATING ||
            state === state_1.ComboboxState.INTERACTING)) {
        inputOption =
            navigationOption ||
                (controlledValue !== undefined ? controlledValue : option);
    }
    const inputValue = getComboboxText_1.getComboboxText(inputOption);
    const wrappedOnClear = utils_1.useWrapEvent(handleClear, onClear);
    const wrappedOnChange = utils_1.useWrapEvent(handleChange, onChange);
    const inputEvents = useInputEvents_1.useInputEvents(props, ComboboxContext_1.ComboboxContext);
    return (react_1.default.createElement(InputSearch_1.InputSearch, Object.assign({}, rest, inputEvents, { hideSearchIcon: true, ref: ref, value: inputValue, readOnly: readOnly, onClear: wrappedOnClear, onChange: wrappedOnChange, id: `listbox-${id}`, autoComplete: "off", "aria-autocomplete": "both", "aria-activedescendant": navigationOption
            ? String(makeHash_1.makeHash(navigationOption ? navigationOption.value : ''))
            : undefined })));
});
exports.ComboboxInputInternal.displayName = 'ComboboxInputInternal';
const indicatorRaw = `
<svg
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="none"
  xmlns="http://www.w3.org/2000/svg"
>
  <path
    d="M7.41 8.58984L12 13.1698L16.59 8.58984L18 9.99984L12 15.9998L6 9.99984L7.41 8.58984Z"
    fill="currentColor"
  />
</svg>`;
exports.indicatorSize = '1rem';
exports.indicatorPadding = '.5rem';
exports.comboboxPaddingRight = `calc(2 * ${exports.indicatorPadding} + ${exports.indicatorSize})`;
const base64 = typeof window !== 'undefined' ? window.btoa : btoa_1.default;
const indicatorPrefix = 'data:image/svg+xml;base64,';
exports.selectIndicatorBG = (color) => `url('${indicatorPrefix}${base64(indicatorRaw.replace('currentColor', color))}')`;
const bgPosition = `right ${exports.indicatorPadding} top calc(${exports.indicatorPadding} + 2px), 0 0`;
exports.comboboxStyles = styled_components_1.css `
  background-image: ${(props) => {
    const color = props.disabled
        ? props.theme.colors.palette.charcoal300
        : props.theme.colors.palette.charcoal500;
    return exports.selectIndicatorBG(color);
}};
  background-repeat: no-repeat, repeat;
  background-position: ${bgPosition};
  background-size: ${exports.indicatorSize}, 100%;
  padding-right: ${exports.comboboxPaddingRight};

  ${InputText_1.InputText} {
    cursor: ${(props) => (props.readOnly ? 'default' : 'text')};
  }

  ${InputSearch_1.InputSearchControls} {
    &::after {
      content: ' ';
      border-right: 1px solid
        ${(props) => props.theme.colors.palette.charcoal200};
      height: 1.5rem;
      width: ${(props) => props.theme.space.xsmall};
      pointer-events: none;
    }
  }
`;
exports.ComboboxInput = styled_components_1.default(exports.ComboboxInputInternal).withConfig({ displayName: "ComboboxInput", componentId: "sc-686qay" }) `
  ${exports.comboboxStyles}
`;
exports.ComboboxInput.defaultProps = {
    width: '100%',
};
//# sourceMappingURL=ComboboxInput.js.map