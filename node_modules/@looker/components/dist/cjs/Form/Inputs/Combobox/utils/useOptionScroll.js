"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const utils_1 = require("../../../../utils");
const state_1 = require("./state");
const relativeElementVisibility = (listElement, containerScrollPosition, containerHeight = 0) => {
    const { offsetTop } = listElement;
    const isAbove = offsetTop < containerScrollPosition;
    const isBelow = offsetTop >= containerScrollPosition + containerHeight;
    return (isAbove && 'above') || (isBelow && 'below') || 'visible';
};
function useOptionScroll(context, value, label, scrollIntoView, isActive) {
    const { transition, listScrollPosition = 0, listClientRect = { height: 0 }, isAutoScrollingRef, } = react_1.useContext(context);
    const [newTriggerElement, callbackRef] = utils_1.useCallbackRef();
    react_1.useEffect(() => {
        if (scrollIntoView) {
            if (newTriggerElement) {
                newTriggerElement.scrollIntoView();
            }
            if (!isActive) {
                transition &&
                    transition(state_1.ComboboxActionType.NAVIGATE, {
                        option: { label, value },
                    });
            }
        }
    }, [newTriggerElement, scrollIntoView]);
    react_1.useEffect(() => {
        if (isActive && newTriggerElement) {
            const visibility = relativeElementVisibility(newTriggerElement, listScrollPosition, listClientRect.height);
            if (visibility !== 'visible') {
                if (isAutoScrollingRef)
                    isAutoScrollingRef.current = true;
                window.requestAnimationFrame(() => {
                    if (isAutoScrollingRef)
                        isAutoScrollingRef.current = false;
                });
                const attachToTop = visibility === 'above';
                newTriggerElement.scrollIntoView(attachToTop);
            }
        }
    }, [newTriggerElement, isActive]);
    return callbackRef;
}
exports.useOptionScroll = useOptionScroll;
//# sourceMappingURL=useOptionScroll.js.map