"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const throttle_1 = __importDefault(require("lodash/throttle"));
const xorWith_1 = __importDefault(require("lodash/xorWith"));
const react_1 = require("react");
const utils_1 = require("../../../../utils");
const state_1 = require("./state");
function useOptionEvents(props, context) {
    const { label, value, onClick, onMouseEnter } = props;
    const { data, onChange, transition, closeOnSelectPropRef, isAutoScrollingRef, } = react_1.useContext(context);
    const { options } = data;
    function handleClick() {
        const option = { label, value };
        if (onChange) {
            if (options) {
                ;
                onChange(xorWith_1.default(options, [option], (o1, o2) => o1.value === o2.value));
            }
            else {
                ;
                onChange(option);
            }
        }
        transition && transition(state_1.ComboboxActionType.SELECT_WITH_CLICK, { option });
        if (closeOnSelectPropRef && closeOnSelectPropRef.current) {
            transition && transition(state_1.ComboboxActionType.ESCAPE);
        }
    }
    const handleMouseEnter = throttle_1.default(() => {
        if (isAutoScrollingRef && isAutoScrollingRef.current)
            return;
        const option = { label, value };
        transition && transition(state_1.ComboboxActionType.NAVIGATE, { option });
    }, 50);
    return {
        onClick: utils_1.useWrapEvent(handleClick, onClick),
        onMouseEnter: utils_1.useWrapEvent(handleMouseEnter, onMouseEnter),
    };
}
exports.useOptionEvents = useOptionEvents;
//# sourceMappingURL=useOptionEvents.js.map