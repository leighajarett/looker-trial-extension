"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const findIndex_1 = __importDefault(require("lodash/findIndex"));
const throttle_1 = __importDefault(require("lodash/throttle"));
const xorWith_1 = __importDefault(require("lodash/xorWith"));
const react_1 = require("react");
const ComboboxContext_1 = require("../ComboboxContext");
const state_1 = require("./state");
function useKeyDown() {
    const context = react_1.useContext(ComboboxContext_1.ComboboxContext);
    const contextMulti = react_1.useContext(ComboboxContext_1.ComboboxMultiContext);
    const contextToUse = context.transition ? context : contextMulti;
    const { data, onChange, optionsRef, state, transition, autoCompletePropRef, persistSelectionPropRef, readOnlyPropRef, closeOnSelectPropRef, } = contextToUse;
    const { navigationOption } = data;
    function checkOnChange() {
        if (onChange) {
            if (context.transition) {
                ;
                onChange(navigationOption);
            }
            else {
                const newOptions = xorWith_1.default(data.options, navigationOption ? [navigationOption] : [], (o1, o2) => o1.value === o2.value);
                onChange(newOptions);
            }
        }
    }
    function selectOption() {
        checkOnChange();
        transition &&
            transition(state_1.ComboboxActionType.SELECT_WITH_KEYBOARD, {
                persistSelection: persistSelectionPropRef && persistSelectionPropRef.current,
            });
        if (closeOnSelectPropRef && closeOnSelectPropRef.current) {
            transition && transition(state_1.ComboboxActionType.ESCAPE);
        }
    }
    return throttle_1.default(function handleKeyDown(event) {
        const options = optionsRef ? optionsRef.current : [];
        switch (event.key) {
            case 'ArrowDown': {
                event.preventDefault();
                if (state === state_1.ComboboxState.IDLE) {
                    transition &&
                        transition(state_1.ComboboxActionType.NAVIGATE, {
                            persistSelection: persistSelectionPropRef && persistSelectionPropRef.current,
                        });
                }
                else {
                    const index = navigationOption
                        ? findIndex_1.default(options, ['value', navigationOption.value])
                        : -1;
                    const atBottom = index === options.length - 1;
                    if (atBottom) {
                        if (autoCompletePropRef && autoCompletePropRef.current) {
                            transition &&
                                transition(state_1.ComboboxActionType.NAVIGATE, { option: undefined });
                        }
                        else {
                            const firstOption = options[0];
                            transition &&
                                transition(state_1.ComboboxActionType.NAVIGATE, { option: firstOption });
                        }
                    }
                    else {
                        const nextOption = options[(index + 1) % options.length];
                        transition &&
                            transition(state_1.ComboboxActionType.NAVIGATE, { option: nextOption });
                    }
                }
                break;
            }
            case 'ArrowUp': {
                event.preventDefault();
                if (options.length === 0) {
                    return;
                }
                if (state === state_1.ComboboxState.IDLE) {
                    transition && transition(state_1.ComboboxActionType.NAVIGATE);
                }
                else {
                    const index = navigationOption
                        ? findIndex_1.default(options, ['value', navigationOption.value])
                        : -1;
                    if (index === 0) {
                        if (autoCompletePropRef && autoCompletePropRef.current) {
                            transition &&
                                transition(state_1.ComboboxActionType.NAVIGATE, { option: undefined });
                        }
                        else {
                            const lastOption = options[options.length - 1];
                            transition &&
                                transition(state_1.ComboboxActionType.NAVIGATE, { option: lastOption });
                        }
                    }
                    else if (index === -1) {
                        const option = options[options.length - 1];
                        transition && transition(state_1.ComboboxActionType.NAVIGATE, { option });
                    }
                    else {
                        const nextOption = options[(index - 1 + options.length) % options.length];
                        transition &&
                            transition &&
                            transition(state_1.ComboboxActionType.NAVIGATE, { option: nextOption });
                    }
                }
                break;
            }
            case 'Escape': {
                if (state !== state_1.ComboboxState.IDLE) {
                    transition && transition(state_1.ComboboxActionType.ESCAPE);
                }
                break;
            }
            case ' ':
            case 'Spacebar': {
                if (readOnlyPropRef &&
                    readOnlyPropRef.current &&
                    state === state_1.ComboboxState.NAVIGATING &&
                    navigationOption !== undefined) {
                    selectOption();
                }
                break;
            }
            case 'Enter': {
                if (state === state_1.ComboboxState.NAVIGATING &&
                    navigationOption !== undefined) {
                    event.preventDefault();
                    selectOption();
                }
                break;
            }
        }
    }, 50);
}
exports.useKeyDown = useKeyDown;
//# sourceMappingURL=useKeyDown.js.map