"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const design_tokens_1 = require("@looker/design-tokens");
const omit_1 = __importDefault(require("lodash/omit"));
const react_1 = __importStar(require("react"));
const styled_components_1 = __importStar(require("styled-components"));
const Icon_1 = require("../../../Icon");
const Text_1 = require("../../../Text");
const utils_1 = require("../../../utils");
const makeHash_1 = require("./utils/makeHash");
const ComboboxContext_1 = require("./ComboboxContext");
const getComboboxText_1 = require("./utils/getComboboxText");
const useOptionEvents_1 = require("./utils/useOptionEvents");
const useOptionStatus_1 = require("./utils/useOptionStatus");
const useAddOptionToContext_1 = require("./utils/useAddOptionToContext");
const useOptionScroll_1 = require("./utils/useOptionScroll");
exports.ComboboxOptionWrapper = react_1.forwardRef((_a, forwardedRef) => {
    var { children, label, value } = _a, rest = __rest(_a, ["children", "label", "value"]);
    return (react_1.default.createElement(ComboboxContext_1.OptionContext.Provider, { value: { label, value } },
        react_1.default.createElement("li", Object.assign({}, omit_1.default(rest, 'color'), { ref: forwardedRef, id: String(makeHash_1.makeHash(value)), role: "option", tabIndex: -1 }), children)));
});
exports.ComboboxOptionWrapper.displayName = 'ComboboxOptionWrapper';
const ComboboxOptionInternal = react_1.forwardRef((_a, forwardedRef) => {
    var { children, highlightText = true, scrollIntoView } = _a, props = __rest(_a, ["children", "highlightText", "scrollIntoView"]);
    const { label, value } = props;
    useAddOptionToContext_1.useAddOptionToContext(ComboboxContext_1.ComboboxContext, value, label, scrollIntoView);
    const optionEvents = useOptionEvents_1.useOptionEvents(props, ComboboxContext_1.ComboboxContext);
    const { isActive, isSelected } = useOptionStatus_1.useOptionStatus(ComboboxContext_1.ComboboxContext, value);
    const scrollRef = useOptionScroll_1.useOptionScroll(ComboboxContext_1.ComboboxContext, value, label, scrollIntoView, isActive);
    const ref = utils_1.useForkedRef(scrollRef, forwardedRef);
    return (react_1.default.createElement(exports.ComboboxOptionWrapper, Object.assign({}, props, optionEvents, { ref: ref, "aria-selected": isActive }),
        react_1.default.createElement(exports.ComboboxOptionDetail, null, isSelected && react_1.default.createElement(Icon_1.Icon, { name: "Check", mr: 0 })),
        children || react_1.default.createElement(exports.ComboboxOptionText, { highlightText: highlightText })));
});
ComboboxOptionInternal.displayName = 'ComboboxOptionInternal';
exports.ComboboxOptionDetail = styled_components_1.default.div.withConfig({ displayName: "ComboboxOptionDetail", componentId: "sc-193hzvs" }) `
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${(props) => props.theme.space.large};
`;
exports.comboboxOptionGrid = styled_components_1.css `
  display: grid;
  grid-gap: ${(props) => props.theme.space.xxsmall};
  grid-template-columns: ${(props) => props.theme.space.medium} 1fr;
`;
exports.comboboxOptionStyle = styled_components_1.css `
  ${design_tokens_1.reset}
  ${design_tokens_1.color}
  ${design_tokens_1.flexbox}
  ${design_tokens_1.layout}
  ${design_tokens_1.space}
  ${design_tokens_1.typography}
  cursor: default;
  align-items: flex-start;
  ${exports.comboboxOptionGrid}
  outline: none;

  &[aria-selected='true'] {
    background-color: ${(props) => props.theme.colors.semanticColors.primary.lighter};
    color:  ${(props) => props.theme.colors.semanticColors.primary.darker};
  }
`;
exports.ComboboxOption = styled_components_1.default(ComboboxOptionInternal).withConfig({ displayName: "ComboboxOption", componentId: "sc-1yo9c6e" }) `
  ${exports.comboboxOptionStyle}
`;
exports.comboboxOptionDefaultProps = {
    color: 'palette.charcoal700',
    display: 'flex',
    fontSize: 'small',
    px: 'xsmall',
    py: 'xxsmall',
};
exports.ComboboxOption.defaultProps = exports.comboboxOptionDefaultProps;
function ComboboxOptionTextInternal(_a) {
    var { highlightText = true } = _a, props = __rest(_a, ["highlightText"]);
    const context = react_1.useContext(ComboboxContext_1.ComboboxContext);
    const contextMulti = react_1.useContext(ComboboxContext_1.ComboboxMultiContext);
    const contextToUse = context.transition ? context : contextMulti;
    const { data } = contextToUse;
    const { inputValue } = data;
    const contextOption = data.option;
    const option = react_1.useContext(ComboboxContext_1.OptionContext);
    const text = getComboboxText_1.getComboboxText(option);
    if (!highlightText ||
        !inputValue ||
        inputValue === '' ||
        inputValue === getComboboxText_1.getComboboxText(contextOption)) {
        return react_1.default.createElement("span", Object.assign({}, props), text);
    }
    return (react_1.default.createElement("span", Object.assign({}, props),
        react_1.default.createElement(Text_1.ReplaceText, { match: inputValue, replace: (str, index) => (react_1.default.createElement(Text_1.Text, { fontWeight: "semiBold", fontSize: "small", textDecoration: "underline", key: index }, str)) }, text)));
}
exports.ComboboxOptionTextInternal = ComboboxOptionTextInternal;
exports.ComboboxOptionText = styled_components_1.default(ComboboxOptionTextInternal).withConfig({ displayName: "ComboboxOptionText", componentId: "sc-1qz6kly" }) ``;
//# sourceMappingURL=ComboboxOption.js.map