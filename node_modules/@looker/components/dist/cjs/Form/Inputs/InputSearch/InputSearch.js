"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const omit_1 = __importDefault(require("lodash/omit"));
const pick_1 = __importDefault(require("lodash/pick"));
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const InputProps_1 = require("../InputProps");
const InputText_1 = require("../InputText");
const utils_1 = require("../../../utils");
const Layout_1 = require("../../../Layout");
const Icon_1 = require("../../../Icon");
const InputSearchControls_1 = require("./InputSearchControls");
const getHeight = (py) => {
    const verticalSpace = typeof py === 'number'
        ? `${((py || 0) + 1) * 2}px`
        : `(${String(py)} * 2) - 2px`;
    return `calc(${InputText_1.inputTextDefaults.height} - ${verticalSpace})`;
};
exports.SearchIcon = styled_components_1.default(Icon_1.Icon).withConfig({ displayName: "SearchIcon", componentId: "sc-1h1nl6f" }) `
  color: ${(props) => props.theme.colors.palette.charcoal400};
  padding-left: ${(props) => props.theme.space.small};
`;
const InputSearchComponent = react_1.forwardRef((_a, forwardedRef) => {
    var { onChange, onClear, onClick, onMouseDown, onMouseEnter, onMouseLeave, onMouseOut, onMouseOver, onMouseUp, children, className, defaultValue, hideControls = false, hideSearchIcon = false, showClear, summary, value: controlledValue = '' } = _a, props = __rest(_a, ["onChange", "onClear", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver", "onMouseUp", "children", "className", "defaultValue", "hideControls", "hideSearchIcon", "showClear", "summary", "value"]);
    const isControlled = utils_1.useControlWarn({
        controllingProps: ['onChange', 'onClear', 'value'],
        isControlledCheck: () => onChange !== undefined,
        name: 'InputSearch',
    });
    const [uncontrolledValue, setValue] = react_1.useState(defaultValue || controlledValue);
    const inputValue = isControlled ? controlledValue : uncontrolledValue;
    const internalRef = react_1.useRef(null);
    const ref = utils_1.useForkedRef(internalRef, forwardedRef);
    function handleMouseDown() {
        window.requestAnimationFrame(() => {
            internalRef.current && internalRef.current.focus();
        });
    }
    const handleClear = (e) => {
        setValue('');
        if (onClear) {
            onClear(e);
        }
        else if (onChange) {
            onChange({
                currentTarget: { value: '' },
            });
        }
    };
    const handleChange = (event) => {
        setValue(event.currentTarget.value);
        onChange && onChange(event);
    };
    const controls = !hideControls && (react_1.default.createElement(InputSearchControls_1.InputSearchControls, { onClear: handleClear, showClear: showClear || inputValue.length > 0, summary: summary, height: getHeight(props.py), disabled: props.disabled }));
    const mouseHandlers = {
        onClick,
        onMouseDown: utils_1.useWrapEvent(handleMouseDown, onMouseDown),
        onMouseEnter,
        onMouseLeave,
        onMouseOut,
        onMouseOver,
        onMouseUp,
    };
    const input = (react_1.default.createElement(InputText_1.InputText, Object.assign({ onChange: handleChange, value: inputValue, focusStyle: { outline: 'none' }, pr: "0" }, pick_1.default(props, InputProps_1.inputPropKeys), { ref: ref })));
    return (react_1.default.createElement(Layout_1.Flex, Object.assign({ className: className }, omit_1.default(props, InputProps_1.inputPropKeys), mouseHandlers),
        !hideSearchIcon && react_1.default.createElement(exports.SearchIcon, { name: "Search", size: 30 }),
        children ? (react_1.default.createElement(Layout_1.Flex, { alignContent: "flex-start", flexWrap: "wrap" },
            children,
            input)) : (input),
        controls));
});
InputSearchComponent.displayName = 'InputSearchComponent';
exports.InputSearch = styled_components_1.default(InputSearchComponent).withConfig({ displayName: "InputSearch", componentId: "sc-19dgbb0" }) `
  align-items: center;
  background-color: ${(props) => props.theme.colors.palette.white};

  &:hover {
    ${InputText_1.inputTextHover}
  }

  &:focus-within {
    ${InputText_1.inputTextFocus}
  }

  ${(props) => (props.disabled ? InputText_1.inputTextDisabled : '')}

  ${InputText_1.inputTextValidation}

  ${InputText_1.InputText} {
    border: none;
    appearance: none;
    background: transparent;
    box-shadow: none;
    flex: 1;

    width: 100%;
    height: ${(props) => getHeight(props.py)};

    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      appearance: none;
    }
  }
`;
exports.InputSearch.defaultProps = Object.assign(Object.assign({}, omit_1.default(InputText_1.inputTextDefaults, ['height', 'px'])), { pr: 'xxsmall', py: 2 });
//# sourceMappingURL=InputSearch.js.map