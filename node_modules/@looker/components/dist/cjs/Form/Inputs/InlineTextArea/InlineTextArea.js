"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const pick_1 = __importDefault(require("lodash/pick"));
const react_1 = __importStar(require("react"));
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const styled_components_1 = __importDefault(require("styled-components"));
const design_tokens_1 = require("@looker/design-tokens");
const InputProps_1 = require("../InputProps");
exports.InlineTextAreaLayout = react_1.forwardRef((_a, ref) => {
    var { className, onChange, underlineOnlyOnHover, value: valueProp, placeholder } = _a, props = __rest(_a, ["className", "onChange", "underlineOnlyOnHover", "value", "placeholder"]);
    const [value, setValueChange] = react_1.default.useState(valueProp || '');
    const displayValue = isFunction_1.default(onChange) ? valueProp : value;
    const handleValueChange = (event) => {
        setValueChange(event.currentTarget.value);
    };
    const handleChange = isFunction_1.default(onChange) ? onChange : handleValueChange;
    return (react_1.default.createElement("div", { className: className, "data-testid": "inline-text-area" },
        react_1.default.createElement(Input, Object.assign({ onChange: handleChange, ref: ref, underlineOnlyOnHover: underlineOnlyOnHover, value: displayValue }, pick_1.default(props, InputProps_1.inputPropKeys))),
        react_1.default.createElement(VisibleText, { displayValue: displayValue }, displayValue || placeholder)));
});
exports.InlineTextAreaLayout.displayName = 'InlineTextAreaLayout';
const Input = styled_components_1.default.textarea.withConfig({ displayName: "Input", componentId: "sc-8xdmxp" }) `
  background: transparent;
  border: none;
  color: transparent;
  font: inherit;
  caret-color: ${(props) => props.theme.colors.palette.charcoal900};
  height: 100%;
  left: 0;
  outline: none;
  padding: 0;
  position: absolute;
  resize: none;
  text-transform: inherit;
  top: 0;
  width: 100%;
`;
const VisibleText = styled_components_1.default.div.withConfig({ displayName: "VisibleText", componentId: "sc-1yws5bi" }) `
  color: ${({ displayValue, theme }) => displayValue
    ? theme.colors.palette.charcoal900
    : theme.colors.palette.charcoal400};
`;
exports.InlineTextArea = styled_components_1.default(exports.InlineTextAreaLayout).withConfig({ displayName: "InlineTextArea", componentId: "sc-1s645a8" }) `
  ${design_tokens_1.typography}

  border: none;
  border-bottom: 1px dashed;
  border-bottom-color: ${(props) => props.underlineOnlyOnHover
    ? 'transparent'
    : props.theme.colors.palette.charcoal300};
  display: inline-flex;
  flex-direction: column;
  justify-content: center;
  position: relative;
  min-width: 2rem;
  min-height: ${(props) => props.theme.lineHeights.medium};
  white-space: pre-wrap;

  :focus,
  :hover {
    outline: none;
    border-bottom-color: ${(props) => props.theme.colors.palette.purple400};
    background-color: ${(props) => props.theme.colors.palette.charcoal100};
  }

  :focus {
    border-bottom-style: solid;
  }
`;
//# sourceMappingURL=InlineTextArea.js.map