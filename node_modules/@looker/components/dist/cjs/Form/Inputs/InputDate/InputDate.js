"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const isEqual_1 = __importDefault(require("lodash/isEqual"));
const InputText_1 = require("../InputText");
const Calendar_1 = require("../../../Calendar");
const utils_1 = require("../../../utils");
const isDateInView = (value, viewMonth) => {
    if (!value) {
        return false;
    }
    if (value.getFullYear() === viewMonth.getFullYear() &&
        value.getMonth() === viewMonth.getMonth()) {
        return true;
    }
    return false;
};
exports.InputDate = ({ onChange, defaultValue, locale = utils_1.Locales.English, validationType, onValidationFail, value, }) => {
    utils_1.useReadOnlyWarn('InputDate', value, onChange);
    const [selectedDate, setSelectedDate] = react_1.useState(value || defaultValue);
    const [validDate, setValidDate] = react_1.useState(validationType !== 'error');
    const [textInputValue, setTextInputValue] = react_1.useState(selectedDate ? utils_1.formatDateString(selectedDate, locale) : '');
    const [viewMonth, setViewMonth] = react_1.useState(defaultValue || new Date(Date.now()));
    const handleDateChange = (date) => {
        setValidDate(true);
        setSelectedDate(date);
        setViewMonth(date);
        if (isFunction_1.default(onChange)) {
            onChange(date);
        }
    };
    const handleDayClick = (date) => {
        setTextInputValue(utils_1.formatDateString(date, locale));
        handleDateChange(date);
    };
    const handleTextInputChange = (e) => {
        const value = e.target.value;
        setTextInputValue(value);
        if (value.length === 0) {
            handleDateChange();
        }
        else {
            const parsedValue = utils_1.parseDateFromString(value, locale);
            if (parsedValue) {
                handleDateChange(parsedValue);
            }
        }
    };
    const handleValidation = (e) => {
        const value = e.target.value;
        const isValid = value.length === 0 || !!utils_1.parseDateFromString(value, locale);
        setValidDate(isValid);
        if (!isValid && isFunction_1.default(onValidationFail)) {
            onValidationFail(value);
        }
    };
    const handleNavClick = (month) => {
        setViewMonth(month);
    };
    const renderedValidationType = !validDate ? 'error' : undefined;
    react_1.useEffect(() => {
        if (value && !isEqual_1.default(value, selectedDate)) {
            setSelectedDate(value);
            value && setTextInputValue(utils_1.formatDateString(value, locale));
            value &&
                viewMonth &&
                !isDateInView(value, viewMonth) &&
                setViewMonth(value);
        }
    }, [textInputValue, value, onChange]);
    return (react_1.default.createElement(InputDateWrapper, null,
        react_1.default.createElement(InputTextWrapper, null,
            react_1.default.createElement(InputText_1.InputText, { placeholder: `Date (${utils_1.formatDateString(new Date(Date.now()), locale)})`, value: textInputValue, onChange: handleTextInputChange, validationType: renderedValidationType, onBlur: handleValidation, "data-testid": "text-input" })),
        react_1.default.createElement(CalendarWrapper, null,
            react_1.default.createElement(Calendar_1.Calendar, { selectedDates: selectedDate, onDayClick: handleDayClick, locale: locale, viewMonth: viewMonth, onNowClick: handleNavClick, onNextClick: handleNavClick, onPrevClick: handleNavClick }))));
};
const InputDateWrapper = styled_components_1.default.div.withConfig({ displayName: "InputDateWrapper", componentId: "sc-kwvw1p" }) `
  display: inline-block;
`;
const InputTextWrapper = styled_components_1.default.div.withConfig({ displayName: "InputTextWrapper", componentId: "sc-mhsy30" }) `
  padding: ${({ theme }) => theme.space.small};
  ${InputText_1.InputText} {
    width: 100%;
  }
`;
const CalendarWrapper = styled_components_1.default.div.withConfig({ displayName: "CalendarWrapper", componentId: "sc-1hev99p" }) `
  ${Calendar_1.Calendar} {
    padding: 0;
  }
`;
//# sourceMappingURL=InputDate.js.map