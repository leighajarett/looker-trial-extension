"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const Layout_1 = require("../../../Layout");
const List_1 = require("../../../List");
const Text_1 = require("../../../Text");
const Combobox_1 = require("../Combobox");
const options_1 = require("./utils/options");
const useWindowedOptions_1 = require("./utils/useWindowedOptions");
const renderOption = (option, index, scrollIntoView) => {
    if (option.description) {
        return (react_1.default.createElement(Combobox_1.ComboboxOption, Object.assign({}, option, { key: index, py: "xxsmall", scrollIntoView: scrollIntoView }),
            react_1.default.createElement(SelectOptionWithDescription, Object.assign({}, option))));
    }
    return react_1.default.createElement(Combobox_1.ComboboxOption, Object.assign({}, option, { key: index }));
};
const renderMultiOption = (option, index, scrollIntoView) => {
    if (option.description) {
        return (react_1.default.createElement(Combobox_1.ComboboxMultiOption, Object.assign({}, option, { key: index, py: "xxsmall", scrollIntoView: scrollIntoView }),
            react_1.default.createElement(SelectOptionWithDescription, Object.assign({}, option))));
    }
    return react_1.default.createElement(Combobox_1.ComboboxMultiOption, Object.assign({}, option, { key: index }));
};
function SelectOptionWithDescription({ description, }) {
    return (react_1.default.createElement(Layout_1.Box, null,
        react_1.default.createElement(Text_1.Heading, { fontSize: "small", fontWeight: "semiBold", pb: "xxsmall" },
            react_1.default.createElement(Combobox_1.ComboboxOptionText, null)),
        react_1.default.createElement(Text_1.Paragraph, { variant: "subdued", fontSize: "small" }, description)));
}
exports.SelectOptionWithDescription = SelectOptionWithDescription;
const SelectOptionGroupTitle = styled_components_1.default(Text_1.Heading).withConfig({ displayName: "SelectOptionGroupTitle", componentId: "sc-dp1svm" }) `
  padding-top: ${({ theme }) => theme.space.xxsmall};
  ${Combobox_1.comboboxOptionGrid}
  ${({ isMulti, theme }) => isMulti ? `grid-template-columns: ${theme.space.xlarge} 1fr;` : ''}
`;
SelectOptionGroupTitle.defaultProps = {
    fontSize: 'xxsmall',
    fontWeight: 'semiBold',
    px: 'xsmall',
    py: 'xxsmall',
    variant: 'subdued',
};
exports.SelectOptionGroup = ({ options, label, isMulti, }) => (react_1.default.createElement(SelectOptionGroupContainer, null,
    label && (react_1.default.createElement(SelectOptionGroupTitle, { isMulti: isMulti },
        react_1.default.createElement("span", null),
        label)),
    options.map((option, index) => isMulti ? renderMultiOption(option, index) : renderOption(option, index))));
const SelectOptionGroupContainer = styled_components_1.default.div.withConfig({ displayName: "SelectOptionGroupContainer", componentId: "sc-t9dag5" }) `
  padding: ${({ theme }) => theme.space.xsmall} 0;
  border-top: 1px solid;
  border-bottom: 1px solid;
  border-color: ${({ theme }) => theme.colors.palette.charcoal200};
  &:first-child,
  & + div {
    border-top: none;
  }
  &:last-child {
    border-bottom: none;
  }
`;
function SelectOptions({ options, isFilterable, showCreate, formatCreateLabel, isMulti, noOptionsLabel = 'No options', windowedOptions, }) {
    const { start, end, before, after, scrollToFirst, scrollToLast, } = useWindowedOptions_1.useWindowedOptions(windowedOptions, options, isMulti);
    const optionsToRender = options && options.slice(start, end + 1);
    const renderToUse = isMulti ? renderMultiOption : renderOption;
    const noOptions = (react_1.default.createElement(List_1.ListItem, { fontSize: "small", px: "medium", py: "xxsmall" }, noOptionsLabel));
    const createOption = isFilterable && showCreate && (react_1.default.createElement(SelectMultiCreateOption, { options: options, formatLabel: formatCreateLabel, noOptions: noOptions, key: "create" }));
    return (react_1.default.createElement(react_1.default.Fragment, null,
        options && scrollToFirst
            ? renderToUse(options[0], 0, true)
            : null,
        before,
        optionsToRender && optionsToRender.length > 0
            ? [
                ...optionsToRender.map((option, index) => {
                    const optionAsGroup = option;
                    const correctedIndex = index + start;
                    return optionAsGroup.options ? (react_1.default.createElement(exports.SelectOptionGroup, Object.assign({ key: correctedIndex }, optionAsGroup, { isMulti: isMulti }))) : (renderToUse(option, correctedIndex));
                }),
                createOption,
            ]
            : createOption || noOptions,
        after,
        options && scrollToLast
            ? renderToUse(options[options.length - 1], 0, true)
            : null));
}
exports.SelectOptions = SelectOptions;
function SelectMultiCreateOption({ options, noOptions, formatLabel, }) {
    const { data: { inputValue, options: currentOptions }, } = react_1.useContext(Combobox_1.ComboboxMultiContext);
    const shouldShow = react_1.useMemo(() => {
        return options_1.notInOptions(currentOptions, options, inputValue);
    }, [currentOptions, options, inputValue]);
    if (!inputValue)
        return null;
    if (!shouldShow) {
        if (!options || options.length === 0)
            return react_1.default.createElement(react_1.default.Fragment, null, noOptions);
        return null;
    }
    return (react_1.default.createElement(Combobox_1.ComboboxMultiOption, { value: inputValue, highlightText: false, hideCheckMark: true }, formatLabel ? formatLabel(inputValue) : `Create "${inputValue}"`));
}
//# sourceMappingURL=SelectOptions.js.map