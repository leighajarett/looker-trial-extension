"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const design_tokens_1 = require("@looker/design-tokens");
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const polished_1 = require("polished");
const Button_1 = require("../Button");
const Text_1 = require("../Text");
const truncate_1 = require("../Text/truncate");
const ChipStyle = styled_components_1.default.span.withConfig({ displayName: "ChipStyle", componentId: "sc-tncqtd" }) `
  ${design_tokens_1.reset}

  ${design_tokens_1.color}
  ${design_tokens_1.layout}
  ${design_tokens_1.space}
  ${design_tokens_1.typography}
  ${Button_1.IconButton}{
    background-color: transparent;
    flex-shrink: 0;
  }

  align-items: center;
  background-color: ${(props) => props.theme.colors.palette.purple000};
  border-radius: 4px;
  color: ${(props) => props.theme.colors.palette.purple500};
  display: flex;
  justify-items: center;
  & + & {
    margin-left: ${(props) => props.theme.space.xxsmall};
  }

  &:hover {
    background-color: ${(props) => props.theme.colors.palette.purple100};
  }

  &:focus {
    background-color: ${(props) => props.theme.colors.palette.purple200};
    outline: none;
  }

  ${(props) => props.focusVisible &&
    `box-shadow: 0 0 0 0.15rem ${polished_1.rgba(props.theme.colors.palette.purple300, 0.25)};`};

  ${(props) => props.disabled &&
    `color: ${props.theme.colors.palette.charcoal400};
      background-color: ${props.theme.colors.palette.charcoal100};

      &:hover {
        background-color: ${props.theme.colors.palette.charcoal100};
      }
    `}
`;
const ChipLabel = styled_components_1.default(Text_1.Text).withConfig({ displayName: "ChipLabel", componentId: "sc-o3fli9" }) `
  ${truncate_1.truncate}
`;
const ChipJSX = react_1.forwardRef((props, ref) => {
    const { children, disabled, fontSize, onBlur, onDelete, onKeyUp, onKeyDown, truncate } = props, restProps = __rest(props, ["children", "disabled", "fontSize", "onBlur", "onDelete", "onKeyUp", "onKeyDown", "truncate"]);
    const [isFocusVisible, setFocusVisible] = react_1.useState(false);
    const handleOnKeyUp = (event) => {
        setFocusVisible(true);
        onKeyUp && onKeyUp(event);
    };
    const handleOnBlur = (event) => {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    const handleOnKeyDown = (event) => {
        setFocusVisible(false);
        if (event.key === 'Backspace') {
            onDelete && onDelete();
        }
        onKeyDown && onKeyDown(event);
        setFocusVisible(false);
    };
    const handleDelete = () => {
        if (!disabled) {
            onDelete && onDelete();
        }
        setFocusVisible(false);
    };
    return (react_1.default.createElement(ChipStyle, Object.assign({ disabled: disabled, focusVisible: isFocusVisible, onBlur: handleOnBlur, onKeyDown: handleOnKeyDown, onKeyUp: handleOnKeyUp, ref: ref, tabIndex: disabled ? undefined : 0 }, restProps),
        react_1.default.createElement(ChipLabel, { fontSize: fontSize, truncate: truncate }, children),
        onDelete && !disabled && (react_1.default.createElement(Button_1.IconButton, { color: "primary", disabled: disabled, icon: "Close", label: "Delete", ml: "xsmall", onClick: handleDelete, size: "xxsmall" }))));
});
ChipJSX.displayName = 'ChipJSX';
exports.Chip = styled_components_1.default(ChipJSX).withConfig({ displayName: "Chip", componentId: "sc-1z8g6q" }) ``;
exports.Chip.defaultProps = {
    fontSize: 'xsmall',
    fontWeight: 'semiBold',
    height: 28,
    maxWidth: 320,
    mb: 'xxsmall',
    minWidth: 44,
    px: 'xsmall',
    py: 'xxsmall',
    truncate: true,
};
//# sourceMappingURL=Chip.js.map