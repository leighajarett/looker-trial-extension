"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Modal_1 = require("../Modal");
const utils_1 = require("../utils");
const OverlaySurface_1 = require("../Overlay/OverlaySurface");
const TooltipContent_1 = require("./TooltipContent");
exports.CustomizableTooltipAttributes = {};
function useTooltip({ arrow = true, canClose, content, isOpen: initializeOpen = false, width, textAlign, disabled, surfaceStyles, triggerElement, placement: propsPlacement = 'bottom', }) {
    const [isOpen, setIsOpen] = react_1.useState(initializeOpen);
    const [surfaceElement, surfaceCallbackRef] = utils_1.useCallbackRef();
    const [newTriggerElement, callbackRef] = utils_1.useCallbackRef();
    const element = typeof triggerElement === 'undefined' ? newTriggerElement : triggerElement;
    const handleOpen = () => setIsOpen(true);
    const handleClose = () => {
        if (canClose && !canClose())
            return;
        setIsOpen(false);
    };
    const handleMouseOut = (event) => {
        if (!isOpen)
            return;
        const related = event.relatedTarget;
        if (element && (element === related || element.contains(related))) {
            return;
        }
        if (surfaceElement &&
            (surfaceElement === related || surfaceElement.contains(related))) {
            return;
        }
        window.requestAnimationFrame(() => {
            handleClose();
        });
    };
    const eventHandlers = {
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseOut: handleMouseOut,
        onMouseOver: handleOpen,
    };
    const usePopperProps = react_1.useMemo(() => ({
        anchor: element,
        arrow,
        options: {
            modifiers: [
                {
                    enabled: true,
                    name: 'flip',
                    options: {
                        flipVariations: true,
                    },
                },
            ],
            placement: propsPlacement,
        },
    }), [arrow, element, propsPlacement]);
    const { arrowProps, placement, popperInstanceRef, style, targetRef, } = utils_1.usePopper(usePopperProps);
    const ref = utils_1.useForkedRef(targetRef, surfaceCallbackRef);
    const popper = isOpen && content && !disabled ? (react_1.default.createElement(Modal_1.ModalContext.Provider, { value: { closeModal: handleClose } },
        react_1.default.createElement(OverlaySurface_1.OverlaySurface, Object.assign({ arrow: arrow, arrowProps: arrowProps, eventHandlers: { onMouseOut: handleMouseOut }, placement: placement, ref: ref, style: style, zIndex: exports.CustomizableTooltipAttributes.zIndex, backgroundColor: "palette.charcoal600", borderRadius: "medium", boxShadow: 3, color: "palette.charcoal000" }, surfaceStyles),
            react_1.default.createElement(TooltipContent_1.TooltipContent, { width: width, textAlign: textAlign }, content)))) : null;
    return {
        eventHandlers,
        popperInstanceRef,
        ref: callbackRef,
        tooltip: popper,
    };
}
exports.useTooltip = useTooltip;
exports.Tooltip = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    const { eventHandlers, tooltip, ref } = useTooltip(props);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        tooltip,
        children(eventHandlers, ref)));
};
//# sourceMappingURL=Tooltip.js.map