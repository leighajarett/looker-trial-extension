"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const polished_1 = require("polished");
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const design_tokens_1 = require("@looker/design-tokens");
const utils_1 = require("../utils");
exports.ButtonItemLabelText = styled_components_1.default.span.withConfig({ displayName: "ButtonItemLabelText", componentId: "sc-1xq0wje" }) ``;
exports.ButtonItemLabel = styled_components_1.default.label.withConfig({ displayName: "ButtonItemLabel", componentId: "sc-11kd6rb" }) `
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  padding: 0 ${(props) => props.theme.space.small};
  user-select: none;
  border-radius: 4px;
  background: ${(props) => props.selected
    ? `hsla(${polished_1.parseToHsl(props.theme.colors.palette.purple400).hue}, 100%, 98%, 1)`
    : 'transparent'};
  border-color: ${(props) => props.selected
    ? `hsla(${polished_1.parseToHsl(props.theme.colors.palette.purple400).hue}, 100%, 98%, 1)`
    : `hsla(${polished_1.parseToHsl(props.theme.colors.palette.purple400).hue}, 25%, 90%, 1)`};
  transition: background ${(props) => props.theme.transitions.durationQuick}
    ease;

  &:hover {
    background: ${(props) => !props.selected
    ? `hsla(${polished_1.parseToHsl(props.theme.colors.palette.purple400).hue}, 25%, 97%, 0.7)`
    : false};
  }

  &:active {
    background: ${(props) => `hsla(${polished_1.parseToHsl(props.theme.colors.palette.purple400).hue}, 50%, 96%, 0.9)`};
  }

  &:focus-within {
    box-shadow: ${(props) => `0 0 .5px 1px ${props.theme.colors.palette.purple200}`};
  }

  ${exports.ButtonItemLabelText} {
    color: ${(props) => props.theme.colors.palette.charcoal600};
  }

  input:checked + ${exports.ButtonItemLabelText} {
    color: ${(props) => props.theme.colors.palette.purple400};

    /* stylelint-disable */
    text-shadow: -0.025ex 0 currentColor, 0.025ex 0 currentColor;
    /* stylelint-enabled */
  }
  ${design_tokens_1.space}
  ${design_tokens_1.typography}
`;
const ButtonInput = styled_components_1.default.input.withConfig({ displayName: "ButtonInput", componentId: "sc-15kavqs" }) `
  display: none;
`;
const ButtonItemComponent = react_1.forwardRef((_a, ref) => {
    var { children, disabled, id: propsID, isControlled, name, onChange, selected = false, value } = _a, props = __rest(_a, ["children", "disabled", "id", "isControlled", "name", "onChange", "selected", "value"]);
    const [uncontrolledSelected, setUncontrolledSelected] = react_1.useState(selected);
    const id = utils_1.useID(propsID);
    function handleChange(e) {
        if (onChange) {
            onChange(e);
        }
        if (!isControlled) {
            setUncontrolledSelected(!uncontrolledSelected);
        }
    }
    const showSelected = isControlled ? selected : uncontrolledSelected;
    return (react_1.default.createElement(exports.ButtonItemLabel, Object.assign({ disabled: disabled, htmlFor: id, fontFamily: "brand", py: "small", selected: showSelected }, props),
        react_1.default.createElement(ButtonInput, { type: props.type, disabled: disabled, name: name, id: id, onChange: handleChange, checked: showSelected, value: value, ref: ref }),
        react_1.default.createElement(exports.ButtonItemLabelText, null, children)));
});
ButtonItemComponent.displayName = 'ButtonItemComponent';
exports.ButtonItem = styled_components_1.default(ButtonItemComponent).withConfig({ displayName: "ButtonItem", componentId: "sc-188p7i8" }) ``;
//# sourceMappingURL=ButtonItem.js.map