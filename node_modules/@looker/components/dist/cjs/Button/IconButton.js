"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const some_1 = __importDefault(require("lodash/some"));
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const styled_components_1 = __importStar(require("styled-components"));
const design_tokens_1 = require("@looker/design-tokens");
const react_1 = __importStar(require("react"));
const Icon_1 = require("../Icon");
const Tooltip_1 = require("../Tooltip");
const utils_1 = require("../utils");
const VisuallyHidden_1 = require("../VisuallyHidden");
const ButtonBase_1 = require("./ButtonBase");
const ButtonTransparent_1 = require("./ButtonTransparent");
const size_1 = require("./size");
exports.IconButtonStyle = styled_components_1.default.button.withConfig({ displayName: "IconButtonStyle", componentId: "sc-13kozb4" }) `
  ${ButtonBase_1.buttonCSS}
  height: auto;
`;
const IconButtonComponent = react_1.forwardRef((props, forwardRef) => {
    const { icon, size = 'xsmall', label, color, tooltipDisabled, tooltipPlacement, onFocus: propsOnFocus, onBlur: propsOnBlur, onMouseOver: propsOnMouseOver, onMouseOut: propsOnMouseOut } = props, rest = __rest(props, ["icon", "size", "label", "color", "tooltipDisabled", "tooltipPlacement", "onFocus", "onBlur", "onMouseOver", "onMouseOut"]);
    const hasOuterTooltip = some_1.default([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], isFunction_1.default);
    const { ref, tooltip, eventHandlers: { onFocus, onBlur, onMouseOver, onMouseOut }, } = Tooltip_1.useTooltip({
        content: label,
        disabled: tooltipDisabled || hasOuterTooltip,
        placement: tooltipPlacement,
    });
    const eventHandlers = {
        onBlur: utils_1.useWrapEvent(onBlur, propsOnBlur),
        onFocus: utils_1.useWrapEvent(onFocus, propsOnFocus),
        onMouseOut: utils_1.useWrapEvent(onMouseOut, propsOnMouseOut),
        onMouseOver: utils_1.useWrapEvent(onMouseOver, propsOnMouseOver),
    };
    const actualRef = utils_1.useForkedRef(forwardRef, ref);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        tooltip,
        react_1.default.createElement(ButtonTransparent_1.ButtonTransparent, Object.assign({ ref: actualRef, color: color, p: "none", size: size, width: size_1.buttonSizeMap[size] }, eventHandlers, rest),
            react_1.default.createElement(VisuallyHidden_1.VisuallyHidden, null, label),
            react_1.default.createElement(Icon_1.Icon, { name: icon, size: size_1.buttonSizeMap[size] - 6, "aria-hidden": true }))));
});
IconButtonComponent.displayName = 'IconButtonComponent';
const outlineCSS = (props) => {
    const { color = 'primary' } = props;
    return styled_components_1.css `
    border: 1px solid
      ${(props) => props.theme.colors.semanticColors[color].borderColor};

    &:hover,
    &:focus,
    &.hover {
      border-color: ${(props) => props.theme.colors.semanticColors[color].main};
    }

    &:active,
    &.active {
      border-color: ${(props) => props.theme.colors.semanticColors[color].main};
    }

    &[disabled] {
      &:hover,
      &:active,
      &:focus {
        border-color: ${(props) => props.theme.colors.semanticColors[color].borderColor};
      }
    }
  `;
};
exports.IconButton = styled_components_1.default(IconButtonComponent).withConfig({ displayName: "IconButton", componentId: "sc-17n0jr7" }) `
  ${design_tokens_1.reset}
  ${design_tokens_1.space}

  ${(props) => props.outline && outlineCSS}

  ${design_tokens_1.pseudoClasses}
  ${({ shape }) => shape === 'round' && 'border-radius: 100%;'}

  svg {
    pointer-events: none;
  }
`;
exports.IconButton.defaultProps = { color: 'neutral', type: 'button' };
//# sourceMappingURL=IconButton.js.map