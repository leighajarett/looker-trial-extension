"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const uniqueId_1 = __importDefault(require("lodash/uniqueId"));
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const utils_1 = require("../utils");
const ButtonItem_1 = require("./ButtonItem");
const ButtonSet_1 = require("./ButtonSet");
const ButtonToggleComponent = ButtonSet_1.ButtonSet;
const ButtonToggleFactory = react_1.forwardRef((_a, ref) => {
    var { onChange, value: controlledValue } = _a, props = __rest(_a, ["onChange", "value"]);
    const isControlled = utils_1.useControlWarn({
        controllingProps: ['onChange', 'value'],
        isControlledCheck: () => onChange !== undefined,
        name: 'ButtonToggle',
    });
    const [value, setValue] = react_1.useState();
    function handleChange(e) {
        if (onChange) {
            onChange(e.target.value);
        }
        else {
            setValue(e.target.value);
        }
    }
    return (react_1.default.createElement(ButtonToggleComponent, Object.assign({}, props, { borderRadius: "4px", onChange: handleChange, isToggle: true, ref: ref }, (isControlled
        ? {
            name: props.name || uniqueId_1.default(),
            value: controlledValue,
        }
        : { value }))));
});
exports.ButtonToggle = styled_components_1.default(ButtonToggleFactory).withConfig({ displayName: "ButtonToggle", componentId: "sc-q2ogv4" }) `
  border: solid 1px ${(props) => props.theme.colors.palette.charcoal200};

  ${ButtonItem_1.ButtonItemLabel} {
    position: relative;
    height: 36px;
    border-radius: 0;

    &:first-child {
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
    }
    &:last-child {
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px;
    }

    /* stylelint-disable */
    & + ${ButtonItem_1.ButtonItemLabel} {
      &::after {
        content: '';
        display: block;
        height: 20px;
        width: 1px;
        background: ${(props) => props.theme.colors.palette.charcoal200};
        position: absolute;
        left: 0;
        top: 8px;
      }
    }
    /* stylelint-enable */
  }
`;
//# sourceMappingURL=ButtonToggle.js.map