"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Tooltip_1 = require("../Tooltip");
const MenuContext_1 = require("./MenuContext");
function wrapCallback(cbParent, cbChild) {
    return (e) => {
        cbParent(e);
        cbChild && cbChild(e);
    };
}
exports.MenuDisclosure = ({ children, tooltip, tooltipPlacement, }) => {
    const { disabled, id, showDisclosure, isOpen, setOpen, triggerElement, triggerCallbackRef, } = react_1.useContext(MenuContext_1.MenuContext);
    const _a = Tooltip_1.useTooltip({
        content: tooltip,
        disabled: isOpen,
        placement: tooltipPlacement || 'top',
        triggerElement,
    }), _b = _a.eventHandlers, { onFocus, onBlur } = _b, eventHandlers = __rest(_b, ["onFocus", "onBlur"]), { tooltip: renderedTooltip } = _a;
    const [focused, setFocused] = react_1.useState(false);
    function handleFocus() {
        setFocused(true);
        onFocus();
    }
    function handleBlur() {
        setFocused(false);
        onBlur();
    }
    const handleClick = react_1.useCallback(() => {
        setOpen && setOpen(!isOpen);
    }, [setOpen, isOpen]);
    if (!showDisclosure && !isOpen && !focused)
        return null;
    const allCallbacks = Object.assign(Object.assign({}, (tooltip ? eventHandlers : {})), { onBlur: handleBlur, onClick: handleClick, onFocus: handleFocus });
    const cloned = react_1.Children.map(children, (child) => {
        const childProps = child.props;
        const wrappedCallbacks = {};
        Object.keys(allCallbacks).forEach((cbName) => {
            const cbParent = Reflect.get(allCallbacks, cbName);
            wrappedCallbacks[cbName] = wrapCallback(cbParent, childProps[cbName]);
        });
        return react_1.cloneElement(child, Object.assign(Object.assign({}, wrappedCallbacks), { 'aria-controls': id, 'aria-expanded': isOpen, 'aria-haspopup': true, className: `${childProps.className || ''}${isOpen ? ' active' : ''}`, disabled, id: `button-${id}`, ref: triggerCallbackRef }));
    });
    return (react_1.default.createElement(react_1.default.Fragment, null,
        renderedTooltip,
        cloned));
};
//# sourceMappingURL=MenuDisclosure.js.map