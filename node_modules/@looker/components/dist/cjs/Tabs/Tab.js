"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const polished_1 = require("polished");
const styled_components_1 = __importDefault(require("styled-components"));
const design_tokens_1 = require("@looker/design-tokens");
const TabStyle = styled_components_1.default.button.withConfig({ displayName: "TabStyle", componentId: "sc-1vvz242" }) `
  ${design_tokens_1.reset}
  border: none;

  ${design_tokens_1.border}
  ${design_tokens_1.layout}
  ${design_tokens_1.space}
  ${design_tokens_1.typography}

  background: transparent;
  border-bottom: 3px solid;
  border-bottom-color: ${(props) => props.selected ? props.theme.colors.palette.purple400 : 'transparent'};
  border-radius: 0;
  color: ${(props) => props.selected
    ? props.theme.colors.palette.charcoal800
    : props.theme.colors.palette.charcoal500};
  cursor: pointer;

  & + & {
    margin-left: ${(props) => props.theme.space.xlarge};
  }

  &:active {
    border-bottom-color: ${(props) => props.selected
    ? props.theme.colors.palette.purple400
    : props.theme.colors.palette.charcoal400};
  }

  &:active,
  &:hover {
    border-bottom-color: transparent;
  }

  &:focus {
    outline: none;
  }

  ${(props) => props.focusVisible &&
    `box-shadow: 0 0 0 0.15rem ${polished_1.rgba(props.theme.colors.palette.purple300, 0.25)};`};

  &:hover {
    border-bottom-color: ${(props) => props.selected
    ? props.theme.colors.palette.purple400
    : props.theme.colors.palette.charcoal300};
  }

  &:disabled {
    cursor: default;
    color: ${(props) => props.theme.colors.palette.charcoal300};
    border-bottom-color: transparent;
  }
`;
const TabJSX = react_1.forwardRef((props, ref) => {
    const { children, disabled, onBlur, onKeyUp, onSelect } = props, restProps = __rest(props, ["children", "disabled", "onBlur", "onKeyUp", "onSelect"]);
    const [isFocusVisible, setFocusVisible] = react_1.useState(false);
    const handleOnKeyUp = (event) => {
        setFocusVisible(true);
        onKeyUp && onKeyUp(event);
    };
    const handleOnBlur = (event) => {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    const onClick = () => {
        if (!disabled && onSelect) {
            onSelect();
        }
        setFocusVisible(false);
    };
    return (react_1.default.createElement(TabStyle, Object.assign({ focusVisible: isFocusVisible, onKeyUp: handleOnKeyUp, onBlur: handleOnBlur, onClick: onClick, disabled: disabled }, restProps, { ref: ref }), children));
});
TabJSX.displayName = 'TabJSX';
exports.Tab = styled_components_1.default(TabJSX).withConfig({ displayName: "Tab", componentId: "sc-1exl08p" }) ``;
exports.Tab.defaultProps = {
    fontSize: 'small',
    fontWeight: 'semiBold',
    minWidth: '3rem',
    pb: 'small',
    pt: 'xsmall',
};
//# sourceMappingURL=Tab.js.map