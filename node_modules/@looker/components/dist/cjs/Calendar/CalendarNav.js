"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const noop_1 = __importDefault(require("lodash/noop"));
const Tooltip_1 = require("../Tooltip");
const Button_1 = require("../Button");
const Text_1 = require("../Text");
const CalendarContext_1 = require("./CalendarContext");
const headingSizeMap = (size) => {
    switch (size) {
        case 'small':
            return 'h6';
        case 'medium':
            return 'h5';
        case 'large':
            return 'h4';
        default:
            return 'h5';
    }
};
exports.CalendarNav = ({ month, labels, localeUtils, locale, nextMonth, previousMonth, }) => {
    const { size, onNowClick = noop_1.default, onNextClick = noop_1.default, onPrevClick = noop_1.default, showPreviousButton, showNextButton, } = react_1.useContext(CalendarContext_1.CalendarContext);
    const handleNextClick = (e) => {
        e.preventDefault();
        onNextClick(nextMonth);
    };
    const handlePreviousClick = (e) => {
        e.preventDefault();
        onPrevClick(previousMonth);
    };
    const handleLabelClick = () => {
        onNowClick(new Date(Date.now()));
    };
    return (react_1.default.createElement(NavGrid, null,
        react_1.default.createElement(NextButtonWrapper, null, showPreviousButton && (react_1.default.createElement(Button_1.IconButton, { icon: "CaretLeft", label: labels.previousMonth, color: "neutral", size: size, onClick: handlePreviousClick }))),
        react_1.default.createElement(Tooltip_1.Tooltip, { content: "View Current Month" }, (eventHandlers, ref) => (react_1.default.createElement(Button_1.ButtonTransparent, Object.assign({ ref: ref }, eventHandlers, { onClick: handleLabelClick, color: "neutral" }),
            react_1.default.createElement(Text_1.Heading, { as: headingSizeMap(size), fontWeight: "semiBold" }, localeUtils.formatMonthTitle(month, locale))))),
        react_1.default.createElement(PrevButtonWrapper, null, showNextButton && (react_1.default.createElement(Button_1.IconButton, { icon: "CaretRight", label: labels.nextMonth, color: "neutral", size: size, onClick: handleNextClick, style: { justifySelf: 'right' } })))));
};
const NavGrid = styled_components_1.default.div.withConfig({ displayName: "NavGrid", componentId: "sc-8expsc" }) `
  display: grid;
  grid-template-columns: 40px 1fr 40px;
  align-items: center;
  justify-items: center;
`;
const NextButtonWrapper = styled_components_1.default.div.withConfig({ displayName: "NextButtonWrapper", componentId: "sc-8hlw86" }) `
  justify-self: left;
`;
const PrevButtonWrapper = styled_components_1.default.div.withConfig({ displayName: "PrevButtonWrapper", componentId: "sc-t930yk" }) `
  justify-self: right;
`;
//# sourceMappingURL=CalendarNav.js.map