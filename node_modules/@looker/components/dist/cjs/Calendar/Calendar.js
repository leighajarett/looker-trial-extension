"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_day_picker_1 = __importDefault(require("react-day-picker"));
require("react-day-picker/lib/style.css");
const moment_1 = __importDefault(require("react-day-picker/moment"));
const styled_components_1 = __importDefault(require("styled-components"));
const has_1 = __importDefault(require("lodash/has"));
const polished_1 = require("polished");
const design_tokens_1 = require("@looker/design-tokens");
const InputText_1 = require("../Form/Inputs/InputText");
const calendar_size_1 = require("./calendar-size");
const CalendarContext_1 = require("./CalendarContext");
const CalendarNav_1 = require("./CalendarNav");
require("moment/locale/ar");
require("moment/locale/de");
require("moment/locale/es");
require("moment/locale/fr");
require("moment/locale/it");
require("moment/locale/ja");
require("moment/locale/ko");
require("moment/locale/nl");
require("moment/locale/pl");
require("moment/locale/pt");
require("moment/locale/pt-br");
require("moment/locale/ru");
require("moment/locale/sv");
require("moment/locale/tr");
require("moment/locale/zh-cn");
require("moment/locale/zh-tw");
const NoopComponent = () => null;
const InternalCalendar = ({ locale = 'en', onDayClick, className, size, showNextButton = true, showPreviousButton = true, onMonthChange, onNextClick, onNowClick, onPrevClick, viewMonth, selectedDates, }) => {
    const renderDateRange = selectedDates && has_1.default(selectedDates, 'from');
    const modifiers = renderDateRange ? selectedDates : {};
    return (react_1.default.createElement(CalendarContext_1.CalendarContext.Provider, { value: {
            onNextClick,
            onNowClick,
            onPrevClick,
            showNextButton,
            showPreviousButton,
            size,
        } },
        react_1.default.createElement(react_day_picker_1.default, { className: `${renderDateRange && 'render-date-range'} ${className}`, selectedDays: selectedDates, localeUtils: moment_1.default, locale: locale, month: viewMonth, showOutsideDays: true, onDayClick: onDayClick, navbarElement: CalendarNav_1.CalendarNav, captionElement: NoopComponent, modifiers: modifiers, onMonthChange: onMonthChange })));
};
exports.Calendar = styled_components_1.default(InternalCalendar).withConfig({ displayName: "Calendar", componentId: "sc-13nwwp2" }) `
  ${design_tokens_1.reset}
  ${calendar_size_1.calendarSpacing}

  .DayPicker-wrapper {
    padding: 0;
    border: 1px solid transparent;
    &:focus {
      outline: none;
      ${InputText_1.inputTextFocus}
    }
  }
  .DayPicker-Month {
    padding: 0;
    margin: 0;
  }
  .DayPicker-Body {
    display: grid;
    grid-gap: 1px;
  }
  .DayPicker-Week,
  .DayPicker-WeekdaysRow {
    display: grid;
    grid-template-columns: repeat(7, auto);
  }
  .DayPicker-Day {
    ${calendar_size_1.calendarSize}
    line-height: 1;
    padding: 0;
    display: grid;
    align-items: center;
    justify-items: center;
    border: 1px solid transparent;
    transition: background-color 110ms linear;
    color: ${({ theme }) => theme.colors.palette.charcoal700};
    &.DayPicker-Day--outside {
      color: ${({ theme }) => theme.colors.palette.charcoal300};
    }
    &--today {
      color: ${({ theme }) => theme.colors.semanticColors.primary.main};
    }
    &--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside) {
      position: static;
      background-color: ${({ theme }) => theme.colors.semanticColors.primary.main};
      &:hover {
        background-color: ${({ theme }) => theme.colors.semanticColors.primary.dark};
      }
    }
    &:focus {
      border-width: 2px;
      border-color: ${(props) => props.theme.colors.palette.purple300};
      outline: none;
    }
  }

  /*
   * Date range style overrides
   */
  &.render-date-range {
    .DayPicker-Day--selected {
      &.DayPicker-Day--outside,
      &:not(.DayPicker-Day--to):not(.DayPicker-Day--from) {
        background-color: ${({ theme }) => theme.colors.semanticColors.primary.light};
        color: ${({ theme }) => polished_1.mix(0.65, theme.colors.semanticColors.primary.light, theme.colors.semanticColors.neutral.altText)};
      }
      &:not(.DayPicker-Day--to):not(.DayPicker-Day--from):not(.DayPicker-Day--outside) {
        color: ${({ theme }) => theme.colors.semanticColors.neutral.altText};
      }
      border-radius: 0;
      &:not(.DayPicker-Day--from) {
        &:first-child {
          ${({ theme: { radii } }) => `
            border-top-left-radius: ${radii.medium};
            border-bottom-left-radius: ${radii.medium};`}
        }
      }
      &:not(.DayPicker-Day--to) {
        &:last-child {
          ${({ theme: { radii } }) => `
            border-top-right-radius: ${radii.medium};
            border-bottom-right-radius: ${radii.medium};`}
        }
      }
    }
    .DayPicker-Day--from {
      border-top-left-radius: 50%;
      border-bottom-left-radius: 50%;
    }
    .DayPicker-Day--to {
      border-top-right-radius: 50%;
      border-bottom-right-radius: 50%;
    }
  }

  /*
   * Standard view date hover styles.
   * Had to get gross with the specificity in order to override react-day-picker hover styles without using !important
   */
  &:not(.DayPicker--interactionDisabled) {
    .DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover {
      &:hover {
        background-color: ${({ theme }) => theme.colors.semanticColors.primary.light};
        color: ${({ theme }) => theme.colors.semanticColors.primary.main};
      }
    }
  }
`;
exports.Calendar.defaultProps = { size: 'medium' };
//# sourceMappingURL=Calendar.js.map