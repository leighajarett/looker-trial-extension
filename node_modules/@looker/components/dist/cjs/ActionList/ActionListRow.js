"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const pick_1 = __importDefault(require("lodash/pick"));
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const ActionListCheckbox_1 = require("./ActionListCheckbox");
exports.ActionListRowColumns = styled_components_1.default.div.withConfig({ displayName: "ActionListRowColumns", componentId: "sc-n0udtu" }) ``;
const ActionListRowSupplementary = styled_components_1.default.div.withConfig({ displayName: "ActionListRowSupplementary", componentId: "sc-drnxe2" }) ``;
const ActionListRowLayout = react_1.forwardRef((props, ref) => {
    const { className, hasCheckbox, children, onClick, onKeyDown, secondary, tabIndex, } = props;
    return (react_1.default.createElement("div", { ref: ref, className: className, onKeyDown: onKeyDown, tabIndex: tabIndex },
        hasCheckbox && react_1.default.createElement(ActionListCheckbox_1.ActionListCheckbox, Object.assign({}, pick_1.default(props, ActionListCheckbox_1.checkListProps))),
        react_1.default.createElement(exports.ActionListRowColumns, { onClick: onClick }, children),
        react_1.default.createElement(ActionListRowSupplementary, null, secondary)));
});
ActionListRowLayout.displayName = 'ActionListRowLayout';
exports.ActionListRow = styled_components_1.default(ActionListRowLayout).withConfig({ displayName: "ActionListRow", componentId: "sc-1bray9l" }) `
  display: flex;

  background: ${({ disabled, theme }) => disabled && theme.colors.palette.charcoal100};

  &:focus,
  &:hover {
    box-shadow: ${({ theme, supportsRaised, onClick }) => supportsRaised && onClick && theme.shadows[2]};
    cursor: ${({ onClick }) => onClick && 'pointer'};
    outline: none;

    /**
      The hovered ActionListItem needs to sit above its siblings (otherwise the bottom box-shadow is covered up).
      Using position relative to paint it above static siblings.
     */
    position: relative;
  }

  ${exports.ActionListRowColumns} {
    flex-grow: 1;
  }

  ${ActionListRowSupplementary} {
    flex-basis: 2.5rem;
    flex-shrink: 0;
    display: flex;
    align-items: center;
  }
`;
exports.ActionListRow.defaultProps = { supportsRaised: true };
//# sourceMappingURL=ActionListRow.js.map