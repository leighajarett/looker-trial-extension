"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const styled_components_1 = __importDefault(require("styled-components"));
const react_1 = __importStar(require("react"));
const ActionListHeader_1 = require("./ActionListHeader");
const ActionListItemColumn_1 = require("./ActionListItemColumn");
const ActionListRow_1 = require("./ActionListRow");
const ActionListCheckbox_1 = require("./ActionListCheckbox");
const ActionListContext_1 = require("./ActionListContext");
const ActionListHeaderColumn_1 = require("./ActionListHeader/ActionListHeaderColumn");
const actionListFormatting_1 = require("./utils/actionListFormatting");
exports.ActionListLayout = ({ canSelect = false, className, header = true, children, columns, itemsSelected = [], onClickRowSelect = false, onSelect, onSelectAll, onSort, }) => {
    const [allItems, setAllItems] = react_1.useState([]);
    const allSelected = !!allItems.length && allItems.every((item) => itemsSelected.includes(item))
        ? true
        : allItems.some((item) => itemsSelected.includes(item))
            ? 'mixed'
            : false;
    const addItemToAllItems = (id) => {
        !allItems.includes(id) && setAllItems([...allItems, id]);
    };
    const handleSelectAll = onSelectAll ? () => onSelectAll() : undefined;
    const context = {
        addItemToAllItems,
        allSelected,
        canSelect: !!canSelect,
        columns,
        itemsSelected,
        onClickRowSelect,
        onSelect,
        onSelectAll: handleSelectAll,
        onSort,
    };
    const actionListHeader = header === true ? (react_1.default.createElement(ActionListHeader_1.ActionListHeader, null, ActionListHeader_1.generateActionListHeaderColumns(columns))) : header === false ? null : (react_1.default.createElement(ActionListHeader_1.ActionListHeader, null, header));
    return (react_1.default.createElement(ActionListContext_1.ActionListContext.Provider, { value: context },
        react_1.default.createElement("div", { className: className },
            actionListHeader,
            react_1.default.createElement("div", null, children))));
};
exports.ActionList = styled_components_1.default(exports.ActionListLayout).withConfig({ displayName: "ActionList", componentId: "sc-1sr9tfc" }) `
  ${ActionListRow_1.ActionListRowColumns} {
    display: grid;
    grid-template-columns: ${(props) => props.columns.map((column) => `${column.widthPercent}%`).join(' ')};
    align-items: center;
  }

  ${ActionListItemColumn_1.ActionListItemColumn}:first-child {
    padding-left: ${({ canSelect, theme }) => canSelect ? theme.space.none : undefined};
  }

  ${ActionListHeaderColumn_1.ActionListHeaderColumn}:first-child {
    padding-left: ${({ canSelect, theme }) => canSelect ? theme.space.none : undefined};
  }

  ${ActionListItemColumn_1.ActionListItemColumn},
  ${ActionListHeaderColumn_1.ActionListHeaderColumn} {
    display: flex;
    padding: ${(props) => props.theme.space.small};
  }

  ${ActionListHeader_1.ActionListHeader} {
    padding-left: ${({ canSelect }) => typeof canSelect === 'object' &&
    !canSelect.all &&
    ActionListCheckbox_1.actionListCheckboxWidth};
  }

  ${(props) => actionListFormatting_1.numericColumnCSS(actionListFormatting_1.getNumericColumnIndices(props.columns))}
  ${(props) => actionListFormatting_1.primaryKeyColumnCSS(actionListFormatting_1.getPrimaryKeyColumnIndices(props.columns))}
`;
//# sourceMappingURL=ActionList.js.map