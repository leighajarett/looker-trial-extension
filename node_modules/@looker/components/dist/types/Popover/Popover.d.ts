import { Placement } from '@popperjs/core';
import React, { ReactNode, RefObject, Ref, SyntheticEvent } from 'react';
export interface UsePopoverProps {
    arrow?: boolean;
    isOpen?: boolean;
    onClose?: () => void;
    placement?: Placement;
    content: ReactNode;
    canClose?: () => boolean;
    portalElement?: HTMLDivElement | null;
    groupedPopoversRef?: RefObject<HTMLElement>;
    pin?: boolean;
    setOpen?: (open: boolean) => void;
    disableScrollLock?: boolean;
    triggerElement?: HTMLElement | null;
    triggerToggle?: boolean;
    focusTrap?: boolean;
}
export interface PopoverProps extends UsePopoverProps {
    children: (onClick: (event: SyntheticEvent) => void, ref: Ref<any>, className?: string) => JSX.Element;
    hoverDisclosureRef?: HTMLElement | null | RefObject<HTMLElement>;
}
export declare function usePopover({ arrow, canClose, content, groupedPopoversRef, pin, isOpen: controlledIsOpen, onClose, placement: propsPlacement, setOpen: controlledSetOpen, triggerElement, triggerToggle, focusTrap, }: UsePopoverProps): {
    contentContainer: HTMLElement | null;
    isOpen: boolean;
    open: (event: React.SyntheticEvent<Element, Event>) => void;
    popover: false | JSX.Element;
    popperInstanceRef: React.MutableRefObject<import("@popperjs/core").Instance | undefined>;
    ref: (node: HTMLElement | null) => void;
};
export declare function Popover({ children, hoverDisclosureRef, ...props }: PopoverProps): JSX.Element;
