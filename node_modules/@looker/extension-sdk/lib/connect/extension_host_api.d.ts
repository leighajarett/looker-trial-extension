import { ExtensionHostApi, ExtensionHostApiConfiguration, ExtensionNotification, FetchResponseBodyType, LookerHostData, ApiVersion } from './types';
export declare const EXTENSION_SDK_VERSION = "0.6.0";
export declare class ExtensionHostApiImpl implements ExtensionHostApi {
    private _configuration;
    private _lookerHostData?;
    private chattyHost;
    private initializedCallback?;
    private setInitialRoute?;
    private hostChangedRoute?;
    constructor(configuration: ExtensionHostApiConfiguration);
    get lookerHostData(): Readonly<LookerHostData> | undefined;
    handleNotification(message: ExtensionNotification): any | void;
    verifyHostConnection(): Promise<any>;
    invokeCoreSdkByPath(httpMethod: string, path: string, params?: any, body?: any, authenticator?: any, options?: any, apiVersion?: ApiVersion): Promise<any>;
    updateTitle(title: string): void;
    updateLocation(url: string, state?: any, target?: string): void;
    openBrowserWindow(url: string, target?: string): void;
    closeHostPopovers(): void;
    clientRouteChanged(route: string, routeState?: any): void;
    localStorageSetItem(name: string, value?: string): Promise<boolean>;
    localStorageGetItem(name: string): Promise<string | null>;
    localStorageRemoveItem(name: string): Promise<boolean>;
    track(name: string, trackAction: string, attributes?: Record<string, any>): void;
    error(errorEvent: ErrorEvent): void;
    unloaded(): void;
    fetchProxy(resource: string, init?: Record<string, any>, responseBodyType?: FetchResponseBodyType): Promise<any>;
    sendAndReceive(type: string, payload?: any): Promise<any>;
    send(type: string, payload?: any): void;
    verifyLookerVersion(version: string): string | undefined;
}
