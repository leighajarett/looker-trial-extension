import { AuthSession } from './authSession';
import { ITransport, IRequestProps } from './transport';
import { IApiSettings } from './apiSettings';
import { AuthToken } from './authToken';
/**
 * An AuthSession class intended for use with CORS requests
 *
 * This session uses `authenticate()` to establish a token via the overridden `getToken()` before
 * decorating the requests with the authentication information to call the API endpoint.
 *
 * The Looker API `login` endpoint is not available via CORS calls, so `getToken()` needs to be
 * implemented in the descendant of this class that's instantiated for the browser run-time. This
 * can be a brokered "get token" operation from a proxy server, or some other method of getting
 * the token.
 *
 */
export declare abstract class CorsSession extends AuthSession {
    settings: IApiSettings;
    activeToken: AuthToken;
    constructor(settings: IApiSettings, transport?: ITransport);
    /**
     * Is the session active and authenticated?
     *
     * @returns `true` if the current token is authenticated
     */
    isAuthenticated(): boolean;
    /**
     * This implementation calls the inheritor-implemented `getToken()` method to retrieve the authentication token for
     * the Looker API server because the `/login` endpoint is not available via CORS for the Looker API.
     *
     * @param props the properties of the request
     * @returns the same request properties with "authentication" data added
     *
     */
    authenticate(props: IRequestProps): Promise<IRequestProps>;
}
