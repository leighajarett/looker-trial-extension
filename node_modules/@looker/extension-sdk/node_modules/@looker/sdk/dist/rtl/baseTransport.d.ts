import { Authenticator, HttpMethod, ITransport, ITransportSettings, SDKResponse, Values } from './transport';
import { Readable } from 'readable-stream';
export declare abstract class BaseTransport implements ITransport {
    protected readonly options: ITransportSettings;
    constructor(options: ITransportSettings);
    /**
     * Request a streaming response
     * @param {HttpMethod} method
     * @param {string} path Request path
     * @param queryParams query parameters for the request
     * @param body http body to include with request
     * @param {Authenticator} authenticator callback to add authentication information to the request
     * @param {Partial<ITransportSettings>} options transport option overrides
     * @returns {Promise<TSuccess>} the streaming response
     */
    abstract request<TSuccess, TError>(method: HttpMethod, path: string, queryParams?: any, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<SDKResponse<TSuccess, TError>>;
    /**
     * Request a streaming response
     * @param {(readable: _Readable.Readable) => Promise<TSuccess>} callback A function will be called with a Node.js or
     *  Browser `Readable` object. The readable object represents the streaming data.
     * @param {HttpMethod} method
     * @param {string} path Request path
     * @param queryParams query parameters for the request
     * @param body http body to include with request
     * @param {Authenticator} authenticator callback to add authentication information to the request
     * @param {Partial<ITransportSettings>} options transport option overrides
     * @returns {Promise<TSuccess>} the streaming response
     */
    abstract stream<TSuccess>(callback: (readable: Readable) => Promise<TSuccess>, method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<TSuccess>;
    /**
     * Determine whether the url should be an API path, relative from base_url, or is already fully specified override
     * @param path Request path
     * @param options Transport settings
     * @param queryParams Collection of query Params
     * @param authenticator optional callback
     * @returns the fully specified request path including any query string parameters
     */
    makeUrl(path: string, options: Partial<ITransportSettings>, queryParams?: Values): string;
}
