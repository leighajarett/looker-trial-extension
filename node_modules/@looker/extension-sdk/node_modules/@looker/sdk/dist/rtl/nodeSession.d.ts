import { IRequestProps, ITransport } from './transport';
import { AuthToken } from './authToken';
import { IApiSettings } from './apiSettings';
import { AuthSession } from './authSession';
export declare class NodeSession extends AuthSession {
    settings: IApiSettings;
    private readonly apiPath;
    _authToken: AuthToken;
    _sudoToken: AuthToken;
    constructor(settings: IApiSettings, transport?: ITransport);
    /**
     * Abstraction of AuthToken retrieval to support sudo mode
     */
    get activeToken(): AuthToken;
    /**
     * Is there an active authentication token?
     */
    isAuthenticated(): boolean;
    /**
     * Add authentication data to the pending API request
     * @param props initialized API request properties
     *
     * @returns the updated request properties
     */
    authenticate(props: IRequestProps): Promise<IRequestProps>;
    isSudo(): boolean;
    /**
     * retrieve the current authentication token. If there is no active token, performs default
     * login to retrieve the token
     */
    getToken(): Promise<AuthToken>;
    /**
     * Reset the authentication session
     */
    reset(): void;
    /**
     * Activate the authentication token for the API3 or sudo user
     * @param sudoId {string | number}: optional. If provided, impersonates the user specified
     *
     */
    login(sudoId?: string | number): Promise<AuthToken>;
    /**
     * Logout the active user. If the active user is sudo, the session reverts to the API3 user
     */
    logout(): Promise<boolean>;
    private ok;
    private sudoLogout;
    private _login;
    private _logout;
}
