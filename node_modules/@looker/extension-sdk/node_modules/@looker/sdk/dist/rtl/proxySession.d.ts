import { AuthSession } from './authSession';
import { ITransport, IRequestProps } from './transport';
import { IApiSettings } from './apiSettings';
/**
 * An AuthSession class intended for use with proxied requests
 *
 * This session uses `authenticate` to modify all requests to pass through a proxy server with
 * passing the request to the proxy server specified in the `proxyUrl` parameter, and sets
 * the original request path as an `X-Forwarded-For` header.
 *
 */
export declare abstract class ProxySession extends AuthSession {
    settings: IApiSettings;
    proxyUrl: string;
    constructor(settings: IApiSettings, proxyUrl: string, transport?: ITransport);
    /**
     * Proxy session is considered to be always authenticated since the proxy handles all auth
     *
     * @returns `true` since the proxy handles all authentication
     */
    isAuthenticated(): boolean;
    /**
     * This implementation swaps the request's path with the proxy url, and puts the original
     * request path in the `X-Forwarded-For` header, presuming that the proxy server will add API authentication
     * information to the request that gets submitted to the Looker API, then forward the API response to the requestor
     *
     * @param props the properties of the request
     * @returns the same request properties with "authentication" data added
     *
     */
    authenticate(props: IRequestProps): Promise<IRequestProps>;
}
