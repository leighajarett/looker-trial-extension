"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apiSettings_1 = require("./apiSettings");
var methods_1 = require("../sdk/3.1/methods");
var extensionSession_1 = require("./extensionSession");
var extensionTransport_1 = require("./extensionTransport");
var LookerExtensionSDK = /** @class */ (function () {
    function LookerExtensionSDK() {
    }
    /**
     * Creates a [[LookerSDK]] object.
     *
     * Examples:
     * LookerExtensionSDK.createClient(host) => constructs a Looker31SDK
     *
     * LookerExtensionSDK.createClient(host, Looker40SDK) => constructs a Looker40SDK
     */
    LookerExtensionSDK.createClient = function (hostConnection, type, settings) {
        settings = settings || apiSettings_1.DefaultSettings();
        var transport = new extensionTransport_1.ExtensionTransport(settings, hostConnection);
        var session = new extensionSession_1.ExtensionSession(settings, transport);
        if (type) {
            return new type(session);
        }
        else {
            // work around TS2322
            return (new methods_1.Looker31SDK(session));
        }
    };
    return LookerExtensionSDK;
}());
exports.LookerExtensionSDK = LookerExtensionSDK;
