/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import { Looker31SDK } from '@looker/sdk/dist/sdk/3.1/methods'
import { Looker40SDK } from '@looker/sdk/dist/sdk/4.0/methods'

let _core31SDK: Looker31SDK | undefined
let _core40SDK: Looker40SDK | undefined

/**
 * Register the core 3.1 SDK. The ExtensionProvider will automatically
 * call this when connection with the host suceeds. An extension should
 * never call this
 * @param coreSDK core sdk
 */
export const registerCore31SDK = (coreSDK: Looker31SDK) => {
  if (_core31SDK) {
    throw new Error('coreSDK can only be registered once')
  }
  _core31SDK = coreSDK
}
export const registerCoreSDK = registerCore31SDK

/**
 * Unregister the core SDK.
 */
export const unregisterCore31SDK = () => (_core31SDK = undefined)

/**
 * Unregister the core SDK.
 * @deprecated use unregisterCore31SDK instead
 */
export const unregisterCoreSDK = unregisterCore31SDK

/**
 * Global access to the coreSDK. An error will be thrown if accessed prematurely.
 */
export const getCore31SDK = () => {
  if (!_core31SDK) {
    throw new Error('Looker host connection not established')
  }
  return _core31SDK
}

/**
 * Global access to the coreSDK. An error will be thrown if accessed prematurely.
 * @deprecated use getCore31SDK instead
 */
export const getCoreSDK = getCore31SDK

/**
 * Register the core 4.0 SDK. The ExtensionProvider will automatically
 * call this when connection with the host suceeds. An extension should
 * never call this
 * @param coreSDK core sdk
 */
export const registerCore40SDK = (coreSDK: Looker40SDK) => {
  if (_core40SDK) {
    throw new Error('coreSDK can only be registered onces')
  }
  _core40SDK = coreSDK
}

/**
 * Unregister the core 4.0 SDK.
 */
export const unregisterCore40SDK = () => (_core40SDK = undefined)

/**
 * Global access to the core40SDK. An error will be thrown if accessed prematurely.
 */
export const getCore40SDK = () => {
  if (!_core40SDK) {
    throw new Error('Looker host connection not established')
  }
  return _core40SDK
}
