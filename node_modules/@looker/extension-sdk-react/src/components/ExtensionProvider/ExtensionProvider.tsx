/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import isEqual from 'lodash/isEqual'
import React, { useState, useRef } from 'react'
import { MemoryRouter } from 'react-router-dom'
import { LookerExtensionSDK, connectExtensionHost, ExtensionHostApi } from '@looker/extension-sdk'
import { Looker31SDK } from '@looker/sdk/dist/sdk/3.1/methods'
import { ExtensionProviderProps, ExtensionContextData, RouteData } from './types'
import { RouteChangeListener } from './components/RouteChangeListener'
import { registerCore31SDK, registerCore40SDK, unregisterCore31SDK, unregisterCore40SDK } from '../../sdk/core_sdk'
import { Looker40SDK } from '@looker/sdk/dist/sdk/4.0/methods'
import { getInitialRouteEntries } from './utils/get_initial_route_entries'

/**
 * React context provider for extension API and SDK
 */
export const ExtensionContext = React.createContext<ExtensionContextData>(
  undefined as any // no one will ever see this undefined!
)

const initializeFailedMessage = 'Failed to establish communication with Looker host'

/**
 * The ExtensionContextData interface requires that there is an ExtensionHostApi.
 * Now that error handling has been added, the ExtensionHostApi is no longer
 * always available. Provide a dummy implementation.
 */
const createTempExtensionHostApi = (): ExtensionHostApi => ({
  invokeCoreSdkByPath: () => Promise.reject(),
  verifyHostConnection: () => Promise.reject(),
  handleNotification: () => {},
  clientRouteChanged: () => {},
  updateTitle: () => {},
  updateLocation: () => {},
  openBrowserWindow: () => {},
  closeHostPopovers: () => {},
  localStorageGetItem: () => Promise.reject(),
  localStorageSetItem: () => Promise.reject(),
  localStorageRemoveItem: () => Promise.reject(),
  track: () => {},
  error: () => {},
})

/**
 * ExtensionProvider component. Provides access to the extension API and SDK (use
 * ExtensionContext) and react routing services.
 */
export const ExtensionProvider: React.FC<ExtensionProviderProps> = ({
  onPathnameChange,
  onRouteChange,
  hostTracksRoute = true,
  loadingComponent,
  requiredLookerVersion,
  children,
}) => {
  const [initialRouteData, setInitialRouteData] = useState<RouteData>()
  const [hostRouteData, setHostRouteData] = useState<RouteData>({ route: '' })
  const hostInitializedTimerId = useRef(0)
  const [initializing, setInitializing] = useState(true)
  const [extensionData, setExtensionData] = React.useState<ExtensionContextData>({
    extensionSDK: createTempExtensionHostApi(),
    coreSDK: {} as Looker31SDK,
    core31SDK: {} as Looker31SDK,
    core40SDK: {} as Looker40SDK,
  })

  const initialized = (errorMessage?: string) => {
    window.clearTimeout(hostInitializedTimerId.current)
    setInitializing(false)
    if (errorMessage) {
      setExtensionData((previousState: ExtensionContextData) => {
        return {
          ...previousState,
          initializeError: errorMessage,
        }
      })
    }
  }

  React.useEffect(() => {
    return () => {
      unregisterCore31SDK()
      unregisterCore40SDK()
    }
  }, [])

  const setInitialRouteAndRouteState = (route: string, routeState?: any) => {
    if (hostTracksRoute) {
      setInitialRouteData({ route, routeState })
    }
  }

  const hostChangedRoute = (_route: string, routeState?: any) => {
    const route = _route.startsWith('/') ? _route : '/' + _route
    if (route !== hostRouteData.route || !isEqual(routeState, hostRouteData.routeState)) {
      setHostRouteData({ route, routeState })
    }
  }

  React.useEffect(() => {
    hostInitializedTimerId.current = window.setTimeout(() => {
      console.error('Failed to establish host connection')
      setInitializing(false)
      setExtensionData((previousState: ExtensionContextData) => {
        return {
          ...previousState,
          initializeError: initializeFailedMessage,
          extensionSDK: createTempExtensionHostApi(),
        }
      })
    }, 10000)
    connectExtensionHost({
      initializedCallback: initialized,
      setInitialRoute: setInitialRouteAndRouteState,
      requiredLookerVersion,
      hostChangedRoute,
    })
      .then((extensionHost) => {
        setExtensionData((previousState: ExtensionContextData) => {
          const core31SDK: Looker31SDK = LookerExtensionSDK.create31Client(extensionHost)
          const core40SDK: Looker40SDK = LookerExtensionSDK.create40Client(extensionHost)
          // Provide global access for use by redux if needed
          registerCore31SDK(core31SDK)
          registerCore40SDK(core40SDK)
          return {
            ...previousState,
            extensionSDK: extensionHost,
            coreSDK: core31SDK,
            core31SDK,
            core40SDK,
          }
        })
      })
      .catch((error) => {
        console.error(error)
        window.clearTimeout(hostInitializedTimerId.current)
        setInitializing(false)
        setExtensionData((previousState: ExtensionContextData) => {
          return {
            ...previousState,
            initializeError: error.message ? error.message : initializeFailedMessage,
            extensionSDK: createTempExtensionHostApi(),
          }
        })
      })
  }, [])

  React.useEffect(() => {
    const onBodyMousedown = () => {
      if (extensionData && extensionData.extensionSDK) {
        extensionData.extensionSDK.closeHostPopovers()
      }
    }
    let body: HTMLBodyElement | undefined | null
    if (!initializing) {
      body = document.querySelector('body')
      if (body) {
        body.addEventListener('mousedown', onBodyMousedown)
      }
    }
    return () => {
      if (body) {
        body.removeEventListener('mousedown', onBodyMousedown)
      }
    }
  }, [initializing])

  return (
    <>
      {initializing && loadingComponent}
      {hostTracksRoute && !initializing && (
        <MemoryRouter initialEntries={getInitialRouteEntries(initialRouteData)}>
          <RouteChangeListener
            onRouteChange={onRouteChange}
            onPathnameChange={onPathnameChange}
            extensionHost={extensionData!.extensionSDK}
            hostRoute={hostRouteData.route}
            hostRouteState={hostRouteData.routeState}
          />
          <ExtensionContext.Provider value={extensionData!}>{children}</ExtensionContext.Provider>
        </MemoryRouter>
      )}
      {!hostTracksRoute && !initializing && (
        <ExtensionContext.Provider value={extensionData!}>{children}</ExtensionContext.Provider>
      )}
    </>
  )
}

/**
 * @deprecated use ExtensionProvider instead
 */
export const ExportWrapper = ExtensionProvider
