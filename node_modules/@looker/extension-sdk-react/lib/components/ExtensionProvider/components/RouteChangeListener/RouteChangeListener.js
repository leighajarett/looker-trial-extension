"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RouteChangeListener = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var RouteChangeListener = function RouteChangeListener(_ref) {
  var onPathnameChange = _ref.onPathnameChange,
      onRouteChange = _ref.onRouteChange,
      extensionHost = _ref.extensionHost,
      hostRoute = _ref.hostRoute,
      hostRouteState = _ref.hostRouteState;
  var history = (0, _reactRouterDom.useHistory)();
  var location = (0, _reactRouterDom.useLocation)();
  (0, _react.useEffect)(function () {
    if (onPathnameChange) {
      onPathnameChange(location.pathname);
    }

    if (onRouteChange) {
      onRouteChange(location.pathname + location.search, _objectSpread({}, location.state));
    }

    ;
    extensionHost.clientRouteChanged(location.pathname + location.search, location.state);
  }, [location]);
  (0, _react.useEffect)(function () {
    if (hostRoute) {
      history.push(hostRoute, hostRouteState);
    }
  }, [hostRoute]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null);
};

exports.RouteChangeListener = RouteChangeListener;
//# sourceMappingURL=RouteChangeListener.js.map