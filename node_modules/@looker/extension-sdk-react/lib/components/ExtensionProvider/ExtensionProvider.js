"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportWrapper = exports.ExtensionProvider = exports.ExtensionContext = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _extensionSdk = require("@looker/extension-sdk");

var _RouteChangeListener = require("./components/RouteChangeListener");

var _core_sdk = require("../../sdk/core_sdk");

var _get_initial_route_entries = require("./utils/get_initial_route_entries");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * React context provider for extension API and SDK
 */
var ExtensionContext = _react["default"].createContext(undefined // no one will ever see this undefined!
);

exports.ExtensionContext = ExtensionContext;
var initializeFailedMessage = 'Failed to establish communication with Looker host';
/**
 * The ExtensionContextData interface requires that there is an ExtensionHostApi.
 * Now that error handling has been added, the ExtensionHostApi is no longer
 * always available. Provide a dummy implementation.
 */

var createTempExtensionHostApi = function createTempExtensionHostApi() {
  return {
    invokeCoreSdkByPath: function invokeCoreSdkByPath() {
      return Promise.reject();
    },
    verifyHostConnection: function verifyHostConnection() {
      return Promise.reject();
    },
    handleNotification: function handleNotification() {},
    clientRouteChanged: function clientRouteChanged() {},
    updateTitle: function updateTitle() {},
    updateLocation: function updateLocation() {},
    openBrowserWindow: function openBrowserWindow() {},
    closeHostPopovers: function closeHostPopovers() {},
    localStorageGetItem: function localStorageGetItem() {
      return Promise.reject();
    },
    localStorageSetItem: function localStorageSetItem() {
      return Promise.reject();
    },
    localStorageRemoveItem: function localStorageRemoveItem() {
      return Promise.reject();
    },
    track: function track() {},
    error: function error() {}
  };
};
/**
 * ExtensionProvider component. Provides access to the extension API and SDK (use
 * ExtensionContext) and react routing services.
 */


var ExtensionProvider = function ExtensionProvider(_ref) {
  var onPathnameChange = _ref.onPathnameChange,
      onRouteChange = _ref.onRouteChange,
      _ref$hostTracksRoute = _ref.hostTracksRoute,
      hostTracksRoute = _ref$hostTracksRoute === void 0 ? true : _ref$hostTracksRoute,
      loadingComponent = _ref.loadingComponent,
      requiredLookerVersion = _ref.requiredLookerVersion,
      children = _ref.children;

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      initialRouteData = _useState2[0],
      setInitialRouteData = _useState2[1];

  var _useState3 = (0, _react.useState)({
    route: ''
  }),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      hostRouteData = _useState4[0],
      setHostRouteData = _useState4[1];

  var hostInitializedTimerId = (0, _react.useRef)(0);

  var _useState5 = (0, _react.useState)(true),
      _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
      initializing = _useState6[0],
      setInitializing = _useState6[1];

  var _React$useState = _react["default"].useState({
    extensionSDK: createTempExtensionHostApi(),
    coreSDK: {},
    core31SDK: {},
    core40SDK: {}
  }),
      _React$useState2 = (0, _slicedToArray2["default"])(_React$useState, 2),
      extensionData = _React$useState2[0],
      setExtensionData = _React$useState2[1];

  var initialized = function initialized(errorMessage) {
    window.clearTimeout(hostInitializedTimerId.current);
    setInitializing(false);

    if (errorMessage) {
      setExtensionData(function (previousState) {
        return _objectSpread({}, previousState, {
          initializeError: errorMessage
        });
      });
    }
  };

  _react["default"].useEffect(function () {
    return function () {
      (0, _core_sdk.unregisterCore31SDK)();
      (0, _core_sdk.unregisterCore40SDK)();
    };
  }, []);

  var setInitialRouteAndRouteState = function setInitialRouteAndRouteState(route, routeState) {
    if (hostTracksRoute) {
      setInitialRouteData({
        route: route,
        routeState: routeState
      });
    }
  };

  var hostChangedRoute = function hostChangedRoute(_route, routeState) {
    var route = _route.startsWith('/') ? _route : '/' + _route;

    if (route !== hostRouteData.route || !(0, _isEqual["default"])(routeState, hostRouteData.routeState)) {
      setHostRouteData({
        route: route,
        routeState: routeState
      });
    }
  };

  _react["default"].useEffect(function () {
    hostInitializedTimerId.current = window.setTimeout(function () {
      console.error('Failed to establish host connection');
      setInitializing(false);
      setExtensionData(function (previousState) {
        return _objectSpread({}, previousState, {
          initializeError: initializeFailedMessage,
          extensionSDK: createTempExtensionHostApi()
        });
      });
    }, 10000);
    (0, _extensionSdk.connectExtensionHost)({
      initializedCallback: initialized,
      setInitialRoute: setInitialRouteAndRouteState,
      requiredLookerVersion: requiredLookerVersion,
      hostChangedRoute: hostChangedRoute
    }).then(function (extensionHost) {
      setExtensionData(function (previousState) {
        var core31SDK = _extensionSdk.LookerExtensionSDK.create31Client(extensionHost);

        var core40SDK = _extensionSdk.LookerExtensionSDK.create40Client(extensionHost); // Provide global access for use by redux if needed


        (0, _core_sdk.registerCore31SDK)(core31SDK);
        (0, _core_sdk.registerCore40SDK)(core40SDK);
        return _objectSpread({}, previousState, {
          extensionSDK: extensionHost,
          coreSDK: core31SDK,
          core31SDK: core31SDK,
          core40SDK: core40SDK
        });
      });
    })["catch"](function (error) {
      console.error(error);
      window.clearTimeout(hostInitializedTimerId.current);
      setInitializing(false);
      setExtensionData(function (previousState) {
        return _objectSpread({}, previousState, {
          initializeError: error.message ? error.message : initializeFailedMessage,
          extensionSDK: createTempExtensionHostApi()
        });
      });
    });
  }, []);

  _react["default"].useEffect(function () {
    var onBodyMousedown = function onBodyMousedown() {
      if (extensionData && extensionData.extensionSDK) {
        extensionData.extensionSDK.closeHostPopovers();
      }
    };

    var body;

    if (!initializing) {
      body = document.querySelector('body');

      if (body) {
        body.addEventListener('mousedown', onBodyMousedown);
      }
    }

    return function () {
      if (body) {
        body.removeEventListener('mousedown', onBodyMousedown);
      }
    };
  }, [initializing]);

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, initializing && loadingComponent, hostTracksRoute && !initializing && /*#__PURE__*/_react["default"].createElement(_reactRouterDom.MemoryRouter, {
    initialEntries: (0, _get_initial_route_entries.getInitialRouteEntries)(initialRouteData)
  }, /*#__PURE__*/_react["default"].createElement(_RouteChangeListener.RouteChangeListener, {
    onRouteChange: onRouteChange,
    onPathnameChange: onPathnameChange,
    extensionHost: extensionData.extensionSDK,
    hostRoute: hostRouteData.route,
    hostRouteState: hostRouteData.routeState
  }), /*#__PURE__*/_react["default"].createElement(ExtensionContext.Provider, {
    value: extensionData
  }, children)), !hostTracksRoute && !initializing && /*#__PURE__*/_react["default"].createElement(ExtensionContext.Provider, {
    value: extensionData
  }, children));
};
/**
 * @deprecated use ExtensionProvider instead
 */


exports.ExtensionProvider = ExtensionProvider;
var ExportWrapper = ExtensionProvider;
exports.ExportWrapper = ExportWrapper;
//# sourceMappingURL=ExtensionProvider.js.map