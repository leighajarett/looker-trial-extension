"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCore40SDK = exports.unregisterCore40SDK = exports.registerCore40SDK = exports.getCoreSDK = exports.getCore31SDK = exports.unregisterCoreSDK = exports.unregisterCore31SDK = exports.registerCoreSDK = exports.registerCore31SDK = void 0;

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var _core31SDK;

var _core40SDK;
/**
 * Register the core 3.1 SDK. The ExtensionProvider will automatically
 * call this when connection with the host suceeds. An extension should
 * never call this
 * @param coreSDK core sdk
 */


var registerCore31SDK = function registerCore31SDK(coreSDK) {
  if (_core31SDK) {
    throw new Error('coreSDK can only be registered once');
  }

  _core31SDK = coreSDK;
};

exports.registerCore31SDK = registerCore31SDK;
var registerCoreSDK = registerCore31SDK;
/**
 * Unregister the core SDK.
 */

exports.registerCoreSDK = registerCoreSDK;

var unregisterCore31SDK = function unregisterCore31SDK() {
  return _core31SDK = undefined;
};
/**
 * Unregister the core SDK.
 * @deprecated use unregisterCore31SDK instead
 */


exports.unregisterCore31SDK = unregisterCore31SDK;
var unregisterCoreSDK = unregisterCore31SDK;
/**
 * Global access to the coreSDK. An error will be thrown if accessed prematurely.
 */

exports.unregisterCoreSDK = unregisterCoreSDK;

var getCore31SDK = function getCore31SDK() {
  if (!_core31SDK) {
    throw new Error('Looker host connection not established');
  }

  return _core31SDK;
};
/**
 * Global access to the coreSDK. An error will be thrown if accessed prematurely.
 * @deprecated use getCore31SDK instead
 */


exports.getCore31SDK = getCore31SDK;
var getCoreSDK = getCore31SDK;
/**
 * Register the core 4.0 SDK. The ExtensionProvider will automatically
 * call this when connection with the host suceeds. An extension should
 * never call this
 * @param coreSDK core sdk
 */

exports.getCoreSDK = getCoreSDK;

var registerCore40SDK = function registerCore40SDK(coreSDK) {
  if (_core40SDK) {
    throw new Error('coreSDK can only be registered onces');
  }

  _core40SDK = coreSDK;
};
/**
 * Unregister the core 4.0 SDK.
 */


exports.registerCore40SDK = registerCore40SDK;

var unregisterCore40SDK = function unregisterCore40SDK() {
  return _core40SDK = undefined;
};
/**
 * Global access to the core40SDK. An error will be thrown if accessed prematurely.
 */


exports.unregisterCore40SDK = unregisterCore40SDK;

var getCore40SDK = function getCore40SDK() {
  if (!_core40SDK) {
    throw new Error('Looker host connection not established');
  }

  return _core40SDK;
};

exports.getCore40SDK = getCore40SDK;
//# sourceMappingURL=core_sdk.js.map